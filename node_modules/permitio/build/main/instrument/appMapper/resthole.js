"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nameEndpointsInRestHoleGroups = exports.findGroupForPath = exports.groupRestHoleEndpoints = void 0;
const lodash_1 = __importDefault(require("lodash"));
const mapExpressApp_1 = require("./mapExpress/mapExpressApp");
/**
 *
 * @param a path
 * @param b path
 * @param pathDelim delimiter
 * @returns the mutual path shared by both a and b
 */
function getPathsSharedBase(a, b, pathDelim = mapExpressApp_1.PATH_DELIMITER) {
    const aParts = a.split(pathDelim);
    const bParts = b.split(pathDelim);
    const sharedBase = [];
    const minLength = Math.min(aParts.length, bParts.length);
    // All but last
    for (let i = 0; i <= minLength; ++i) {
        if (aParts[i] !== bParts[i]) {
            break;
        }
        sharedBase.push(aParts[i]);
    }
    // For grouping purposes - paths ending with a key are part of the same path without the key (i.e. '\p\:1' === '\p')
    // drop last path part if it's a key
    const cleanSharedPath = lodash_1.default.join(sharedBase.length > 1 && sharedBase[sharedBase.length - 1].startsWith(mapExpressApp_1.KEY_DELIMITER)
        ? sharedBase.slice(0, sharedBase.length - 1)
        : sharedBase, pathDelim);
    return cleanSharedPath;
}
function groupRestHoleEndpoints(endpoints) {
    const groups = {};
    // Get all EP that have only a single method (REST-HOLE pattern), and sort them longest first
    const singleMethodEndpoints = lodash_1.default.reverse(lodash_1.default.sortBy(lodash_1.default.filter(endpoints, (e) => (e === null || e === void 0 ? void 0 : e.methods.length) === 1), 'path.length'));
    for (const a of singleMethodEndpoints) {
        const sharedPaths = [];
        // Find all endpoints that share a mutual base-path
        for (const b of singleMethodEndpoints) {
            if (a.path !== b.path) {
                const shared = getPathsSharedBase(a.path, b.path);
                if (shared.length > 0) {
                    sharedPaths.push(shared);
                }
            }
        }
        // Keep only the longest paths that don't overlap
        const longestSharedPaths = lodash_1.default.filter(sharedPaths, (path) => {
            // Paths overlapping with the current path which are longer
            const overlappingAndLonger = lodash_1.default.filter(sharedPaths, (otherPath) => path !== otherPath && otherPath.startsWith(path) && otherPath.length > path.length);
            return overlappingAndLonger.length === 0;
        });
        for (const groupPath of longestSharedPaths) {
            const group = lodash_1.default.get(groups, groupPath, {});
            // storing by path ensures uniqueness
            group[a.path] = a;
            groups[groupPath] = group;
        }
    }
    // Flatten and ensure order (shortest first - likely the root node)
    const flatGroups = lodash_1.default.fromPairs(lodash_1.default.map(groups, (group, key) => [key, lodash_1.default.sortBy(lodash_1.default.values(group), 'path')]));
    return flatGroups;
}
exports.groupRestHoleEndpoints = groupRestHoleEndpoints;
/**          const group: MappedEndpoint[] = _.get(groups, shared, []);
          group.push(a);
          groups[shared] = group;
          // Place only in one group (the longest - most specific)
          break; */
/**
 *
 * @param path route path
 * @param groups groups of endpoints
 * @returns the group the path belongs to, or undefined if not found
 */
function findGroupForPath(path, groups) {
    for (const [name, endpoints] of lodash_1.default.toPairs(groups)) {
        const paths = lodash_1.default.map(endpoints, 'path');
        // If the endpoint is part of a group
        if (lodash_1.default.includes(paths, path)) {
            // mark it
            return { endpoints, name };
        }
    }
    return undefined;
}
exports.findGroupForPath = findGroupForPath;
/**
 *
 * Heuristic to rename endpoint methods for REST-HOLE; based on last route part
 * update groups in place
 * @returns groups (updated)
 */
function nameEndpointsInRestHoleGroups(groups) {
    lodash_1.default.forEach(groups, (eps, groupPath) => lodash_1.default.forEach(eps, (ep) => {
        const uniqueParts = lodash_1.default.trim(ep.path.slice(groupPath.length), mapExpressApp_1.PATH_DELIMITER);
        // Ignore key/id URL parts
        const nameParts = lodash_1.default.trim(lodash_1.default.join(lodash_1.default.reject(uniqueParts.split(mapExpressApp_1.PATH_DELIMITER), (i) => i.startsWith(mapExpressApp_1.KEY_DELIMITER)), ' '));
        //
        if (nameParts.length > 0 && (ep === null || ep === void 0 ? void 0 : ep.methods.length) > 0) {
            ep.namedMethods[ep.methods[0]] = nameParts;
        }
    }));
    return groups;
}
exports.nameEndpointsInRestHoleGroups = nameEndpointsInRestHoleGroups;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdGhvbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW5zdHJ1bWVudC9hcHBNYXBwZXIvcmVzdGhvbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQXVCO0FBRXZCLDhEQUEyRTtBQUczRTs7Ozs7O0dBTUc7QUFDSCxTQUFTLGtCQUFrQixDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsU0FBUyxHQUFHLDhCQUFjO0lBQzFFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RCxlQUFlO0lBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNuQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0IsTUFBTTtTQUNQO1FBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM1QjtJQUNELG9IQUFvSDtJQUNwSCxvQ0FBb0M7SUFDcEMsTUFBTSxlQUFlLEdBQUcsZ0JBQUMsQ0FBQyxJQUFJLENBQzVCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyw2QkFBYSxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxV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