import { Logger } from 'winston';
import { IPermitConfig } from '../config';
import { IUser } from '../enforcement/interfaces';
import { Dict } from '../utils/dict';
export interface ITenant {
    key: string;
    name: string;
    description?: string;
}
interface IOperation<T = void> {
    run: () => Promise<T>;
}
export declare type IReadOperation<T = void> = IOperation<T>;
export declare type IWriteOperation<T = void> = IOperation<T>;
export declare class ReadOperation<T> implements IReadOperation<T> {
    private callback;
    constructor(callback: () => Promise<T>);
    run(): Promise<T>;
}
export declare class WriteOperation<T> implements IWriteOperation<T> {
    private callback;
    constructor(callback: () => Promise<T>);
    run(): Promise<T>;
}
/**
 * This interface contains *read actions* that goes outside
 * of your local network and queries permit.io cloud api.
 * You should be aware that these actions incur some cross-cloud latency.
 */
export interface IReadApis {
    getUser(userKey: string): ReadOperation<Dict>;
    getRole(roleKey: string): ReadOperation<Dict>;
    getTenant(tenantKey: string): ReadOperation<Dict>;
    getAssignedRoles(userKey: string, tenantKey?: string): ReadOperation<Dict>;
}
/**
 * This interface contains *write actions* (or mutations) that manipulate remote
 * state by calling the permit.io api. These api calls goes *outside* your local network.
 * You should be aware that these actions incur some cross-cloud latency.
 */
export interface IWriteApis {
    syncUser(user: IUser): WriteOperation<Dict>;
    deleteUser(userKey: string): WriteOperation<Dict>;
    createTenant(tenant: ITenant): WriteOperation<Dict>;
    updateTenant(tenant: ITenant): WriteOperation<Dict>;
    deleteTenant(tenantKey: string): WriteOperation<Dict>;
    assignRole(userKey: string, roleKey: string, tenantKey: string): WriteOperation<Dict>;
    unassignRole(userKey: string, roleKey: string, tenantKey: string): WriteOperation<Dict>;
}
export interface IPermitApi extends IReadApis, IWriteApis {
}
export interface IAPIClient {
    api: IPermitApi;
}
export declare class MutationsClient implements IReadApis, IWriteApis, IAPIClient {
    private config;
    private logger;
    private client;
    constructor(config: IPermitConfig, logger: Logger);
    getUser(userKey: string): ReadOperation<Dict>;
    getRole(roleKey: string): ReadOperation<Dict>;
    getTenant(tenantKey: string): ReadOperation<Dict>;
    getAssignedRoles(userKey: string, tenantKey?: string): ReadOperation<Dict>;
    syncUser(user: IUser): WriteOperation<Dict>;
    deleteUser(userKey: string): WriteOperation<Dict>;
    createTenant(tenant: ITenant): WriteOperation<Dict>;
    updateTenant(tenant: ITenant): WriteOperation<Dict>;
    deleteTenant(tenantKey: string): WriteOperation<Dict>;
    assignRole(userKey: string, roleKey: string, tenantKey: string): WriteOperation<Dict>;
    unassignRole(userKey: string, roleKey: string, tenantKey: string): WriteOperation<Dict>;
    read<T = void>(...operations: IReadOperation<T>[]): Promise<T[]>;
    write<T = void>(...operations: IWriteOperation<T>[]): Promise<T[]>;
    get api(): IPermitApi;
    getMethods(): IAPIClient;
}
export {};
