/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InviteCreate } from '../types';
import { InviteRead } from '../types';
import { MultiInviteResult } from '../types';
import { OrganizationCreate } from '../types';
import { OrganizationRead } from '../types';
import { OrganizationReadWithAPIKey } from '../types';
import { OrganizationUpdate } from '../types';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export declare const OrganizationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} inviteId Id of the invite to cancel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvite: (orgId: string, inviteId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: (organizationCreate: OrganizationCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: (orgId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveOrganization: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (orgId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {Array<InviteCreate>} inviteCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMembersToOrganization: (orgId: string, inviteCreate: Array<InviteCreate>, inviterName?: string, inviterEmail?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvites: (orgId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: (page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization: (orgId: string, organizationUpdate: OrganizationUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export declare const OrganizationsApiFp: (configuration?: Configuration) => {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} inviteId Id of the invite to cancel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvite(orgId: string, inviteId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(organizationCreate: OrganizationCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationReadWithAPIKey>>;
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveOrganization(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>>;
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {Array<InviteCreate>} inviteCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMembersToOrganization(orgId: string, inviteCreate: Array<InviteCreate>, inviterName?: string, inviterEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultiInviteResult>>;
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvites(orgId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InviteRead>>>;
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRead>>>;
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(orgId: string, organizationUpdate: OrganizationUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>>;
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
export declare const OrganizationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} inviteId Id of the invite to cancel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelInvite(orgId: string, inviteId: string, options?: any): AxiosPromise<void>;
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(organizationCreate: OrganizationCreate, options?: any): AxiosPromise<OrganizationReadWithAPIKey>;
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(orgId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveOrganization(options?: any): AxiosPromise<OrganizationRead>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(orgId: string, options?: any): AxiosPromise<OrganizationRead>;
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {Array<InviteCreate>} inviteCreate
     * @param {string} [inviterName]
     * @param {string} [inviterEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteMembersToOrganization(orgId: string, inviteCreate: Array<InviteCreate>, inviterName?: string, inviterEmail?: string, options?: any): AxiosPromise<MultiInviteResult>;
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvites(orgId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<InviteRead>>;
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(page?: number, perPage?: number, options?: any): AxiosPromise<Array<OrganizationRead>>;
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(orgId: string, organizationUpdate: OrganizationUpdate, options?: any): AxiosPromise<OrganizationRead>;
};
/**
 * Request parameters for cancelInvite operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCancelInviteRequest
 */
export interface OrganizationsApiCancelInviteRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiCancelInvite
     */
    readonly orgId: string;
    /**
     * Id of the invite to cancel
     * @type {string}
     * @memberof OrganizationsApiCancelInvite
     */
    readonly inviteId: string;
}
/**
 * Request parameters for createOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCreateOrganizationRequest
 */
export interface OrganizationsApiCreateOrganizationRequest {
    /**
     *
     * @type {OrganizationCreate}
     * @memberof OrganizationsApiCreateOrganization
     */
    readonly organizationCreate: OrganizationCreate;
}
/**
 * Request parameters for deleteOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationRequest
 */
export interface OrganizationsApiDeleteOrganizationRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiDeleteOrganization
     */
    readonly orgId: string;
}
/**
 * Request parameters for getOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationRequest
 */
export interface OrganizationsApiGetOrganizationRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiGetOrganization
     */
    readonly orgId: string;
}
/**
 * Request parameters for inviteMembersToOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiInviteMembersToOrganizationRequest
 */
export interface OrganizationsApiInviteMembersToOrganizationRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiInviteMembersToOrganization
     */
    readonly orgId: string;
    /**
     *
     * @type {Array<InviteCreate>}
     * @memberof OrganizationsApiInviteMembersToOrganization
     */
    readonly inviteCreate: Array<InviteCreate>;
    /**
     *
     * @type {string}
     * @memberof OrganizationsApiInviteMembersToOrganization
     */
    readonly inviterName?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationsApiInviteMembersToOrganization
     */
    readonly inviterEmail?: string;
}
/**
 * Request parameters for listOrganizationInvites operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListOrganizationInvitesRequest
 */
export interface OrganizationsApiListOrganizationInvitesRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiListOrganizationInvites
     */
    readonly orgId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof OrganizationsApiListOrganizationInvites
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof OrganizationsApiListOrganizationInvites
     */
    readonly perPage?: number;
}
/**
 * Request parameters for listOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListOrganizationsRequest
 */
export interface OrganizationsApiListOrganizationsRequest {
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof OrganizationsApiListOrganizations
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof OrganizationsApiListOrganizations
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiUpdateOrganizationRequest
 */
export interface OrganizationsApiUpdateOrganizationRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OrganizationsApiUpdateOrganization
     */
    readonly orgId: string;
    /**
     *
     * @type {OrganizationUpdate}
     * @memberof OrganizationsApiUpdateOrganization
     */
    readonly organizationUpdate: OrganizationUpdate;
}
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationsApi extends BaseAPI {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {OrganizationsApiCancelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    cancelInvite(requestParameters: OrganizationsApiCancelInviteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganization(requestParameters: OrganizationsApiCreateOrganizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationReadWithAPIKey, any>>;
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(requestParameters: OrganizationsApiDeleteOrganizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getActiveOrganization(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRead, any>>;
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRead, any>>;
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {OrganizationsApiInviteMembersToOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    inviteMembersToOrganization(requestParameters: OrganizationsApiInviteMembersToOrganizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MultiInviteResult, any>>;
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {OrganizationsApiListOrganizationInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationInvites(requestParameters: OrganizationsApiListOrganizationInvitesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InviteRead[], any>>;
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizations(requestParameters?: OrganizationsApiListOrganizationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRead[], any>>;
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganization(requestParameters: OrganizationsApiUpdateOrganizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRead, any>>;
}
