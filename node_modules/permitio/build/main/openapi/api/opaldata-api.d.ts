/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FullData } from '../types';
import { ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet } from '../types';
import { ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet } from '../types';
import { ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet } from '../types';
import { ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet } from '../types';
import { ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet } from '../types';
/**
 * OPALDataApi - axios parameter creator
 * @export
 */
export declare const OPALDataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllData: (orgId: string, projId: string, envId: string, internalUpdateCache?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForConditionSet: (orgId: string, projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForResource: (orgId: string, projId: string, envId: string, resourceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForRole: (orgId: string, projId: string, envId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForSetRule: (orgId: string, projId: string, envId: string, userSetId: string, resourceSetId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForTenant: (orgId: string, projId: string, envId: string, tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForUser: (orgId: string, projId: string, envId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OPALDataApi - functional programming interface
 * @export
 */
export declare const OPALDataApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllData(orgId: string, projId: string, envId: string, internalUpdateCache?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullData>>;
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForConditionSet(orgId: string, projId: string, envId: string, conditionSetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet>>;
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForResource(orgId: string, projId: string, envId: string, resourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet>>;
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForRole(orgId: string, projId: string, envId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet>>;
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForSetRule(orgId: string, projId: string, envId: string, userSetId: string, resourceSetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string[];
    }>>;
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForTenant(orgId: string, projId: string, envId: string, tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet>>;
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForUser(orgId: string, projId: string, envId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet>>;
};
/**
 * OPALDataApi - factory interface
 * @export
 */
export declare const OPALDataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get All Data
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {boolean} [internalUpdateCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllData(orgId: string, projId: string, envId: string, internalUpdateCache?: boolean, options?: any): AxiosPromise<FullData>;
    /**
     *
     * @summary Get Data For Condition Set
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} conditionSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForConditionSet(orgId: string, projId: string, envId: string, conditionSetId: string, options?: any): AxiosPromise<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet>;
    /**
     *
     * @summary Get Data For Resource
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForResource(orgId: string, projId: string, envId: string, resourceId: string, options?: any): AxiosPromise<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet>;
    /**
     *
     * @summary Get Data For Role
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForRole(orgId: string, projId: string, envId: string, roleId: string, options?: any): AxiosPromise<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet>;
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userSetId
     * @param {string} resourceSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForSetRule(orgId: string, projId: string, envId: string, userSetId: string, resourceSetId: string, options?: any): AxiosPromise<{
        [key: string]: string[];
    }>;
    /**
     *
     * @summary Get Data For Tenant
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForTenant(orgId: string, projId: string, envId: string, tenantId: string, options?: any): AxiosPromise<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet>;
    /**
     *
     * @summary Get Data For User
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataForUser(orgId: string, projId: string, envId: string, userId: string, options?: any): AxiosPromise<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet>;
};
/**
 * Request parameters for getAllData operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetAllDataRequest
 */
export interface OPALDataApiGetAllDataRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetAllData
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetAllData
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetAllData
     */
    readonly envId: string;
    /**
     *
     * @type {boolean}
     * @memberof OPALDataApiGetAllData
     */
    readonly internalUpdateCache?: boolean;
}
/**
 * Request parameters for getDataForConditionSet operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForConditionSetRequest
 */
export interface OPALDataApiGetDataForConditionSetRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForConditionSet
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForConditionSet
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForConditionSet
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForConditionSet
     */
    readonly conditionSetId: string;
}
/**
 * Request parameters for getDataForResource operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForResourceRequest
 */
export interface OPALDataApiGetDataForResourceRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForResource
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForResource
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForResource
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForResource
     */
    readonly resourceId: string;
}
/**
 * Request parameters for getDataForRole operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForRoleRequest
 */
export interface OPALDataApiGetDataForRoleRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForRole
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForRole
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForRole
     */
    readonly roleId: string;
}
/**
 * Request parameters for getDataForSetRule operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForSetRuleRequest
 */
export interface OPALDataApiGetDataForSetRuleRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForSetRule
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForSetRule
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForSetRule
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForSetRule
     */
    readonly userSetId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForSetRule
     */
    readonly resourceSetId: string;
}
/**
 * Request parameters for getDataForTenant operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForTenantRequest
 */
export interface OPALDataApiGetDataForTenantRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForTenant
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForTenant
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForTenant
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForTenant
     */
    readonly tenantId: string;
}
/**
 * Request parameters for getDataForUser operation in OPALDataApi.
 * @export
 * @interface OPALDataApiGetDataForUserRequest
 */
export interface OPALDataApiGetDataForUserRequest {
    /**
     * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForUser
     */
    readonly orgId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof OPALDataApiGetDataForUser
     */
    readonly envId: string;
    /**
     *
     * @type {string}
     * @memberof OPALDataApiGetDataForUser
     */
    readonly userId: string;
}
/**
 * OPALDataApi - object-oriented interface
 * @export
 * @class OPALDataApi
 * @extends {BaseAPI}
 */
export declare class OPALDataApi extends BaseAPI {
    /**
     *
     * @summary Get All Data
     * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getAllData(requestParameters: OPALDataApiGetAllDataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FullData, any>>;
    /**
     *
     * @summary Get Data For Condition Set
     * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForConditionSet(requestParameters: OPALDataApiGetDataForConditionSetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseGetDataForConditionSetV2InternalOpalDataOrgIdProjIdEnvIdConditionSetsConditionSetIdGet, any>>;
    /**
     *
     * @summary Get Data For Resource
     * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForResource(requestParameters: OPALDataApiGetDataForResourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseGetDataForResourceV2InternalOpalDataOrgIdProjIdEnvIdResourceTypesResourceIdGet, any>>;
    /**
     *
     * @summary Get Data For Role
     * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForRole(requestParameters: OPALDataApiGetDataForRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseGetDataForRoleV2InternalOpalDataOrgIdProjIdEnvIdRolesRoleIdGet, any>>;
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForSetRule(requestParameters: OPALDataApiGetDataForSetRuleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: string[];
    }, any>>;
    /**
     *
     * @summary Get Data For Tenant
     * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForTenant(requestParameters: OPALDataApiGetDataForTenantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseGetDataForTenantV2InternalOpalDataOrgIdProjIdEnvIdTenantsTenantIdGet, any>>;
    /**
     *
     * @summary Get Data For User
     * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForUser(requestParameters: OPALDataApiGetDataForUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseGetDataForUserV2InternalOpalDataOrgIdProjIdEnvIdUsersUserIdGet, any>>;
}
