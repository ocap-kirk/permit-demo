"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityLogApi = exports.ActivityLogApiFactory = exports.ActivityLogApiFp = exports.ActivityLogApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ActivityLogApi - axios parameter creator
 * @export
 */
const ActivityLogApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityEvents: async (actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options = {}) => {
            const localVarPath = `/v2/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (actorId) {
                localVarQueryParameter['actor_id'] = actorId;
            }
            if (actorDisplayName !== undefined) {
                localVarQueryParameter['actor_display_name'] = actorDisplayName;
            }
            if (actorType) {
                localVarQueryParameter['actor_type'] = actorType;
            }
            if (projectId) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (envId) {
                localVarQueryParameter['env_id'] = envId;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampUntil !== undefined) {
                localVarQueryParameter['timestamp_until'] = timestampUntil;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityTypes: async (options = {}) => {
            const localVarPath = `/v2/activity/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ActivityLogApiAxiosParamCreator = ActivityLogApiAxiosParamCreator;
/**
 * ActivityLogApi - functional programming interface
 * @export
 */
const ActivityLogApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ActivityLogApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivityTypes(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivityTypes(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ActivityLogApiFp = ActivityLogApiFp;
/**
 * ActivityLogApi - factory interface
 * @export
 */
const ActivityLogApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ActivityLogApiFp)(configuration);
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            return localVarFp
                .listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityTypes(options) {
            return localVarFp.listActivityTypes(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ActivityLogApiFactory = ActivityLogApiFactory;
/**
 * ActivityLogApi - object-oriented interface
 * @export
 * @class ActivityLogApi
 * @extends {BaseAPI}
 */
class ActivityLogApi extends base_1.BaseAPI {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {ActivityLogApiListActivityEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityEvents(requestParameters = {}, options) {
        return (0, exports.ActivityLogApiFp)(this.configuration)
            .listActivityEvents(requestParameters.actorId, requestParameters.actorDisplayName, requestParameters.actorType, requestParameters.projectId, requestParameters.envId, requestParameters.timestampFrom, requestParameters.timestampUntil, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityTypes(options) {
        return (0, exports.ActivityLogApiFp)(this.configuration)
            .listActivityTypes(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ActivityLogApi = ActivityLogApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHktbG9nLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9hY3Rpdml0eS1sb2ctYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBSzdGOzs7R0FHRztBQUNJLE1BQU0sK0JBQStCLEdBQUcsVUFBVSxhQUE2QjtJQUNwRixPQUFPO1FBQ0w7Ozs7Ozs7Ozs7Ozs7O1dBY0c7UUFDSCxrQkFBa0IsRUFBRSxLQUFLLEVBQ3ZCLE9BQXVCLEVBQ3ZCLGdCQUF5QixFQUN6QixTQUF5QixFQUN6QixTQUF5QixFQUN6QixLQUFxQixFQUNyQixhQUFzQixFQUN0QixjQUF1QixFQUN2QixJQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO1lBQ3BDLG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxLQUFLLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQzdFLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSxJQUFBLDhCQUFxQixFQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FB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