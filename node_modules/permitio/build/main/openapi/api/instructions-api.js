"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstructionsApi = exports.InstructionsApiFactory = exports.InstructionsApiFp = exports.InstructionsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * InstructionsApi - axios parameter creator
 * @export
 */
const InstructionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguageInstructions: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listLanguageInstructions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listLanguageInstructions', 'envId', envId);
            const localVarPath = `/v2/{proj_id}/{env_id}/get_instructions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.InstructionsApiAxiosParamCreator = InstructionsApiAxiosParamCreator;
/**
 * InstructionsApi - functional programming interface
 * @export
 */
const InstructionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.InstructionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLanguageInstructions(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLanguageInstructions(projId, envId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.InstructionsApiFp = InstructionsApiFp;
/**
 * InstructionsApi - factory interface
 * @export
 */
const InstructionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.InstructionsApiFp)(configuration);
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguageInstructions(projId, envId, options) {
            return localVarFp
                .listLanguageInstructions(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.InstructionsApiFactory = InstructionsApiFactory;
/**
 * InstructionsApi - object-oriented interface
 * @export
 * @class InstructionsApi
 * @extends {BaseAPI}
 */
class InstructionsApi extends base_1.BaseAPI {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {InstructionsApiListLanguageInstructionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstructionsApi
     */
    listLanguageInstructions(requestParameters, options) {
        return (0, exports.InstructionsApiFp)(this.configuration)
            .listLanguageInstructions(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.InstructionsApi = InstructionsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9pbnN0cnVjdGlvbnMtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBSzdGOzs7R0FHRztBQUNJLE1BQU0sZ0NBQWdDLEdBQUcsVUFBVSxhQUE2QjtJQUNyRixPQUFPO1FBQ0w7Ozs7Ozs7V0FPRztRQUNILHdCQUF3QixFQUFFLEtBQUssRUFDN0IsTUFBYyxFQUNkLEtBQWEsRUFDYixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsSUFBQSwwQkFBaUIsRUFBQywwQkFBMEIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDaEUsNkRBQTZEO1lBQzdELElBQUEsMEJBQWlCLEVBQUMsMEJBQTBCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzlELE1BQU0sWUFBWSxHQUFHLHlDQUF5QztpQkFDM0QsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzdELE9BQU8sQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0Qsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FB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