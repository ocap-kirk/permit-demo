/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ProjectCreate } from '../types';
import { ProjectRead } from '../types';
import { ProjectUpdate } from '../types';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new project under the active organization.
     * @summary Create Project
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: (projectCreate: ProjectCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the project and all its related data.
     * @summary Delete Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: (projId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single project matching the given proj_id, if such project exists.
     * @summary Get Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: (projId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the projects under the active organization.
     * @summary List Projects
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects: (page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the project.
     * @summary Update Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {ProjectUpdate} projectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject: (projId: string, projectUpdate: ProjectUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new project under the active organization.
     * @summary Create Project
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(projectCreate: ProjectCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>>;
    /**
     * Deletes the project and all its related data.
     * @summary Delete Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a single project matching the given proj_id, if such project exists.
     * @summary Get Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>>;
    /**
     * Lists all the projects under the active organization.
     * @summary List Projects
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectRead>>>;
    /**
     * Updates the project.
     * @summary Update Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {ProjectUpdate} projectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(projId: string, projectUpdate: ProjectUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new project under the active organization.
     * @summary Create Project
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(projectCreate: ProjectCreate, options?: any): AxiosPromise<ProjectRead>;
    /**
     * Deletes the project and all its related data.
     * @summary Delete Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(projId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single project matching the given proj_id, if such project exists.
     * @summary Get Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(projId: string, options?: any): AxiosPromise<ProjectRead>;
    /**
     * Lists all the projects under the active organization.
     * @summary List Projects
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(page?: number, perPage?: number, options?: any): AxiosPromise<Array<ProjectRead>>;
    /**
     * Updates the project.
     * @summary Update Project
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {ProjectUpdate} projectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProject(projId: string, projectUpdate: ProjectUpdate, options?: any): AxiosPromise<ProjectRead>;
};
/**
 * Request parameters for createProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectRequest
 */
export interface ProjectsApiCreateProjectRequest {
    /**
     *
     * @type {ProjectCreate}
     * @memberof ProjectsApiCreateProject
     */
    readonly projectCreate: ProjectCreate;
}
/**
 * Request parameters for deleteProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiDeleteProjectRequest
 */
export interface ProjectsApiDeleteProjectRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProjectsApiDeleteProject
     */
    readonly projId: string;
}
/**
 * Request parameters for getProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRequest
 */
export interface ProjectsApiGetProjectRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly projId: string;
}
/**
 * Request parameters for listProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiListProjectsRequest
 */
export interface ProjectsApiListProjectsRequest {
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ProjectsApiListProjects
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ProjectsApiListProjects
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiUpdateProjectRequest
 */
export interface ProjectsApiUpdateProjectRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProjectsApiUpdateProject
     */
    readonly projId: string;
    /**
     *
     * @type {ProjectUpdate}
     * @memberof ProjectsApiUpdateProject
     */
    readonly projectUpdate: ProjectUpdate;
}
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     * Creates a new project under the active organization.
     * @summary Create Project
     * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectRead, any>>;
    /**
     * Deletes the project and all its related data.
     * @summary Delete Project
     * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(requestParameters: ProjectsApiDeleteProjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a single project matching the given proj_id, if such project exists.
     * @summary Get Project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(requestParameters: ProjectsApiGetProjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectRead, any>>;
    /**
     * Lists all the projects under the active organization.
     * @summary List Projects
     * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjects(requestParameters?: ProjectsApiListProjectsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectRead[], any>>;
    /**
     * Updates the project.
     * @summary Update Project
     * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    updateProject(requestParameters: ProjectsApiUpdateProjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectRead, any>>;
}
