"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyDecisionPointsApi = exports.PolicyDecisionPointsApiFactory = exports.PolicyDecisionPointsApiFp = exports.PolicyDecisionPointsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PolicyDecisionPointsApi - axios parameter creator
 * @export
 */
const PolicyDecisionPointsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration and push state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatingPdpConfigValues: async (pDPStateUpdate, options = {}) => {
            // verify required parameter 'pDPStateUpdate' is not null or undefined
            (0, common_1.assertParamExists)('getAuthenticatingPdpConfigValues', 'pDPStateUpdate', pDPStateUpdate);
            const localVarPath = `/v2/pdps/me/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pDPStateUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatingPdpConfigValuesLegacy: async (options = {}) => {
            const localVarPath = `/v2/pdps/me/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get PDP configuration
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdpConfigValues: async (projId, envId, pdpId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getPdpConfigValues', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getPdpConfigValues', 'envId', envId);
            // verify required parameter 'pdpId' is not null or undefined
            (0, common_1.assertParamExists)('getPdpConfigValues', 'pdpId', pdpId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List PDP configurations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpConfigs: async (projId, envId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listPdpConfigs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listPdpConfigs', 'envId', envId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Accept a PDP data callback
         * @param {string} xPermitInstanceId
         * @param {DataUpdateReport} dataUpdateReport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        opalDataCallback: async (xPermitInstanceId, dataUpdateReport, options = {}) => {
            // verify required parameter 'xPermitInstanceId' is not null or undefined
            (0, common_1.assertParamExists)('opalDataCallback', 'xPermitInstanceId', xPermitInstanceId);
            // verify required parameter 'dataUpdateReport' is not null or undefined
            (0, common_1.assertParamExists)('opalDataCallback', 'dataUpdateReport', dataUpdateReport);
            const localVarPath = `/v2/pdps/me/opal_data_callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xPermitInstanceId != null) {
                localVarHeaderParameter['x-permit-instance-id'] = String(xPermitInstanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dataUpdateReport, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push a PDP state update.
         * @summary Push PDP state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushPdpState: async (pDPStateUpdate, options = {}) => {
            // verify required parameter 'pDPStateUpdate' is not null or undefined
            (0, common_1.assertParamExists)('pushPdpState', 'pDPStateUpdate', pDPStateUpdate);
            const localVarPath = `/v2/pdps/me/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(pDPStateUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
         * @summary Rotate PDP API Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotatePdpApiKey: async (projId, envId, pdpId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('rotatePdpApiKey', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('rotatePdpApiKey', 'envId', envId);
            // verify required parameter 'pdpId' is not null or undefined
            (0, common_1.assertParamExists)('rotatePdpApiKey', 'pdpId', pdpId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PolicyDecisionPointsApiAxiosParamCreator = PolicyDecisionPointsApiAxiosParamCreator;
/**
 * PolicyDecisionPointsApi - functional programming interface
 * @export
 */
const PolicyDecisionPointsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PolicyDecisionPointsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration and push state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatingPdpConfigValues(pDPStateUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatingPdpConfigValues(pDPStateUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatingPdpConfigValuesLegacy(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatingPdpConfigValuesLegacy(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get PDP configuration
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdpConfigValues(projId, envId, pdpId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdpConfigValues(projId, envId, pdpId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary List PDP configurations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdpConfigs(projId, envId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpConfigs(projId, envId, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Accept a PDP data callback
         * @param {string} xPermitInstanceId
         * @param {DataUpdateReport} dataUpdateReport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async opalDataCallback(xPermitInstanceId, dataUpdateReport, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.opalDataCallback(xPermitInstanceId, dataUpdateReport, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Push a PDP state update.
         * @summary Push PDP state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushPdpState(pDPStateUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushPdpState(pDPStateUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
         * @summary Rotate PDP API Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rotatePdpApiKey(projId, envId, pdpId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rotatePdpApiKey(projId, envId, pdpId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.PolicyDecisionPointsApiFp = PolicyDecisionPointsApiFp;
/**
 * PolicyDecisionPointsApi - factory interface
 * @export
 */
const PolicyDecisionPointsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PolicyDecisionPointsApiFp)(configuration);
    return {
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration and push state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatingPdpConfigValues(pDPStateUpdate, options) {
            return localVarFp
                .getAuthenticatingPdpConfigValues(pDPStateUpdate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get connected PDP configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatingPdpConfigValuesLegacy(options) {
            return localVarFp
                .getAuthenticatingPdpConfigValuesLegacy(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
         * @summary Get PDP configuration
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdpConfigValues(projId, envId, pdpId, options) {
            return localVarFp
                .getPdpConfigValues(projId, envId, pdpId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List PDP configurations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpConfigs(projId, envId, page, perPage, options) {
            return localVarFp
                .listPdpConfigs(projId, envId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Accept a PDP data callback
         * @param {string} xPermitInstanceId
         * @param {DataUpdateReport} dataUpdateReport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        opalDataCallback(xPermitInstanceId, dataUpdateReport, options) {
            return localVarFp
                .opalDataCallback(xPermitInstanceId, dataUpdateReport, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Push a PDP state update.
         * @summary Push PDP state
         * @param {PDPStateUpdate} pDPStateUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushPdpState(pDPStateUpdate, options) {
            return localVarFp
                .pushPdpState(pDPStateUpdate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
         * @summary Rotate PDP API Key
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotatePdpApiKey(projId, envId, pdpId, options) {
            return localVarFp
                .rotatePdpApiKey(projId, envId, pdpId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.PolicyDecisionPointsApiFactory = PolicyDecisionPointsApiFactory;
/**
 * PolicyDecisionPointsApi - object-oriented interface
 * @export
 * @class PolicyDecisionPointsApi
 * @extends {BaseAPI}
 */
class PolicyDecisionPointsApi extends base_1.BaseAPI {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getAuthenticatingPdpConfigValues(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .getAuthenticatingPdpConfigValues(requestParameters.pDPStateUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getAuthenticatingPdpConfigValuesLegacy(options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .getAuthenticatingPdpConfigValuesLegacy(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {PolicyDecisionPointsApiGetPdpConfigValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getPdpConfigValues(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .getPdpConfigValues(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List PDP configurations
     * @param {PolicyDecisionPointsApiListPdpConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    listPdpConfigs(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .listPdpConfigs(requestParameters.projId, requestParameters.envId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Accept a PDP data callback
     * @param {PolicyDecisionPointsApiOpalDataCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    opalDataCallback(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .opalDataCallback(requestParameters.xPermitInstanceId, requestParameters.dataUpdateReport, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PolicyDecisionPointsApiPushPdpStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    pushPdpState(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .pushPdpState(requestParameters.pDPStateUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {PolicyDecisionPointsApiRotatePdpApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    rotatePdpApiKey(requestParameters, options) {
        return (0, exports.PolicyDecisionPointsApiFp)(this.configuration)
            .rotatePdpApiKey(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PolicyDecisionPointsApi = PolicyDecisionPointsApi;
//# sourceMappingURL=data:application/json;base64,