/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PaginatedResultActivityLogEventRead } from '../types';
/**
 * ActivityLogApi - axios parameter creator
 * @export
 */
export declare const ActivityLogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityEvents: (actorId?: Array<string>, actorDisplayName?: string, actorType?: Array<string>, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityTypes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActivityLogApi - functional programming interface
 * @export
 */
export declare const ActivityLogApiFp: (configuration?: Configuration) => {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityEvents(actorId?: Array<string>, actorDisplayName?: string, actorType?: Array<string>, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultActivityLogEventRead>>;
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * ActivityLogApi - factory interface
 * @export
 */
export declare const ActivityLogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityEvents(actorId?: Array<string>, actorDisplayName?: string, actorType?: Array<string>, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedResultActivityLogEventRead>;
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActivityTypes(options?: any): AxiosPromise<any>;
};
/**
 * Request parameters for listActivityEvents operation in ActivityLogApi.
 * @export
 * @interface ActivityLogApiListActivityEventsRequest
 */
export interface ActivityLogApiListActivityEventsRequest {
    /**
     * Actor ID to search
     * @type {Array<string>}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly actorId?: Array<string>;
    /**
     * Actor display name to search
     * @type {string}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly actorDisplayName?: string;
    /**
     * Actor type to search (member, user, api_key)
     * @type {Array<string>}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly actorType?: Array<string>;
    /**
     * Projects to include in search
     * @type {Array<string>}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly projectId?: Array<string>;
    /**
     * Environments to include in search
     * @type {Array<string>}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly envId?: Array<string>;
    /**
     * Retrieve only events after this timestamp (seconds since epoch)
     * @type {number}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly timestampFrom?: number;
    /**
     * Retrieve only events before this timestamp (seconds since epoch)
     * @type {number}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly timestampUntil?: number;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ActivityLogApiListActivityEvents
     */
    readonly perPage?: number;
}
/**
 * ActivityLogApi - object-oriented interface
 * @export
 * @class ActivityLogApi
 * @extends {BaseAPI}
 */
export declare class ActivityLogApi extends BaseAPI {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {ActivityLogApiListActivityEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityEvents(requestParameters?: ActivityLogApiListActivityEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultActivityLogEventRead>>;
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityTypes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
}
