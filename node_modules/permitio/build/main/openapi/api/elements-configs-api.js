"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementsConfigsApi = exports.ElementsConfigsApiFactory = exports.ElementsConfigsApiFp = exports.ElementsConfigsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ElementsConfigsApi - axios parameter creator
 * @export
 */
const ElementsConfigsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new elements_config under the active organization.
         * @summary Create Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigCreate} elementsConfigCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createElementsConfig: async (projId, envId, elementsConfigCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('createElementsConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('createElementsConfig', 'envId', envId);
            // verify required parameter 'elementsConfigCreate' is not null or undefined
            (0, common_1.assertParamExists)('createElementsConfig', 'elementsConfigCreate', elementsConfigCreate);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsConfigCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the elements_config and all its related data.
         * @summary Delete Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElementsConfig: async (elementsConfigId, projId, envId, options = {}) => {
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('deleteElementsConfig', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('deleteElementsConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('deleteElementsConfig', 'envId', envId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/{elements_config_id}`
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsConfig: async (projId, envId, elementsConfigId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfig', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfig', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config Runtime
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsConfigRuntime: async (projId, envId, elementsConfigId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfigRuntime', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfigRuntime', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsConfigRuntime', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Elements Type Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsTypeConfig: async (projId, envId, elementType, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsTypeConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getElementsTypeConfig', 'envId', envId);
            // verify required parameter 'elementType' is not null or undefined
            (0, common_1.assertParamExists)('getElementsTypeConfig', 'elementType', elementType);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the elements_configs under the active organization.
         * @summary List Elements Configs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listElementsConfigs: async (projId, envId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listElementsConfigs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listElementsConfigs', 'envId', envId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the elements_config.
         * @summary Update Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigUpdate} elementsConfigUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElementsConfig: async (elementsConfigId, projId, envId, elementsConfigUpdate, options = {}) => {
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsConfig', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsConfig', 'envId', envId);
            // verify required parameter 'elementsConfigUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsConfig', 'elementsConfigUpdate', elementsConfigUpdate);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}`
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsConfigUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Elements Type Permissions
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElementsTypePermissions: async (elementType, projId, envId, elementsEnvTypeUpdate, options = {}) => {
            // verify required parameter 'elementType' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsTypePermissions', 'elementType', elementType);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsTypePermissions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsTypePermissions', 'envId', envId);
            // verify required parameter 'elementsEnvTypeUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateElementsTypePermissions', 'elementsEnvTypeUpdate', elementsEnvTypeUpdate);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/{element_type}`
                .replace(`{${'element_type'}}`, encodeURIComponent(String(elementType)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsEnvTypeUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ElementsConfigsApiAxiosParamCreator = ElementsConfigsApiAxiosParamCreator;
/**
 * ElementsConfigsApi - functional programming interface
 * @export
 */
const ElementsConfigsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ElementsConfigsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new elements_config under the active organization.
         * @summary Create Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigCreate} elementsConfigCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createElementsConfig(projId, envId, elementsConfigCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createElementsConfig(projId, envId, elementsConfigCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes the elements_config and all its related data.
         * @summary Delete Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteElementsConfig(elementsConfigId, projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteElementsConfig(elementsConfigId, projId, envId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementsConfig(projId, envId, elementsConfigId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfig(projId, envId, elementsConfigId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config Runtime
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementsConfigRuntime(projId, envId, elementsConfigId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsConfigRuntime(projId, envId, elementsConfigId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Elements Type Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementsTypeConfig(projId, envId, elementType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getElementsTypeConfig(projId, envId, elementType, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the elements_configs under the active organization.
         * @summary List Elements Configs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listElementsConfigs(projId, envId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listElementsConfigs(projId, envId, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the elements_config.
         * @summary Update Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigUpdate} elementsConfigUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Elements Type Permissions
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ElementsConfigsApiFp = ElementsConfigsApiFp;
/**
 * ElementsConfigsApi - factory interface
 * @export
 */
const ElementsConfigsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ElementsConfigsApiFp)(configuration);
    return {
        /**
         * Creates a new elements_config under the active organization.
         * @summary Create Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigCreate} elementsConfigCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createElementsConfig(projId, envId, elementsConfigCreate, options) {
            return localVarFp
                .createElementsConfig(projId, envId, elementsConfigCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the elements_config and all its related data.
         * @summary Delete Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteElementsConfig(elementsConfigId, projId, envId, options) {
            return localVarFp
                .deleteElementsConfig(elementsConfigId, projId, envId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsConfig(projId, envId, elementsConfigId, options) {
            return localVarFp
                .getElementsConfig(projId, envId, elementsConfigId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
         * @summary Get Elements Config Runtime
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsConfigRuntime(projId, envId, elementsConfigId, options) {
            return localVarFp
                .getElementsConfigRuntime(projId, envId, elementsConfigId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Elements Type Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementsTypeConfig(projId, envId, elementType, options) {
            return localVarFp
                .getElementsTypeConfig(projId, envId, elementType, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the elements_configs under the active organization.
         * @summary List Elements Configs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listElementsConfigs(projId, envId, page, perPage, options) {
            return localVarFp
                .listElementsConfigs(projId, envId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the elements_config.
         * @summary Update Elements Config
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsConfigUpdate} elementsConfigUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options) {
            return localVarFp
                .updateElementsConfig(elementsConfigId, projId, envId, elementsConfigUpdate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Elements Type Permissions
         * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options) {
            return localVarFp
                .updateElementsTypePermissions(elementType, projId, envId, elementsEnvTypeUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ElementsConfigsApiFactory = ElementsConfigsApiFactory;
/**
 * ElementsConfigsApi - object-oriented interface
 * @export
 * @class ElementsConfigsApi
 * @extends {BaseAPI}
 */
class ElementsConfigsApi extends base_1.BaseAPI {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    createElementsConfig(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .createElementsConfig(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    deleteElementsConfig(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .deleteElementsConfig(requestParameters.elementsConfigId, requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsConfig(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .getElementsConfig(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsConfigRuntime(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .getElementsConfigRuntime(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Elements Type Config
     * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsTypeConfig(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .getElementsTypeConfig(requestParameters.projId, requestParameters.envId, requestParameters.elementType, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    listElementsConfigs(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .listElementsConfigs(requestParameters.projId, requestParameters.envId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    updateElementsConfig(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .updateElementsConfig(requestParameters.elementsConfigId, requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    updateElementsTypePermissions(requestParameters, options) {
        return (0, exports.ElementsConfigsApiFp)(this.configuration)
            .updateElementsTypePermissions(requestParameters.elementType, requestParameters.projId, requestParameters.envId, requestParameters.elementsEnvTypeUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ElementsConfigsApi = ElementsConfigsApi;
//# sourceMappingURL=data:application/json;base64,