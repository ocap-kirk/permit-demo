"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditElementsDataApi = exports.AuditElementsDataApiFactory = exports.AuditElementsDataApiFp = exports.AuditElementsDataApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuditElementsDataApi - axios parameter creator
 * @export
 */
const AuditElementsDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListAuditLogs: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListAuditLogs', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListAuditLogs', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuditElementsDataApiAxiosParamCreator = AuditElementsDataApiAxiosParamCreator;
/**
 * AuditElementsDataApi - functional programming interface
 * @export
 */
const AuditElementsDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuditElementsDataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.AuditElementsDataApiFp = AuditElementsDataApiFp;
/**
 * AuditElementsDataApi - factory interface
 * @export
 */
const AuditElementsDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuditElementsDataApiFp)(configuration);
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options) {
            return localVarFp
                .elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.AuditElementsDataApiFactory = AuditElementsDataApiFactory;
/**
 * AuditElementsDataApi - object-oriented interface
 * @export
 * @class AuditElementsDataApi
 * @extends {BaseAPI}
 */
class AuditElementsDataApi extends base_1.BaseAPI {
    /**
     * Lists audit logs for for specific elements config (tenant scope)
     * @summary List audit logs
     * @param {AuditElementsDataApiElementsListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditElementsDataApi
     */
    elementsListAuditLogs(requestParameters, options) {
        return (0, exports.AuditElementsDataApiFp)(this.configuration)
            .elementsListAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AuditElementsDataApi = AuditElementsDataApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXQtZWxlbWVudHMtZGF0YS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvYXVkaXQtZWxlbWVudHMtZGF0YS1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRzs7Ozs7O0FBRUgsa0RBQXFGO0FBRXJGLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2Isc0NBV21CO0FBQ25CLGFBQWE7QUFDYixrQ0FBNkY7QUFLN0Y7OztHQUdHO0FBQ0ksTUFBTSxxQ0FBcUMsR0FBRyxVQUFVLGFBQTZCO0lBQzFGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7V0FXRztRQUNILHFCQUFxQixFQUFFLEtBQUssRUFDMUIsTUFBYyxFQUNkLEtBQWEsRUFDYixnQkFBd0IsRUFDeEIsTUFBZSxFQUNmLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsSUFBQSwwQkFBaUIsRUFBQyx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0QsNkRBQTZEO1lBQzdELElBQUEsMEJBQWlCLEVBQUMsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNELHdFQUF3RTtZQUN4RSxJQUFBLDBCQUFpQixFQUFDLHVCQUF1QixFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDakYsTUFBTSxZQUFZLEdBQ2hCLDZFQUE2RTtpQkFDMUUsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzdELE9BQU8sQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUMzRCxPQUFPLENBQUMsSUFB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