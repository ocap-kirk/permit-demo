/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PaginatedResultUserRead } from '../types';
import { RoleAssignmentRead } from '../types';
import { UserCreate } from '../types';
import { UserRead } from '../types';
import { UserRoleCreate } from '../types';
import { UserRoleRemove } from '../types';
import { UserUpdate } from '../types';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role To User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRoleToUser: (projId: string, envId: string, userId: string, userRoleCreate: UserRoleCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (projId: string, envId: string, userCreate: UserCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the user and all its related data.
     * @summary Delete User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (projId: string, envId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a user, if such user exists. Otherwise returns 404.
     * @summary Get User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (projId: string, envId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the users defined within an environment.
     * @summary List Users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {string} [role] Match users with a specific role
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (projId: string, envId: string, search?: string, role?: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Replace User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceUser: (projId: string, envId: string, userId: string, userCreate: UserCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role From User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleRemove} userRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignRoleFromUser: (projId: string, envId: string, userId: string, userRoleRemove: UserRoleRemove, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates the user definition. Fields that will be provided will be completely overwritten.
     * @summary Update User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (projId: string, envId: string, userId: string, userUpdate: UserUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role To User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRoleToUser(projId: string, envId: string, userId: string, userRoleCreate: UserRoleCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentRead>>;
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(projId: string, envId: string, userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>>;
    /**
     * Deletes the user and all its related data.
     * @summary Delete User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(projId: string, envId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a user, if such user exists. Otherwise returns 404.
     * @summary Get User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(projId: string, envId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>>;
    /**
     * Lists all the users defined within an environment.
     * @summary List Users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {string} [role] Match users with a specific role
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(projId: string, envId: string, search?: string, role?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultUserRead>>;
    /**
     *
     * @summary Replace User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceUser(projId: string, envId: string, userId: string, userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>>;
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role From User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleRemove} userRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignRoleFromUser(projId: string, envId: string, userId: string, userRoleRemove: UserRoleRemove, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Partially updates the user definition. Fields that will be provided will be completely overwritten.
     * @summary Update User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(projId: string, envId: string, userId: string, userUpdate: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role To User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleCreate} userRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignRoleToUser(projId: string, envId: string, userId: string, userRoleCreate: UserRoleCreate, options?: any): AxiosPromise<RoleAssignmentRead>;
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(projId: string, envId: string, userCreate: UserCreate, options?: any): AxiosPromise<UserRead>;
    /**
     * Deletes the user and all its related data.
     * @summary Delete User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a user, if such user exists. Otherwise returns 404.
     * @summary Get User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(projId: string, envId: string, userId: string, options?: any): AxiosPromise<UserRead>;
    /**
     * Lists all the users defined within an environment.
     * @summary List Users
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} [search] Text search for the email field
     * @param {string} [role] Match users with a specific role
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(projId: string, envId: string, search?: string, role?: string, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedResultUserRead>;
    /**
     *
     * @summary Replace User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceUser(projId: string, envId: string, userId: string, userCreate: UserCreate, options?: any): AxiosPromise<UserRead>;
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role From User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserRoleRemove} userRoleRemove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignRoleFromUser(projId: string, envId: string, userId: string, userRoleRemove: UserRoleRemove, options?: any): AxiosPromise<void>;
    /**
     * Partially updates the user definition. Fields that will be provided will be completely overwritten.
     * @summary Update User
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(projId: string, envId: string, userId: string, userUpdate: UserUpdate, options?: any): AxiosPromise<UserRead>;
};
/**
 * Request parameters for assignRoleToUser operation in UsersApi.
 * @export
 * @interface UsersApiAssignRoleToUserRequest
 */
export interface UsersApiAssignRoleToUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiAssignRoleToUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiAssignRoleToUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiAssignRoleToUser
     */
    readonly userId: string;
    /**
     *
     * @type {UserRoleCreate}
     * @memberof UsersApiAssignRoleToUser
     */
    readonly userRoleCreate: UserRoleCreate;
}
/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiCreateUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiCreateUser
     */
    readonly envId: string;
    /**
     *
     * @type {UserCreate}
     * @memberof UsersApiCreateUser
     */
    readonly userCreate: UserCreate;
}
/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly userId: string;
}
/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly userId: string;
}
/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly envId: string;
    /**
     * Text search for the email field
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly search?: string;
    /**
     * Match users with a specific role
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly role?: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly perPage?: number;
}
/**
 * Request parameters for replaceUser operation in UsersApi.
 * @export
 * @interface UsersApiReplaceUserRequest
 */
export interface UsersApiReplaceUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiReplaceUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiReplaceUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiReplaceUser
     */
    readonly userId: string;
    /**
     *
     * @type {UserCreate}
     * @memberof UsersApiReplaceUser
     */
    readonly userCreate: UserCreate;
}
/**
 * Request parameters for unassignRoleFromUser operation in UsersApi.
 * @export
 * @interface UsersApiUnassignRoleFromUserRequest
 */
export interface UsersApiUnassignRoleFromUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUnassignRoleFromUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUnassignRoleFromUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUnassignRoleFromUser
     */
    readonly userId: string;
    /**
     *
     * @type {UserRoleRemove}
     * @memberof UsersApiUnassignRoleFromUser
     */
    readonly userRoleRemove: UserRoleRemove;
}
/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly envId: string;
    /**
     * Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly userId: string;
    /**
     *
     * @type {UserUpdate}
     * @memberof UsersApiUpdateUser
     */
    readonly userUpdate: UserUpdate;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role To User
     * @param {UsersApiAssignRoleToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    assignRoleToUser(requestParameters: UsersApiAssignRoleToUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleAssignmentRead, any>>;
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create User
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRead, any>>;
    /**
     * Deletes the user and all its related data.
     * @summary Delete User
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a user, if such user exists. Otherwise returns 404.
     * @summary Get User
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRead, any>>;
    /**
     * Lists all the users defined within an environment.
     * @summary List Users
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultUserRead, any>>;
    /**
     *
     * @summary Replace User
     * @param {UsersApiReplaceUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    replaceUser(requestParameters: UsersApiReplaceUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRead, any>>;
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role From User
     * @param {UsersApiUnassignRoleFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    unassignRoleFromUser(requestParameters: UsersApiUnassignRoleFromUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Partially updates the user definition. Fields that will be provided will be completely overwritten.
     * @summary Update User
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRead, any>>;
}
