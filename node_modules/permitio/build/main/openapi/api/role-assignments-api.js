"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAssignmentsApi = exports.RoleAssignmentsApiFactory = exports.RoleAssignmentsApiFp = exports.RoleAssignmentsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
const RoleAssignmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole: async (projId, envId, roleAssignmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('assignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('assignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentCreate' is not null or undefined
            (0, common_1.assertParamExists)('assignRole', 'roleAssignmentCreate', roleAssignmentCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleAssignmentCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAssignRole: async (projId, envId, roleAssignmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkAssignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkAssignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentCreate' is not null or undefined
            (0, common_1.assertParamExists)('bulkAssignRole', 'roleAssignmentCreate', roleAssignmentCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleAssignmentCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUnassignRole: async (projId, envId, roleAssignmentRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkUnassignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkUnassignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentRemove' is not null or undefined
            (0, common_1.assertParamExists)('bulkUnassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleAssignmentRemove, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments: async (projId, envId, user, role, tenant, resourceInstance, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listRoleAssignments', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listRoleAssignments', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (resourceInstance !== undefined) {
                localVarQueryParameter['resource_instance'] = resourceInstance;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole: async (projId, envId, roleAssignmentRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('unassignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('unassignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentRemove' is not null or undefined
            (0, common_1.assertParamExists)('unassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleAssignmentRemove, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RoleAssignmentsApiAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator;
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
const RoleAssignmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RoleAssignmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRole(projId, envId, roleAssignmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(projId, envId, roleAssignmentCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAssignRole(projId, envId, roleAssignmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAssignRole(projId, envId, roleAssignmentCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUnassignRole(projId, envId, roleAssignmentRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUnassignRole(projId, envId, roleAssignmentRemove, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoleAssignments(projId, envId, user, role, tenant, resourceInstance, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(projId, envId, user, role, tenant, resourceInstance, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignRole(projId, envId, roleAssignmentRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(projId, envId, roleAssignmentRemove, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.RoleAssignmentsApiFp = RoleAssignmentsApiFp;
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
const RoleAssignmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RoleAssignmentsApiFp)(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole(projId, envId, roleAssignmentCreate, options) {
            return localVarFp
                .assignRole(projId, envId, roleAssignmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAssignRole(projId, envId, roleAssignmentCreate, options) {
            return localVarFp
                .bulkAssignRole(projId, envId, roleAssignmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUnassignRole(projId, envId, roleAssignmentRemove, options) {
            return localVarFp
                .bulkUnassignRole(projId, envId, roleAssignmentRemove, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user filter, will only return role assignments granted to this user.
         * @param {string} [role] optional role filter, will only return role assignments granting this role.
         * @param {string} [tenant] optional tenant filter, will only return role assignments granted in that tenant.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments(projId, envId, user, role, tenant, resourceInstance, page, perPage, options) {
            return localVarFp
                .listRoleAssignments(projId, envId, user, role, tenant, resourceInstance, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole(projId, envId, roleAssignmentRemove, options) {
            return localVarFp
                .unassignRole(projId, envId, roleAssignmentRemove, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.RoleAssignmentsApiFactory = RoleAssignmentsApiFactory;
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
class RoleAssignmentsApi extends base_1.BaseAPI {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    assignRole(requestParameters, options) {
        return (0, exports.RoleAssignmentsApiFp)(this.configuration)
            .assignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Assign Role
     * @param {RoleAssignmentsApiBulkAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    bulkAssignRole(requestParameters, options) {
        return (0, exports.RoleAssignmentsApiFp)(this.configuration)
            .bulkAssignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Unassign Role
     * @param {RoleAssignmentsApiBulkUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    bulkUnassignRole(requestParameters, options) {
        return (0, exports.RoleAssignmentsApiFp)(this.configuration)
            .bulkUnassignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user. - If the `tenant` filter is present, will only return the role assignments in that tenant. - If the `role` filter is present, will only return role assignments that are granting that role.
     * @summary List Role Assignments
     * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    listRoleAssignments(requestParameters, options) {
        return (0, exports.RoleAssignmentsApiFp)(this.configuration)
            .listRoleAssignments(requestParameters.projId, requestParameters.envId, requestParameters.user, requestParameters.role, requestParameters.tenant, requestParameters.resourceInstance, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {RoleAssignmentsApiUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    unassignRole(requestParameters, options) {
        return (0, exports.RoleAssignmentsApiFp)(this.configuration)
            .unassignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.RoleAssignmentsApi = RoleAssignmentsApi;
//# sourceMappingURL=data:application/json;base64,