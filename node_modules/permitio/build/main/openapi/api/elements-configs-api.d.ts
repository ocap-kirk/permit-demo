/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ElementsConfigCreate } from '../types';
import { ElementsConfigRead } from '../types';
import { ElementsConfigRuntimeRead } from '../types';
import { ElementsConfigUpdate } from '../types';
import { ElementsEnvTypeRead } from '../types';
import { ElementsEnvTypeUpdate } from '../types';
import { ElementsType } from '../types';
import { PaginatedResultElementsConfigRead } from '../types';
/**
 * ElementsConfigsApi - axios parameter creator
 * @export
 */
export declare const ElementsConfigsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig: (projId: string, envId: string, elementsConfigCreate: ElementsConfigCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig: (elementsConfigId: string, projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig: (projId: string, envId: string, elementsConfigId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime: (projId: string, envId: string, elementsConfigId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig: (projId: string, envId: string, elementType: ElementsType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs: (projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig: (elementsConfigId: string, projId: string, envId: string, elementsConfigUpdate: ElementsConfigUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions: (elementType: ElementsType, projId: string, envId: string, elementsEnvTypeUpdate: ElementsEnvTypeUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ElementsConfigsApi - functional programming interface
 * @export
 */
export declare const ElementsConfigsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig(projId: string, envId: string, elementsConfigCreate: ElementsConfigCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>>;
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig(elementsConfigId: string, projId: string, envId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig(projId: string, envId: string, elementsConfigId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime(projId: string, envId: string, elementsConfigId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRuntimeRead>>;
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig(projId: string, envId: string, elementType: ElementsType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>>;
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultElementsConfigRead>>;
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig(elementsConfigId: string, projId: string, envId: string, elementsConfigUpdate: ElementsConfigUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsConfigRead>>;
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions(elementType: ElementsType, projId: string, envId: string, elementsEnvTypeUpdate: ElementsEnvTypeUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsEnvTypeRead>>;
};
/**
 * ElementsConfigsApi - factory interface
 * @export
 */
export declare const ElementsConfigsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigCreate} elementsConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createElementsConfig(projId: string, envId: string, elementsConfigCreate: ElementsConfigCreate, options?: any): AxiosPromise<ElementsConfigRead>;
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteElementsConfig(elementsConfigId: string, projId: string, envId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfig(projId: string, envId: string, elementsConfigId: string, options?: any): AxiosPromise<ElementsConfigRead>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsConfigRuntime(projId: string, envId: string, elementsConfigId: string, options?: any): AxiosPromise<ElementsConfigRuntimeRead>;
    /**
     *
     * @summary Get Elements Type Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElementsTypeConfig(projId: string, envId: string, elementType: ElementsType, options?: any): AxiosPromise<ElementsEnvTypeRead>;
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listElementsConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedResultElementsConfigRead>;
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsConfigUpdate} elementsConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsConfig(elementsConfigId: string, projId: string, envId: string, elementsConfigUpdate: ElementsConfigUpdate, options?: any): AxiosPromise<ElementsConfigRead>;
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsType} elementType Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ElementsEnvTypeUpdate} elementsEnvTypeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateElementsTypePermissions(elementType: ElementsType, projId: string, envId: string, elementsEnvTypeUpdate: ElementsEnvTypeUpdate, options?: any): AxiosPromise<ElementsEnvTypeRead>;
};
/**
 * Request parameters for createElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiCreateElementsConfigRequest
 */
export interface ElementsConfigsApiCreateElementsConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiCreateElementsConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiCreateElementsConfig
     */
    readonly envId: string;
    /**
     *
     * @type {ElementsConfigCreate}
     * @memberof ElementsConfigsApiCreateElementsConfig
     */
    readonly elementsConfigCreate: ElementsConfigCreate;
}
/**
 * Request parameters for deleteElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiDeleteElementsConfigRequest
 */
export interface ElementsConfigsApiDeleteElementsConfigRequest {
    /**
     * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiDeleteElementsConfig
     */
    readonly elementsConfigId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiDeleteElementsConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiDeleteElementsConfig
     */
    readonly envId: string;
}
/**
 * Request parameters for getElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsConfigRequest
 */
export interface ElementsConfigsApiGetElementsConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfig
     */
    readonly envId: string;
    /**
     * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfig
     */
    readonly elementsConfigId: string;
}
/**
 * Request parameters for getElementsConfigRuntime operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsConfigRuntimeRequest
 */
export interface ElementsConfigsApiGetElementsConfigRuntimeRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfigRuntime
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfigRuntime
     */
    readonly envId: string;
    /**
     * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsConfigRuntime
     */
    readonly elementsConfigId: string;
}
/**
 * Request parameters for getElementsTypeConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiGetElementsTypeConfigRequest
 */
export interface ElementsConfigsApiGetElementsTypeConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsTypeConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiGetElementsTypeConfig
     */
    readonly envId: string;
    /**
     * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @type {ElementsType}
     * @memberof ElementsConfigsApiGetElementsTypeConfig
     */
    readonly elementType: ElementsType;
}
/**
 * Request parameters for listElementsConfigs operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiListElementsConfigsRequest
 */
export interface ElementsConfigsApiListElementsConfigsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiListElementsConfigs
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiListElementsConfigs
     */
    readonly envId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ElementsConfigsApiListElementsConfigs
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ElementsConfigsApiListElementsConfigs
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateElementsConfig operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiUpdateElementsConfigRequest
 */
export interface ElementsConfigsApiUpdateElementsConfigRequest {
    /**
     * Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiUpdateElementsConfig
     */
    readonly elementsConfigId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiUpdateElementsConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiUpdateElementsConfig
     */
    readonly envId: string;
    /**
     *
     * @type {ElementsConfigUpdate}
     * @memberof ElementsConfigsApiUpdateElementsConfig
     */
    readonly elementsConfigUpdate: ElementsConfigUpdate;
}
/**
 * Request parameters for updateElementsTypePermissions operation in ElementsConfigsApi.
 * @export
 * @interface ElementsConfigsApiUpdateElementsTypePermissionsRequest
 */
export interface ElementsConfigsApiUpdateElementsTypePermissionsRequest {
    /**
     * Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
     * @type {ElementsType}
     * @memberof ElementsConfigsApiUpdateElementsTypePermissions
     */
    readonly elementType: ElementsType;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiUpdateElementsTypePermissions
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ElementsConfigsApiUpdateElementsTypePermissions
     */
    readonly envId: string;
    /**
     *
     * @type {ElementsEnvTypeUpdate}
     * @memberof ElementsConfigsApiUpdateElementsTypePermissions
     */
    readonly elementsEnvTypeUpdate: ElementsEnvTypeUpdate;
}
/**
 * ElementsConfigsApi - object-oriented interface
 * @export
 * @class ElementsConfigsApi
 * @extends {BaseAPI}
 */
export declare class ElementsConfigsApi extends BaseAPI {
    /**
     * Creates a new elements_config under the active organization.
     * @summary Create Elements Config
     * @param {ElementsConfigsApiCreateElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    createElementsConfig(requestParameters: ElementsConfigsApiCreateElementsConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsConfigRead, any>>;
    /**
     * Deletes the elements_config and all its related data.
     * @summary Delete Elements Config
     * @param {ElementsConfigsApiDeleteElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    deleteElementsConfig(requestParameters: ElementsConfigsApiDeleteElementsConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config
     * @param {ElementsConfigsApiGetElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsConfig(requestParameters: ElementsConfigsApiGetElementsConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsConfigRead, any>>;
    /**
     * Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
     * @summary Get Elements Config Runtime
     * @param {ElementsConfigsApiGetElementsConfigRuntimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsConfigRuntime(requestParameters: ElementsConfigsApiGetElementsConfigRuntimeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsConfigRuntimeRead, any>>;
    /**
     *
     * @summary Get Elements Type Config
     * @param {ElementsConfigsApiGetElementsTypeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    getElementsTypeConfig(requestParameters: ElementsConfigsApiGetElementsTypeConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsEnvTypeRead, any>>;
    /**
     * Lists all the elements_configs under the active organization.
     * @summary List Elements Configs
     * @param {ElementsConfigsApiListElementsConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    listElementsConfigs(requestParameters: ElementsConfigsApiListElementsConfigsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultElementsConfigRead, any>>;
    /**
     * Updates the elements_config.
     * @summary Update Elements Config
     * @param {ElementsConfigsApiUpdateElementsConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    updateElementsConfig(requestParameters: ElementsConfigsApiUpdateElementsConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsConfigRead, any>>;
    /**
     *
     * @summary Update Elements Type Permissions
     * @param {ElementsConfigsApiUpdateElementsTypePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementsConfigsApi
     */
    updateElementsTypePermissions(requestParameters: ElementsConfigsApiUpdateElementsTypePermissionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ElementsEnvTypeRead, any>>;
}
