"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OPALDataApi = exports.OPALDataApiFactory = exports.OPALDataApiFp = exports.OPALDataApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OPALDataApi - axios parameter creator
 * @export
 */
const OPALDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllData: async (orgId, projId, envId, internalUpdateCache, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getAllData', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getAllData', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getAllData', 'envId', envId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (internalUpdateCache !== undefined) {
                localVarQueryParameter['__internal_update_cache'] = internalUpdateCache;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForConditionSet: async (orgId, projId, envId, conditionSetId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForConditionSet', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForConditionSet', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_sets/{condition_set_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForResource: async (orgId, projId, envId, resourceId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForResource', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForResource', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForResource', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForResource', 'resourceId', resourceId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_types/{resource_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForRole: async (orgId, projId, envId, roleId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForRole', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForRole', 'roleId', roleId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForSetRule: async (orgId, projId, envId, userSetId, resourceSetId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForSetRule', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForSetRule', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForSetRule', 'envId', envId);
            // verify required parameter 'userSetId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForSetRule', 'userSetId', userSetId);
            // verify required parameter 'resourceSetId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForSetRule', 'resourceSetId', resourceSetId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'user_set_id'}}`, encodeURIComponent(String(userSetId)))
                .replace(`{${'resource_set_id'}}`, encodeURIComponent(String(resourceSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForTenant: async (orgId, projId, envId, tenantId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForTenant', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForTenant', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForTenant', 'tenantId', tenantId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/tenants/{tenant_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForUser: async (orgId, projId, envId, userId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForUser', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForUser', 'envId', envId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('getDataForUser', 'userId', userId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OPALDataApiAxiosParamCreator = OPALDataApiAxiosParamCreator;
/**
 * OPALDataApi - functional programming interface
 * @export
 */
const OPALDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OPALDataApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllData(orgId, projId, envId, internalUpdateCache, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllData(orgId, projId, envId, internalUpdateCache, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForConditionSet(orgId, projId, envId, conditionSetId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForResource(orgId, projId, envId, resourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForResource(orgId, projId, envId, resourceId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForRole(orgId, projId, envId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForRole(orgId, projId, envId, roleId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForTenant(orgId, projId, envId, tenantId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForTenant(orgId, projId, envId, tenantId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForUser(orgId, projId, envId, userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForUser(orgId, projId, envId, userId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.OPALDataApiFp = OPALDataApiFp;
/**
 * OPALDataApi - factory interface
 * @export
 */
const OPALDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OPALDataApiFp)(configuration);
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllData(orgId, projId, envId, internalUpdateCache, options) {
            return localVarFp
                .getAllData(orgId, projId, envId, internalUpdateCache, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
            return localVarFp
                .getDataForConditionSet(orgId, projId, envId, conditionSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForResource(orgId, projId, envId, resourceId, options) {
            return localVarFp
                .getDataForResource(orgId, projId, envId, resourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForRole(orgId, projId, envId, roleId, options) {
            return localVarFp
                .getDataForRole(orgId, projId, envId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
            return localVarFp
                .getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForTenant(orgId, projId, envId, tenantId, options) {
            return localVarFp
                .getDataForTenant(orgId, projId, envId, tenantId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForUser(orgId, projId, envId, userId, options) {
            return localVarFp
                .getDataForUser(orgId, projId, envId, userId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.OPALDataApiFactory = OPALDataApiFactory;
/**
 * OPALDataApi - object-oriented interface
 * @export
 * @class OPALDataApi
 * @extends {BaseAPI}
 */
class OPALDataApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get All Data
     * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getAllData(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getAllData(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.internalUpdateCache, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Condition Set
     * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForConditionSet(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForConditionSet(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Resource
     * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForResource(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForResource(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Role
     * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForRole(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForRole(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForSetRule(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForSetRule(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.userSetId, requestParameters.resourceSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Tenant
     * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForTenant(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForTenant(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.tenantId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For User
     * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForUser(requestParameters, options) {
        return (0, exports.OPALDataApiFp)(this.configuration)
            .getDataForUser(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.OPALDataApi = OPALDataApi;
//# sourceMappingURL=data:application/json;base64,