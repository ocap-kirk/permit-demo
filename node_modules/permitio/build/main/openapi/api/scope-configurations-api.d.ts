/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ScopeConfigRead } from '../types';
import { ScopeConfigSet } from '../types';
/**
 * ScopeConfigurationsApi - axios parameter creator
 * @export
 */
export declare const ScopeConfigurationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
     * @summary Get Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopeConfig: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetScopeConfig: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ScopeConfigSet} scopeConfigSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopeConfig: (projId: string, envId: string, scopeConfigSet: ScopeConfigSet, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScopeConfigurationsApi - functional programming interface
 * @export
 */
export declare const ScopeConfigurationsApiFp: (configuration?: Configuration) => {
    /**
     * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
     * @summary Get Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopeConfig(projId: string, envId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScopeConfigRead>>;
    /**
     *
     * @summary Reset Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetScopeConfig(projId: string, envId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ScopeConfigSet} scopeConfigSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopeConfig(projId: string, envId: string, scopeConfigSet: ScopeConfigSet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScopeConfigRead>>;
};
/**
 * ScopeConfigurationsApi - factory interface
 * @export
 */
export declare const ScopeConfigurationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
     * @summary Get Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopeConfig(projId: string, envId: string, options?: any): AxiosPromise<ScopeConfigRead>;
    /**
     *
     * @summary Reset Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetScopeConfig(projId: string, envId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Set Scope Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ScopeConfigSet} scopeConfigSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopeConfig(projId: string, envId: string, scopeConfigSet: ScopeConfigSet, options?: any): AxiosPromise<ScopeConfigRead>;
};
/**
 * Request parameters for getScopeConfig operation in ScopeConfigurationsApi.
 * @export
 * @interface ScopeConfigurationsApiGetScopeConfigRequest
 */
export interface ScopeConfigurationsApiGetScopeConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiGetScopeConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiGetScopeConfig
     */
    readonly envId: string;
}
/**
 * Request parameters for resetScopeConfig operation in ScopeConfigurationsApi.
 * @export
 * @interface ScopeConfigurationsApiResetScopeConfigRequest
 */
export interface ScopeConfigurationsApiResetScopeConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiResetScopeConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiResetScopeConfig
     */
    readonly envId: string;
}
/**
 * Request parameters for setScopeConfig operation in ScopeConfigurationsApi.
 * @export
 * @interface ScopeConfigurationsApiSetScopeConfigRequest
 */
export interface ScopeConfigurationsApiSetScopeConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiSetScopeConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ScopeConfigurationsApiSetScopeConfig
     */
    readonly envId: string;
    /**
     *
     * @type {ScopeConfigSet}
     * @memberof ScopeConfigurationsApiSetScopeConfig
     */
    readonly scopeConfigSet: ScopeConfigSet;
}
/**
 * ScopeConfigurationsApi - object-oriented interface
 * @export
 * @class ScopeConfigurationsApi
 * @extends {BaseAPI}
 */
export declare class ScopeConfigurationsApi extends BaseAPI {
    /**
     * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
     * @summary Get Scope Config
     * @param {ScopeConfigurationsApiGetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    getScopeConfig(requestParameters: ScopeConfigurationsApiGetScopeConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScopeConfigRead>>;
    /**
     *
     * @summary Reset Scope Config
     * @param {ScopeConfigurationsApiResetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    resetScopeConfig(requestParameters: ScopeConfigurationsApiResetScopeConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Set Scope Config
     * @param {ScopeConfigurationsApiSetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    setScopeConfig(requestParameters: ScopeConfigurationsApiSetScopeConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScopeConfigRead>>;
}
