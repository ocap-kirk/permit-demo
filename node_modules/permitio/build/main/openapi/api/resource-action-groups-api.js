"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceActionGroupsApi = exports.ResourceActionGroupsApiFactory = exports.ResourceActionGroupsApiFp = exports.ResourceActionGroupsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ResourceActionGroupsApi - axios parameter creator
 * @export
 */
const ResourceActionGroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceActionGroup: async (projId, envId, resourceId, resourceActionGroupCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'resourceActionGroupCreate' is not null or undefined
            (0, common_1.assertParamExists)('createResourceActionGroup', 'resourceActionGroupCreate', resourceActionGroupCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resourceActionGroupCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceActionGroup: async (projId, envId, resourceId, actionGroupId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceActionGroup', 'actionGroupId', actionGroupId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceActionGroup: async (projId, envId, resourceId, actionGroupId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceActionGroup', 'actionGroupId', actionGroupId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActionGroups: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceActionGroups', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceActionGroups', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceActionGroups', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceActionGroup: async (resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options = {}) => {
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('updateResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            (0, common_1.assertParamExists)('updateResourceActionGroup', 'actionGroupId', actionGroupId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('updateResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('updateResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceActionGroupUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateResourceActionGroup', 'resourceActionGroupUpdate', resourceActionGroupUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resourceActionGroupUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ResourceActionGroupsApiAxiosParamCreator = ResourceActionGroupsApiAxiosParamCreator;
/**
 * ResourceActionGroupsApi - functional programming interface
 * @export
 */
const ResourceActionGroupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ResourceActionGroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceActionGroup(projId, envId, resourceId, actionGroupId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceActionGroups(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActionGroups(projId, envId, resourceId, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ResourceActionGroupsApiFp = ResourceActionGroupsApiFp;
/**
 * ResourceActionGroupsApi - factory interface
 * @export
 */
const ResourceActionGroupsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ResourceActionGroupsApiFp)(configuration);
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options) {
            return localVarFp
                .createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            return localVarFp
                .deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            return localVarFp
                .getResourceActionGroup(projId, envId, resourceId, actionGroupId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActionGroups(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceActionGroups(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options) {
            return localVarFp
                .updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ResourceActionGroupsApiFactory = ResourceActionGroupsApiFactory;
/**
 * ResourceActionGroupsApi - object-oriented interface
 * @export
 * @class ResourceActionGroupsApi
 * @extends {BaseAPI}
 */
class ResourceActionGroupsApi extends base_1.BaseAPI {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {ResourceActionGroupsApiCreateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    createResourceActionGroup(requestParameters, options) {
        return (0, exports.ResourceActionGroupsApiFp)(this.configuration)
            .createResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.resourceActionGroupCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {ResourceActionGroupsApiDeleteResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    deleteResourceActionGroup(requestParameters, options) {
        return (0, exports.ResourceActionGroupsApiFp)(this.configuration)
            .deleteResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionGroupId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {ResourceActionGroupsApiGetResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    getResourceActionGroup(requestParameters, options) {
        return (0, exports.ResourceActionGroupsApiFp)(this.configuration)
            .getResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionGroupId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {ResourceActionGroupsApiListResourceActionGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    listResourceActionGroups(requestParameters, options) {
        return (0, exports.ResourceActionGroupsApiFp)(this.configuration)
            .listResourceActionGroups(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {ResourceActionGroupsApiUpdateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    updateResourceActionGroup(requestParameters, options) {
        return (0, exports.ResourceActionGroupsApiFp)(this.configuration)
            .updateResourceActionGroup(requestParameters.resourceId, requestParameters.actionGroupId, requestParameters.projId, requestParameters.envId, requestParameters.resourceActionGroupUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ResourceActionGroupsApi = ResourceActionGroupsApi;
//# sourceMappingURL=data:application/json;base64,