"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
const OrganizationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvite: async (orgId, inviteId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('cancelInvite', 'orgId', orgId);
            // verify required parameter 'inviteId' is not null or undefined
            (0, common_1.assertParamExists)('cancelInvite', 'inviteId', inviteId);
            const localVarPath = `/v2/orgs/{org_id}/invites/{invite_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'invite_id'}}`, encodeURIComponent(String(inviteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (organizationCreate, options = {}) => {
            // verify required parameter 'organizationCreate' is not null or undefined
            (0, common_1.assertParamExists)('createOrganization', 'organizationCreate', organizationCreate);
            const localVarPath = `/v2/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(organizationCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (orgId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('deleteOrganization', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveOrganization: async (options = {}) => {
            const localVarPath = `/v2/orgs/active/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (orgId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('getOrganization', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMembersToOrganization: async (orgId, inviteCreate, inviterName, inviterEmail, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('inviteMembersToOrganization', 'orgId', orgId);
            // verify required parameter 'inviteCreate' is not null or undefined
            (0, common_1.assertParamExists)('inviteMembersToOrganization', 'inviteCreate', inviteCreate);
            const localVarPath = `/v2/orgs/{org_id}/invites`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (inviterName !== undefined) {
                localVarQueryParameter['inviter_name'] = inviterName;
            }
            if (inviterEmail !== undefined) {
                localVarQueryParameter['inviter_email'] = inviterEmail;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(inviteCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationInvites: async (orgId, page, perPage, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('listOrganizationInvites', 'orgId', orgId);
            const localVarPath = `/v2/orgs/{org_id}/invites`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations: async (page, perPage, options = {}) => {
            const localVarPath = `/v2/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (orgId, organizationUpdate, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('updateOrganization', 'orgId', orgId);
            // verify required parameter 'organizationUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateOrganization', 'organizationUpdate', organizationUpdate);
            const localVarPath = `/v2/orgs/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(organizationUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OrganizationsApiAxiosParamCreator = OrganizationsApiAxiosParamCreator;
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
const OrganizationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OrganizationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInvite(orgId, inviteId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInvite(orgId, inviteId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(organizationCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(organizationCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(orgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(orgId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveOrganization(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveOrganization(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(orgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(orgId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationInvites(orgId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvites(orgId, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizations(page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(orgId, organizationUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(orgId, organizationUpdate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.OrganizationsApiFp = OrganizationsApiFp;
/**
 * OrganizationsApi - factory interface
 * @export
 */
const OrganizationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OrganizationsApiFp)(configuration);
    return {
        /**
         * Cancels an invite that was sent to a new member.
         * @summary Cancel Invite
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} inviteId Id of the invite to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInvite(orgId, inviteId, options) {
            return localVarFp
                .cancelInvite(orgId, inviteId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
         * @summary Create Organization
         * @param {OrganizationCreate} organizationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(organizationCreate, options) {
            return localVarFp
                .createOrganization(organizationCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an organization (Permit.io account) and all its related data.
         * @summary Delete Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(orgId, options) {
            return localVarFp
                .deleteOrganization(orgId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Active Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveOrganization(options) {
            return localVarFp.getActiveOrganization(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
         * @summary Get Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(orgId, options) {
            return localVarFp.getOrganization(orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite new members into the organization.
         * @summary Invite Members To Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {Array<InviteCreate>} inviteCreate
         * @param {string} [inviterName]
         * @param {string} [inviterEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options) {
            return localVarFp
                .inviteMembersToOrganization(orgId, inviteCreate, inviterName, inviterEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists pending organization invites
         * @summary List Organization Invites
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationInvites(orgId, page, perPage, options) {
            return localVarFp
                .listOrganizationInvites(orgId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
         * @summary List Organizations
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations(page, perPage, options) {
            return localVarFp
                .listOrganizations(page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the organization\'s profile.
         * @summary Update Organization
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {OrganizationUpdate} organizationUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(orgId, organizationUpdate, options) {
            return localVarFp
                .updateOrganization(orgId, organizationUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.OrganizationsApiFactory = OrganizationsApiFactory;
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends base_1.BaseAPI {
    /**
     * Cancels an invite that was sent to a new member.
     * @summary Cancel Invite
     * @param {OrganizationsApiCancelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    cancelInvite(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .cancelInvite(requestParameters.orgId, requestParameters.inviteId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganization(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .createOrganization(requestParameters.organizationCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .deleteOrganization(requestParameters.orgId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Active Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getActiveOrganization(options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .getActiveOrganization(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .getOrganization(requestParameters.orgId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invite new members into the organization.
     * @summary Invite Members To Organization
     * @param {OrganizationsApiInviteMembersToOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    inviteMembersToOrganization(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .inviteMembersToOrganization(requestParameters.orgId, requestParameters.inviteCreate, requestParameters.inviterName, requestParameters.inviterEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists pending organization invites
     * @summary List Organization Invites
     * @param {OrganizationsApiListOrganizationInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationInvites(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .listOrganizationInvites(requestParameters.orgId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizations(requestParameters = {}, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .listOrganizations(requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganization(requestParameters, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration)
            .updateOrganization(requestParameters.orgId, requestParameters.organizationUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.OrganizationsApi = OrganizationsApi;
//# sourceMappingURL=data:application/json;base64,