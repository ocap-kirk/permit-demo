"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeConfigurationsApi = exports.ScopeConfigurationsApiFactory = exports.ScopeConfigurationsApiFp = exports.ScopeConfigurationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ScopeConfigurationsApi - axios parameter creator
 * @export
 */
const ScopeConfigurationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
         * @summary Get Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopeConfig: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getScopeConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getScopeConfig', 'envId', envId);
            const localVarPath = `/v2/projects/{proj_id}/{env_id}/opal_scope`
                .replace(`{${"proj_id"}}`, encodeURIComponent(String(projId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetScopeConfig: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('resetScopeConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('resetScopeConfig', 'envId', envId);
            const localVarPath = `/v2/projects/{proj_id}/{env_id}/opal_scope`
                .replace(`{${"proj_id"}}`, encodeURIComponent(String(projId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ScopeConfigSet} scopeConfigSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopeConfig: async (projId, envId, scopeConfigSet, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('setScopeConfig', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('setScopeConfig', 'envId', envId);
            // verify required parameter 'scopeConfigSet' is not null or undefined
            (0, common_1.assertParamExists)('setScopeConfig', 'scopeConfigSet', scopeConfigSet);
            const localVarPath = `/v2/projects/{proj_id}/{env_id}/opal_scope`
                .replace(`{${"proj_id"}}`, encodeURIComponent(String(projId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scopeConfigSet, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ScopeConfigurationsApiAxiosParamCreator = ScopeConfigurationsApiAxiosParamCreator;
/**
 * ScopeConfigurationsApi - functional programming interface
 * @export
 */
const ScopeConfigurationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ScopeConfigurationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
         * @summary Get Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopeConfig(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScopeConfig(projId, envId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Reset Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetScopeConfig(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetScopeConfig(projId, envId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Set Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ScopeConfigSet} scopeConfigSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setScopeConfig(projId, envId, scopeConfigSet, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setScopeConfig(projId, envId, scopeConfigSet, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ScopeConfigurationsApiFp = ScopeConfigurationsApiFp;
/**
 * ScopeConfigurationsApi - factory interface
 * @export
 */
const ScopeConfigurationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ScopeConfigurationsApiFp)(configuration);
    return {
        /**
         * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
         * @summary Get Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopeConfig(projId, envId, options) {
            return localVarFp.getScopeConfig(projId, envId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Reset Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetScopeConfig(projId, envId, options) {
            return localVarFp.resetScopeConfig(projId, envId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Set Scope Config
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ScopeConfigSet} scopeConfigSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopeConfig(projId, envId, scopeConfigSet, options) {
            return localVarFp.setScopeConfig(projId, envId, scopeConfigSet, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ScopeConfigurationsApiFactory = ScopeConfigurationsApiFactory;
/**
 * ScopeConfigurationsApi - object-oriented interface
 * @export
 * @class ScopeConfigurationsApi
 * @extends {BaseAPI}
 */
class ScopeConfigurationsApi extends base_1.BaseAPI {
    /**
     * Returns the custom OPAL Scope config for given environment, if exists. If not custom config is set, return 404.
     * @summary Get Scope Config
     * @param {ScopeConfigurationsApiGetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    getScopeConfig(requestParameters, options) {
        return (0, exports.ScopeConfigurationsApiFp)(this.configuration).getScopeConfig(requestParameters.projId, requestParameters.envId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Reset Scope Config
     * @param {ScopeConfigurationsApiResetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    resetScopeConfig(requestParameters, options) {
        return (0, exports.ScopeConfigurationsApiFp)(this.configuration).resetScopeConfig(requestParameters.projId, requestParameters.envId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Set Scope Config
     * @param {ScopeConfigurationsApiSetScopeConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopeConfigurationsApi
     */
    setScopeConfig(requestParameters, options) {
        return (0, exports.ScopeConfigurationsApiFp)(this.configuration).setScopeConfig(requestParameters.projId, requestParameters.envId, requestParameters.scopeConfigSet, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ScopeConfigurationsApi = ScopeConfigurationsApi;
//# sourceMappingURL=data:application/json;base64,