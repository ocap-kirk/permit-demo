"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecisionLogsIngressApi = exports.DecisionLogsIngressApiFactory = exports.DecisionLogsIngressApiFp = exports.DecisionLogsIngressApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DecisionLogsIngressApi - axios parameter creator
 * @export
 */
const DecisionLogsIngressApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOpaDecisionLogs: async (requestBody, options = {}) => {
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('insertOpaDecisionLogs', 'requestBody', requestBody);
            const localVarPath = `/v2/decision-logs/ingress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DecisionLogsIngressApiAxiosParamCreator = DecisionLogsIngressApiAxiosParamCreator;
/**
 * DecisionLogsIngressApi - functional programming interface
 * @export
 */
const DecisionLogsIngressApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DecisionLogsIngressApiAxiosParamCreator)(configuration);
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertOpaDecisionLogs(requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertOpaDecisionLogs(requestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DecisionLogsIngressApiFp = DecisionLogsIngressApiFp;
/**
 * DecisionLogsIngressApi - factory interface
 * @export
 */
const DecisionLogsIngressApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DecisionLogsIngressApiFp)(configuration);
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOpaDecisionLogs(requestBody, options) {
            return localVarFp
                .insertOpaDecisionLogs(requestBody, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.DecisionLogsIngressApiFactory = DecisionLogsIngressApiFactory;
/**
 * DecisionLogsIngressApi - object-oriented interface
 * @export
 * @class DecisionLogsIngressApi
 * @extends {BaseAPI}
 */
class DecisionLogsIngressApi extends base_1.BaseAPI {
    /**
     * This ingress endpoint captures OPA decision logs.
     * @summary OPA Decision Logs Ingress
     * @param {DecisionLogsIngressApiInsertOpaDecisionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionLogsIngressApi
     */
    insertOpaDecisionLogs(requestParameters, options) {
        return (0, exports.DecisionLogsIngressApiFp)(this.configuration)
            .insertOpaDecisionLogs(requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DecisionLogsIngressApi = DecisionLogsIngressApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaXNpb24tbG9ncy1pbmdyZXNzLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9kZWNpc2lvbi1sb2dzLWluZ3Jlc3MtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBRzdGOzs7R0FHRztBQUNJLE1BQU0sdUNBQXVDLEdBQUcsVUFBVSxhQUE2QjtJQUM1RixPQUFPO1FBQ0w7Ozs7OztXQU1HO1FBQ0gscUJBQXFCLEVBQUUsS0FBSyxFQUMxQixXQUEwQixFQUMxQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4QixtRUFBbUU7WUFDbkUsSUFBQSwwQkFBaUIsRUFBQyx1QkFBdUIsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDdkUsTUFBTSxZQUFZLEdBQUcsMkJBQTJCLENBQUM7WUFDakQsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLE1BQU0sSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDOUUsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLElBQUEsOEJBQXFCLEVBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFF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