"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyApi = exports.PolicyApiFactory = exports.PolicyApiFp = exports.PolicyApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PolicyApi - axios parameter creator
 * @export
 */
const PolicyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSources: async (token, options = {}) => {
            const localVarPath = `/v2/opal/data/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSourcesOpalDataConfigGet: async (token, options = {}) => {
            const localVarPath = `/opal/data/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PolicyApiAxiosParamCreator = PolicyApiAxiosParamCreator;
/**
 * PolicyApi - functional programming interface
 * @export
 */
const PolicyApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PolicyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpalDataSources(token, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSources(token, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpalDataSourcesOpalDataConfigGet(token, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpalDataSourcesOpalDataConfigGet(token, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.PolicyApiFp = PolicyApiFp;
/**
 * PolicyApi - factory interface
 * @export
 */
const PolicyApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PolicyApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSources(token, options) {
            return localVarFp
                .getOpalDataSources(token, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Opal Data Sources
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpalDataSourcesOpalDataConfigGet(token, options) {
            return localVarFp
                .getOpalDataSourcesOpalDataConfigGet(token, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.PolicyApiFactory = PolicyApiFactory;
/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
class PolicyApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Opal Data Sources
     * @param {PolicyApiGetOpalDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    getOpalDataSources(requestParameters = {}, options) {
        return (0, exports.PolicyApiFp)(this.configuration)
            .getOpalDataSources(requestParameters.token, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Opal Data Sources
     * @param {PolicyApiGetOpalDataSourcesOpalDataConfigGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    getOpalDataSourcesOpalDataConfigGet(requestParameters = {}, options) {
        return (0, exports.PolicyApiFp)(this.configuration)
            .getOpalDataSourcesOpalDataConfigGet(requestParameters.token, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PolicyApi = PolicyApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9wb2xpY3ktYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBSzdGOzs7R0FHRztBQUNJLE1BQU0sMEJBQTBCLEdBQUcsVUFBVSxhQUE2QjtJQUMvRSxPQUFPO1FBQ0w7Ozs7OztXQU1HO1FBQ0gsa0JBQWtCLEVBQUUsS0FBSyxFQUN2QixLQUFjLEVBQ2QsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsTUFBTSxZQUFZLEdBQUcsc0JBQXNCLENBQUM7WUFDNUMsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLEtBQUssSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN2QixzQkFBc0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDekM7WUFFRCxJQUFBLHdCQUFlLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDeEQsSUFBSSxzQkFBc0IsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENB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