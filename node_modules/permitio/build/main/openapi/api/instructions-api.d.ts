/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { LanguageInstructions } from '../types';
/**
 * InstructionsApi - axios parameter creator
 * @export
 */
export declare const InstructionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLanguageInstructions: (projId: string, envId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InstructionsApi - functional programming interface
 * @export
 */
export declare const InstructionsApiFp: (configuration?: Configuration) => {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLanguageInstructions(projId: string, envId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LanguageInstructions>>>;
};
/**
 * InstructionsApi - factory interface
 * @export
 */
export declare const InstructionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLanguageInstructions(projId: string, envId: string, options?: any): AxiosPromise<Array<LanguageInstructions>>;
};
/**
 * Request parameters for listLanguageInstructions operation in InstructionsApi.
 * @export
 * @interface InstructionsApiListLanguageInstructionsRequest
 */
export interface InstructionsApiListLanguageInstructionsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof InstructionsApiListLanguageInstructions
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof InstructionsApiListLanguageInstructions
     */
    readonly envId: string;
}
/**
 * InstructionsApi - object-oriented interface
 * @export
 * @class InstructionsApi
 * @extends {BaseAPI}
 */
export declare class InstructionsApi extends BaseAPI {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {InstructionsApiListLanguageInstructionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstructionsApi
     */
    listLanguageInstructions(requestParameters: InstructionsApiListLanguageInstructionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LanguageInstructions[], any>>;
}
