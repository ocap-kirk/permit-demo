"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionSetRulesApi = exports.ConditionSetRulesApiFactory = exports.ConditionSetRulesApiFp = exports.ConditionSetRulesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ConditionSetRulesApi - axios parameter creator
 * @export
 */
const ConditionSetRulesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
         * @summary Assign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleCreate} conditionSetRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSetPermissions: async (projId, envId, conditionSetRuleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('assignSetPermissions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('assignSetPermissions', 'envId', envId);
            // verify required parameter 'conditionSetRuleCreate' is not null or undefined
            (0, common_1.assertParamExists)('assignSetPermissions', 'conditionSetRuleCreate', conditionSetRuleCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(conditionSetRuleCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.
         * @summary List Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set
         * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission
         * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSetPermissions: async (projId, envId, userSet, permission, resourceSet, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listSetPermissions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listSetPermissions', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (userSet !== undefined) {
                localVarQueryParameter['user_set'] = userSet;
            }
            if (permission !== undefined) {
                localVarQueryParameter['permission'] = permission;
            }
            if (resourceSet !== undefined) {
                localVarQueryParameter['resource_set'] = resourceSet;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
         * @summary Unassign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleRemove} conditionSetRuleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSetPermissions: async (projId, envId, conditionSetRuleRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('unassignSetPermissions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('unassignSetPermissions', 'envId', envId);
            // verify required parameter 'conditionSetRuleRemove' is not null or undefined
            (0, common_1.assertParamExists)('unassignSetPermissions', 'conditionSetRuleRemove', conditionSetRuleRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/set_rules`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(conditionSetRuleRemove, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ConditionSetRulesApiAxiosParamCreator = ConditionSetRulesApiAxiosParamCreator;
/**
 * ConditionSetRulesApi - functional programming interface
 * @export
 */
const ConditionSetRulesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ConditionSetRulesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
         * @summary Assign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleCreate} conditionSetRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSetPermissions(projId, envId, conditionSetRuleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSetPermissions(projId, envId, conditionSetRuleCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.
         * @summary List Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set
         * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission
         * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSetPermissions(projId, envId, userSet, permission, resourceSet, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSetPermissions(projId, envId, userSet, permission, resourceSet, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
         * @summary Unassign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleRemove} conditionSetRuleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignSetPermissions(projId, envId, conditionSetRuleRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignSetPermissions(projId, envId, conditionSetRuleRemove, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ConditionSetRulesApiFp = ConditionSetRulesApiFp;
/**
 * ConditionSetRulesApi - factory interface
 * @export
 */
const ConditionSetRulesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ConditionSetRulesApiFp)(configuration);
    return {
        /**
         * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
         * @summary Assign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleCreate} conditionSetRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSetPermissions(projId, envId, conditionSetRuleCreate, options) {
            return localVarFp
                .assignSetPermissions(projId, envId, conditionSetRuleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.
         * @summary List Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [userSet] optional user set filter, will only return rules where the permission is granted to this user set
         * @param {string} [permission] optional permission filter, will only return condition set rules granting this permission
         * @param {string} [resourceSet] optional resource set filter, will only return rules where the permission is granted on this resource set
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSetPermissions(projId, envId, userSet, permission, resourceSet, page, perPage, options) {
            return localVarFp
                .listSetPermissions(projId, envId, userSet, permission, resourceSet, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
         * @summary Unassign Set Permissions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetRuleRemove} conditionSetRuleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSetPermissions(projId, envId, conditionSetRuleRemove, options) {
            return localVarFp
                .unassignSetPermissions(projId, envId, conditionSetRuleRemove, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ConditionSetRulesApiFactory = ConditionSetRulesApiFactory;
/**
 * ConditionSetRulesApi - object-oriented interface
 * @export
 * @class ConditionSetRulesApi
 * @extends {BaseAPI}
 */
class ConditionSetRulesApi extends base_1.BaseAPI {
    /**
     * Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
     * @summary Assign Set Permissions
     * @param {ConditionSetRulesApiAssignSetPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetRulesApi
     */
    assignSetPermissions(requestParameters, options) {
        return (0, exports.ConditionSetRulesApiFp)(this.configuration)
            .assignSetPermissions(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetRuleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.
     * @summary List Set Permissions
     * @param {ConditionSetRulesApiListSetPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetRulesApi
     */
    listSetPermissions(requestParameters, options) {
        return (0, exports.ConditionSetRulesApiFp)(this.configuration)
            .listSetPermissions(requestParameters.projId, requestParameters.envId, requestParameters.userSet, requestParameters.permission, requestParameters.resourceSet, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
     * @summary Unassign Set Permissions
     * @param {ConditionSetRulesApiUnassignSetPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetRulesApi
     */
    unassignSetPermissions(requestParameters, options) {
        return (0, exports.ConditionSetRulesApiFp)(this.configuration)
            .unassignSetPermissions(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetRuleRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ConditionSetRulesApi = ConditionSetRulesApi;
//# sourceMappingURL=data:application/json;base64,