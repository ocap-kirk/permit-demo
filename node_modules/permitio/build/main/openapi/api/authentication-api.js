"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
const AuthenticationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
         * @summary (DEV MODE) Login
         * @param {DevLogin} devLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devLogin: async (devLogin, options = {}) => {
            // verify required parameter 'devLogin' is not null or undefined
            (0, common_1.assertParamExists)('devLogin', 'devLogin', devLogin);
            const localVarPath = `/v2/auth/devlogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(devLogin, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Elements Fe Login As
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserFELoginRequestInput} userFELoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsFeLoginAs: async (envId, userFELoginRequestInput, options = {}) => {
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsFeLoginAs', 'envId', envId);
            // verify required parameter 'userFELoginRequestInput' is not null or undefined
            (0, common_1.assertParamExists)('elementsFeLoginAs', 'userFELoginRequestInput', userFELoginRequestInput);
            const localVarPath = `/v2/auth/{env_id}/elements_fe_login_as`.replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userFELoginRequestInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Elements Login As
         * @param {UserLoginRequestInput} userLoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsLoginAs: async (userLoginRequestInput, options = {}) => {
            // verify required parameter 'userLoginRequestInput' is not null or undefined
            (0, common_1.assertParamExists)('elementsLoginAs', 'userLoginRequestInput', userLoginRequestInput);
            const localVarPath = `/v2/auth/elements_login_as`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userLoginRequestInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login
         * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (inviteCode, options = {}) => {
            const localVarPath = `/v2/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (inviteCode !== undefined) {
                localVarQueryParameter['invite_code'] = inviteCode;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login Elements
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginElements: async (token, options = {}) => {
            // verify required parameter 'token' is not null or undefined
            (0, common_1.assertParamExists)('loginElements', 'token', token);
            const localVarPath = `/v2/auth/login_elements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet: async (options = {}) => {
            const localVarPath = `/v2/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options = {}) => {
            const localVarPath = `/v2/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: async (options = {}) => {
            const localVarPath = `/v2/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the user to switch his active organization (manipulates the user\'s login session).  This route will return a new login cookie to the user.
         * @summary Switch Organization
         * @param {string} orgId the organization id the user wishes to switch to as the active org on the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchOrganization: async (orgId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('switchOrganization', 'orgId', orgId);
            const localVarPath = `/v2/auth/switch_org/{org_id}`.replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuthenticationApiAxiosParamCreator = AuthenticationApiAxiosParamCreator;
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
const AuthenticationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthenticationApiAxiosParamCreator)(configuration);
    return {
        /**
         * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
         * @summary (DEV MODE) Login
         * @param {DevLogin} devLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devLogin(devLogin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devLogin(devLogin, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Elements Fe Login As
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserFELoginRequestInput} userFELoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsFeLoginAs(envId, userFELoginRequestInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsFeLoginAs(envId, userFELoginRequestInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Elements Login As
         * @param {UserLoginRequestInput} userLoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsLoginAs(userLoginRequestInput, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsLoginAs(userLoginRequestInput, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login
         * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(inviteCode, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(inviteCode, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login Elements
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginElements(token, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginElements(token, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutGet(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async me(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Allows the user to switch his active organization (manipulates the user\'s login session).  This route will return a new login cookie to the user.
         * @summary Switch Organization
         * @param {string} orgId the organization id the user wishes to switch to as the active org on the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async switchOrganization(orgId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.switchOrganization(orgId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.AuthenticationApiFp = AuthenticationApiFp;
/**
 * AuthenticationApi - factory interface
 * @export
 */
const AuthenticationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthenticationApiFp)(configuration);
    return {
        /**
         * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
         * @summary (DEV MODE) Login
         * @param {DevLogin} devLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devLogin(devLogin, options) {
            return localVarFp.devLogin(devLogin, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Elements Fe Login As
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserFELoginRequestInput} userFELoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsFeLoginAs(envId, userFELoginRequestInput, options) {
            return localVarFp
                .elementsFeLoginAs(envId, userFELoginRequestInput, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Elements Login As
         * @param {UserLoginRequestInput} userLoginRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsLoginAs(userLoginRequestInput, options) {
            return localVarFp
                .elementsLoginAs(userLoginRequestInput, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login
         * @param {string} [inviteCode] An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(inviteCode, options) {
            return localVarFp.login(inviteCode, options).then((request) => request(axios, basePath));
        },
        /**
         * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
         * @summary Login Elements
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginElements(token, options) {
            return localVarFp.loginElements(token, options).then((request) => request(axios, basePath));
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet(options) {
            return localVarFp.logoutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
         * @summary Logout Post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options) {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me(options) {
            return localVarFp.me(options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the user to switch his active organization (manipulates the user\'s login session).  This route will return a new login cookie to the user.
         * @summary Switch Organization
         * @param {string} orgId the organization id the user wishes to switch to as the active org on the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchOrganization(orgId, options) {
            return localVarFp
                .switchOrganization(orgId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.AuthenticationApiFactory = AuthenticationApiFactory;
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
class AuthenticationApi extends base_1.BaseAPI {
    /**
     * The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
     * @summary (DEV MODE) Login
     * @param {AuthenticationApiDevLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    devLogin(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .devLogin(requestParameters.devLogin, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Elements Fe Login As
     * @param {AuthenticationApiElementsFeLoginAsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    elementsFeLoginAs(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .elementsFeLoginAs(requestParameters.envId, requestParameters.userFELoginRequestInput, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Elements Login As
     * @param {AuthenticationApiElementsLoginAsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    elementsLoginAs(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .elementsLoginAs(requestParameters.userLoginRequestInput, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
     * @summary Login
     * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(requestParameters = {}, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .login(requestParameters.inviteCode, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
     * @summary Login Elements
     * @param {AuthenticationApiLoginElementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginElements(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .loginElements(requestParameters.token, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
     * @summary Logout Get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutGet(options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .logoutGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
     * @summary Logout Post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutPost(options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .logoutPost(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    me(options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .me(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows the user to switch his active organization (manipulates the user\'s login session).  This route will return a new login cookie to the user.
     * @summary Switch Organization
     * @param {AuthenticationApiSwitchOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    switchOrganization(requestParameters, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration)
            .switchOrganization(requestParameters.orgId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthenticationApi = AuthenticationApi;
//# sourceMappingURL=data:application/json;base64,