"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImplicitGrantsApi = exports.ImplicitGrantsApiFactory = exports.ImplicitGrantsApiFp = exports.ImplicitGrantsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ImplicitGrantsApi - axios parameter creator
 * @export
 */
const ImplicitGrantsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImplicitGrant: async (projId, envId, resourceId, roleId, derivedRoleRuleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('createImplicitGrant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('createImplicitGrant', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('createImplicitGrant', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            (0, common_1.assertParamExists)('createImplicitGrant', 'roleId', roleId);
            // verify required parameter 'derivedRoleRuleCreate' is not null or undefined
            (0, common_1.assertParamExists)('createImplicitGrant', 'derivedRoleRuleCreate', derivedRoleRuleCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(derivedRoleRuleCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImplicitGrant: async (projId, envId, roleId, resourceId, derivedRoleRuleDelete, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('deleteImplicitGrant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('deleteImplicitGrant', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            (0, common_1.assertParamExists)('deleteImplicitGrant', 'roleId', roleId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('deleteImplicitGrant', 'resourceId', resourceId);
            // verify required parameter 'derivedRoleRuleDelete' is not null or undefined
            (0, common_1.assertParamExists)('deleteImplicitGrant', 'derivedRoleRuleDelete', derivedRoleRuleDelete);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(derivedRoleRuleDelete, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImplicitGrantsConditions: async (projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('updateImplicitGrantsConditions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('updateImplicitGrantsConditions', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('updateImplicitGrantsConditions', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            (0, common_1.assertParamExists)('updateImplicitGrantsConditions', 'roleId', roleId);
            // verify required parameter 'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings' is not null or undefined
            (0, common_1.assertParamExists)('updateImplicitGrantsConditions', 'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings', permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ImplicitGrantsApiAxiosParamCreator = ImplicitGrantsApiAxiosParamCreator;
/**
 * ImplicitGrantsApi - functional programming interface
 * @export
 */
const ImplicitGrantsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ImplicitGrantsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ImplicitGrantsApiFp = ImplicitGrantsApiFp;
/**
 * ImplicitGrantsApi - factory interface
 * @export
 */
const ImplicitGrantsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ImplicitGrantsApiFp)(configuration);
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options) {
            return localVarFp
                .createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options) {
            return localVarFp
                .deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options) {
            return localVarFp
                .updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ImplicitGrantsApiFactory = ImplicitGrantsApiFactory;
/**
 * ImplicitGrantsApi - object-oriented interface
 * @export
 * @class ImplicitGrantsApi
 * @extends {BaseAPI}
 */
class ImplicitGrantsApi extends base_1.BaseAPI {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {ImplicitGrantsApiCreateImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    createImplicitGrant(requestParameters, options) {
        return (0, exports.ImplicitGrantsApiFp)(this.configuration)
            .createImplicitGrant(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.derivedRoleRuleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {ImplicitGrantsApiDeleteImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    deleteImplicitGrant(requestParameters, options) {
        return (0, exports.ImplicitGrantsApiFp)(this.configuration)
            .deleteImplicitGrant(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.resourceId, requestParameters.derivedRoleRuleDelete, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    updateImplicitGrantsConditions(requestParameters, options) {
        return (0, exports.ImplicitGrantsApiFp)(this.configuration)
            .updateImplicitGrantsConditions(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ImplicitGrantsApi = ImplicitGrantsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXQtZ3JhbnRzLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9pbXBsaWNpdC1ncmFudHMtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBVzdGOzs7R0FHRztBQUNJLE1BQU0sa0NBQWtDLEdBQUcsVUFBVSxhQUE2QjtJQUN2RixPQUFPO1FBQ0w7Ozs7Ozs7Ozs7V0FVRztRQUNILG1CQUFtQixFQUFFLEtBQUssRUFDeEIsTUFBYyxFQUNkLEtBQWEsRUFDYixVQUFrQixFQUNsQixNQUFjLEVBQ2QscUJBQTRDLEVBQzVDLFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDhEQUE4RDtZQUM5RCxJQUFBLDBCQUFpQixFQUFDLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMzRCw2REFBNkQ7WUFDN0QsSUFBQSwwQkFBaUIsRUFBQyxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDekQsa0VBQWtFO1lBQ2xFLElBQUEsMEJBQWlCLEVBQUMscUJBQXFCLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ25FLDhEQUE4RDtZQUM5RCxJQUFBLDBCQUFpQixFQUFDLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMzRCw2RUFBNkU7WUFDN0UsSUFBQSwwQkFBaUIsRUFBQyxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3pGLE1BQU0sWUFBWSxHQUNoQix1RkFBdUY7aUJBQ3BGLE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1B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