"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditLogsApi = exports.AuditLogsApiFactory = exports.AuditLogsApiFp = exports.AuditLogsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
const AuditLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedAuditLog: async (projId, envId, logId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getDetailedAuditLog', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getDetailedAuditLog', 'envId', envId);
            // verify required parameter 'logId' is not null or undefined
            (0, common_1.assertParamExists)('getDetailedAuditLog', 'logId', logId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'log_id'}}`, encodeURIComponent(String(logId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listAuditLogs', 'envId', envId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (pdpId !== undefined) {
                localVarQueryParameter['pdp_id'] = pdpId;
            }
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (decision !== undefined) {
                localVarQueryParameter['decision'] = decision;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuditLogsApiAxiosParamCreator = AuditLogsApiAxiosParamCreator;
/**
 * AuditLogsApi - functional programming interface
 * @export
 */
const AuditLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuditLogsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailedAuditLog(projId, envId, logId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailedAuditLog(projId, envId, logId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.AuditLogsApiFp = AuditLogsApiFp;
/**
 * AuditLogsApi - factory interface
 * @export
 */
const AuditLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuditLogsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedAuditLog(projId, envId, logId, options) {
            return localVarFp
                .getDetailedAuditLog(projId, envId, logId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options) {
            return localVarFp
                .listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.AuditLogsApiFactory = AuditLogsApiFactory;
/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
class AuditLogsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get detailed audit log
     * @param {AuditLogsApiGetDetailedAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    getDetailedAuditLog(requestParameters, options) {
        return (0, exports.AuditLogsApiFp)(this.configuration)
            .getDetailedAuditLog(requestParameters.projId, requestParameters.envId, requestParameters.logId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Audit Logs
     * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    listAuditLogs(requestParameters, options) {
        return (0, exports.AuditLogsApiFp)(this.configuration)
            .listAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.decision, requestParameters.resources, requestParameters.tenant, requestParameters.action, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.sortBy, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AuditLogsApi = AuditLogsApi;
//# sourceMappingURL=data:application/json;base64,