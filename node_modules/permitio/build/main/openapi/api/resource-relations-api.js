"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceRelationsApi = exports.ResourceRelationsApiFactory = exports.ResourceRelationsApiFp = exports.ResourceRelationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ResourceRelationsApi - axios parameter creator
 * @export
 */
const ResourceRelationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a resource relation to another resource
         * @summary Create Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {RelationCreate} relationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRelation: async (projId, envId, resourceId, relationCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceRelation', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceRelation', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('createResourceRelation', 'resourceId', resourceId);
            // verify required parameter 'relationCreate' is not null or undefined
            (0, common_1.assertParamExists)('createResourceRelation', 'relationCreate', relationCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(relationCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a resource relation
         * @summary Delete Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRelation: async (projId, envId, resourceId, relationId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceRelation', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceRelation', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceRelation', 'resourceId', resourceId);
            // verify required parameter 'relationId' is not null or undefined
            (0, common_1.assertParamExists)('deleteResourceRelation', 'relationId', relationId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a resource relation
         * @summary Get Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRelation: async (projId, envId, resourceId, relationId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceRelation', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceRelation', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceRelation', 'resourceId', resourceId);
            // verify required parameter 'relationId' is not null or undefined
            (0, common_1.assertParamExists)('getResourceRelation', 'relationId', relationId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'relation_id'}}`, encodeURIComponent(String(relationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a resource relation to another resource
         * @summary List Resource Relations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRelations: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceRelations', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceRelations', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            (0, common_1.assertParamExists)('listResourceRelations', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ResourceRelationsApiAxiosParamCreator = ResourceRelationsApiAxiosParamCreator;
/**
 * ResourceRelationsApi - functional programming interface
 * @export
 */
const ResourceRelationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ResourceRelationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a resource relation to another resource
         * @summary Create Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {RelationCreate} relationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceRelation(projId, envId, resourceId, relationCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRelation(projId, envId, resourceId, relationCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes a resource relation
         * @summary Delete Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceRelation(projId, envId, resourceId, relationId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRelation(projId, envId, resourceId, relationId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a resource relation
         * @summary Get Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceRelation(projId, envId, resourceId, relationId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceRelation(projId, envId, resourceId, relationId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates a resource relation to another resource
         * @summary List Resource Relations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceRelations(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceRelations(projId, envId, resourceId, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ResourceRelationsApiFp = ResourceRelationsApiFp;
/**
 * ResourceRelationsApi - factory interface
 * @export
 */
const ResourceRelationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ResourceRelationsApiFp)(configuration);
    return {
        /**
         * Creates a resource relation to another resource
         * @summary Create Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {RelationCreate} relationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRelation(projId, envId, resourceId, relationCreate, options) {
            return localVarFp
                .createResourceRelation(projId, envId, resourceId, relationCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes a resource relation
         * @summary Delete Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRelation(projId, envId, resourceId, relationId, options) {
            return localVarFp
                .deleteResourceRelation(projId, envId, resourceId, relationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get a resource relation
         * @summary Get Resource Relation
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} relationId Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRelation(projId, envId, resourceId, relationId, options) {
            return localVarFp
                .getResourceRelation(projId, envId, resourceId, relationId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a resource relation to another resource
         * @summary List Resource Relations
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRelations(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceRelations(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ResourceRelationsApiFactory = ResourceRelationsApiFactory;
/**
 * ResourceRelationsApi - object-oriented interface
 * @export
 * @class ResourceRelationsApi
 * @extends {BaseAPI}
 */
class ResourceRelationsApi extends base_1.BaseAPI {
    /**
     * Creates a resource relation to another resource
     * @summary Create Resource Relation
     * @param {ResourceRelationsApiCreateResourceRelationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationsApi
     */
    createResourceRelation(requestParameters, options) {
        return (0, exports.ResourceRelationsApiFp)(this.configuration)
            .createResourceRelation(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.relationCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a resource relation
     * @summary Delete Resource Relation
     * @param {ResourceRelationsApiDeleteResourceRelationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationsApi
     */
    deleteResourceRelation(requestParameters, options) {
        return (0, exports.ResourceRelationsApiFp)(this.configuration)
            .deleteResourceRelation(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.relationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a resource relation
     * @summary Get Resource Relation
     * @param {ResourceRelationsApiGetResourceRelationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationsApi
     */
    getResourceRelation(requestParameters, options) {
        return (0, exports.ResourceRelationsApiFp)(this.configuration)
            .getResourceRelation(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.relationId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a resource relation to another resource
     * @summary List Resource Relations
     * @param {ResourceRelationsApiListResourceRelationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRelationsApi
     */
    listResourceRelations(requestParameters, options) {
        return (0, exports.ResourceRelationsApiFp)(this.configuration)
            .listResourceRelations(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ResourceRelationsApi = ResourceRelationsApi;
//# sourceMappingURL=data:application/json;base64,