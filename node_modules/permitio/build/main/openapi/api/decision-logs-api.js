"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecisionLogsApi = exports.DecisionLogsApiFactory = exports.DecisionLogsApiFp = exports.DecisionLogsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DecisionLogsApi - axios parameter creator
 * @export
 */
const DecisionLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpDecisionLogs: async (projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('listPdpDecisionLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('listPdpDecisionLogs', 'envId', envId);
            // verify required parameter 'pdpId' is not null or undefined
            (0, common_1.assertParamExists)('listPdpDecisionLogs', 'pdpId', pdpId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DecisionLogsApiAxiosParamCreator = DecisionLogsApiAxiosParamCreator;
/**
 * DecisionLogsApi - functional programming interface
 * @export
 */
const DecisionLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DecisionLogsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DecisionLogsApiFp = DecisionLogsApiFp;
/**
 * DecisionLogsApi - factory interface
 * @export
 */
const DecisionLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DecisionLogsApiFp)(configuration);
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options) {
            return localVarFp
                .listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.DecisionLogsApiFactory = DecisionLogsApiFactory;
/**
 * DecisionLogsApi - object-oriented interface
 * @export
 * @class DecisionLogsApi
 * @extends {BaseAPI}
 */
class DecisionLogsApi extends base_1.BaseAPI {
    /**
     *
     * @summary List PDP Decisions
     * @param {DecisionLogsApiListPdpDecisionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionLogsApi
     */
    listPdpDecisionLogs(requestParameters, options) {
        return (0, exports.DecisionLogsApiFp)(this.configuration)
            .listPdpDecisionLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.approved, requestParameters.resources, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DecisionLogsApi = DecisionLogsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaXNpb24tbG9ncy1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvZGVjaXNpb24tbG9ncy1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRzs7Ozs7O0FBRUgsa0RBQXFGO0FBRXJGLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2Isc0NBV21CO0FBQ25CLGFBQWE7QUFDYixrQ0FBNkY7QUFLN0Y7OztHQUdHO0FBQ0ksTUFBTSxnQ0FBZ0MsR0FBRyxVQUFVLGFBQTZCO0lBQ3JGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7O1dBZUc7UUFDSCxtQkFBbUIsRUFBRSxLQUFLLEVBQ3hCLE1BQWMsRUFDZCxLQUFhLEVBQ2IsS0FBYSxFQUNiLEtBQXFCLEVBQ3JCLFFBQWtCLEVBQ2xCLFNBQXlCLEVBQ3pCLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsSUFBQSwwQkFBaUIsRUFBQyxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0QsNkRBQTZEO1lBQzdELElBQUEsMEJBQWlCLEVBQUMscUJBQXFCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3pELDZEQUE2RDtZQUM3RCxJQUFBLDBCQUFpQixFQUFDLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN6RCxNQUFNLFlBQVksR0FBRyxvREFBb0Q7aUJBQ3RFLE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDM0QsT0FBTyxDQUFDLElBQUksUUFBUSxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsS0FBSyxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUM3RSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sSUFBQSw4QkFBcUIsRUFBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRSxJQUFJLEtBQUssRUFBRTtnQkFDVCxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDekM7WUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQzFCLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQzthQUMvQztZQUVELElBQUksU0FBUyxFQUFFO2dCQUNiLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxHQUFHLFNBQVMsQ0FBQzthQUNqRDtZQUVELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtnQkFDL0Isc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxhQUFhLENBQUM7YUFDMUQ7WUFFRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUN0RDtZQUVELElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDdEIsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ3ZDO1lBRUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUN6QixzQkFBc0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDOUM7WUFFRCxJQUFBLHdCQUFlLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDeEQsSUFBSSxzQkFBc0IsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNGLHNCQUFzQixDQUFDLE9BQU8saURBQ3pCLHVCQUF1QixHQUN2QixzQkFBc0IsR0FDdEIsT0FBTyxDQUFDLE9BQU8sQ0FDbkIsQ0FBQztZQUVGLE9BQU87Z0JBQ0wsR0FBRyxFQUFFLElBQUEscUJBQVksRUFBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbEdXLFFBQUEsZ0NBQWdDLG9DQWtHM0M7QUFFRjs7O0dBR0c7QUFDSSxNQUFNLGlCQUFpQixHQUFHLFVBQVUsYUFBNkI7SUFDdEUsTUFBTSx5QkFBeUIsR0FBRyxJQUFBLHdDQUFnQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7O1dBZUc7UUFDSCxLQUFLLENBQUMsbUJBQW1CLENBQ3ZCLE1BQWMsRUFDZCxLQUFhLEVBQ2IsS0FBYSxFQUNiLEtBQXFCLEVBQ3JCLFFBQWtCLEVBQ2xCLFNBQXlCLEVBQ3pCLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLElBQWEsRUFDYixPQUFnQixFQUNoQixPQUE0QjtZQUk1QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsbUJBQW1CLENBQzNFLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUNULGFBQWEsRUFDYixXQUFXLEVBQ1gsSUFBSSxFQUNKLE9BQU8sRUFDUCxPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sSUFBQSw4QkFBcUIsRUFBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWxEVyxRQUFBLGlCQUFpQixxQkFrRDVCO0FBRUY7OztHQUdHO0FBQ0ksTUFBTSxzQkFBc0IsR0FBRyxVQUNwQyxhQUE2QixFQUM3QixRQUFpQixFQUNqQixLQUFxQjtJQUVyQixNQUFNLFVBQVUsR0FBRyxJQUFBLHlCQUFpQixFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7O1dBZUc7UUFDSCxtQkFBbUIsQ0FDakIsTUFBYyxFQUNkLEtBQWEsRUFDYixLQUFhLEVBQ2IsS0FBcUIsRUFDckIsUUFBa0IsRUFDbEIsU0FBeUIsRUFDekIsYUFBc0IsRUFDdEIsV0FBb0IsRUFDcEIsSUFBYSxFQUNiLE9BQWdCLEVBQ2hCLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsbUJBQW1CLENBQ2xCLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUNULGFBQWEsRUFDYixXQUFXLEVBQ1gsSUFBSSxFQUNKLE9BQU8sRUFDUCxPQUFPLENBQ1I7aUJBQ0EsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFyRFcsUUFBQSxzQkFBc0IsMEJBcURqQztBQStFRjs7Ozs7R0FLRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxjQUFPO0lBQzFDOzs7Ozs7O09BT0c7SUFDSSxtQkFBbUIsQ0FDeEIsaUJBQTRELEVBQzVELE9BQTRCO1FBRTVCLE9BQU8sSUFBQSx5QkFBaUIsRUFBQyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQ3pDLG1CQUFtQixDQUNsQixpQkFBaUIsQ0FBQyxNQUFNLEVBQ3hCLGlCQUFpQixDQUFDLEtBQUssRUFDdkIsaUJBQWlCLENBQUMsS0FBSyxFQUN2QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLFFBQVEsRUFDMUIsaUJBQWlCLENBQUMsU0FBUyxFQUMzQixpQkFBaUIsQ0FBQyxhQUFhLEVBQy9CLGlCQUFpQixDQUFDLFdBQVcsRUFDN0IsaUJBQWlCLENBQUMsSUFBSSxFQUN0QixpQkFBaUIsQ0FBQyxPQUFPLEVBQ3pCLE9BQU8sQ0FDUjthQUNBLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBN0JELDBDQTZCQyJ9