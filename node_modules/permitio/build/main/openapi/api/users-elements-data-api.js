"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersElementsDataApi = exports.UsersElementsDataApiFactory = exports.UsersElementsDataApiFp = exports.UsersElementsDataApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UsersElementsDataApi - axios parameter creator
 * @export
 */
const UsersElementsDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign role to user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleCreate} elementsUserRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsAssignRoleToUser: async (projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsAssignRoleToUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsAssignRoleToUser', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsAssignRoleToUser', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('elementsAssignRoleToUser', 'userId', userId);
            // verify required parameter 'elementsUserRoleCreate' is not null or undefined
            (0, common_1.assertParamExists)('elementsAssignRoleToUser', 'elementsUserRoleCreate', elementsUserRoleCreate);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsUserRoleCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
         * @summary Create user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserCreate} elementsUserCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsCreateUser: async (projId, envId, elementsConfigId, elementsUserCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsCreateUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsCreateUser', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsCreateUser', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'elementsUserCreate' is not null or undefined
            (0, common_1.assertParamExists)('elementsCreateUser', 'elementsUserCreate', elementsUserCreate);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsUserCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsDeleteUser: async (projId, envId, elementsConfigId, userId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsDeleteUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsDeleteUser', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsDeleteUser', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('elementsDeleteUser', 'userId', userId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListRoles: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListRoles', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListRoles', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListRoles', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListUsers: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListUsers', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsListUsers', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign role from user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleRemove} elementsUserRoleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsUnassignRoleFromUser: async (projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('elementsUnassignRoleFromUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('elementsUnassignRoleFromUser', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('elementsUnassignRoleFromUser', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'userId' is not null or undefined
            (0, common_1.assertParamExists)('elementsUnassignRoleFromUser', 'userId', userId);
            // verify required parameter 'elementsUserRoleRemove' is not null or undefined
            (0, common_1.assertParamExists)('elementsUnassignRoleFromUser', 'elementsUserRoleRemove', elementsUserRoleRemove);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(elementsUserRoleRemove, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the embed_config.
         * @summary Set Config Active
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigActive: async (elementsConfigId, projId, envId, options = {}) => {
            // verify required parameter 'elementsConfigId' is not null or undefined
            (0, common_1.assertParamExists)('setConfigActive', 'elementsConfigId', elementsConfigId);
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('setConfigActive', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('setConfigActive', 'envId', envId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active`
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UsersElementsDataApiAxiosParamCreator = UsersElementsDataApiAxiosParamCreator;
/**
 * UsersElementsDataApi - functional programming interface
 * @export
 */
const UsersElementsDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UsersElementsDataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign role to user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleCreate} elementsUserRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
         * @summary Create user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserCreate} elementsUserCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delete user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsDeleteUser(projId, envId, elementsConfigId, userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsDeleteUser(projId, envId, elementsConfigId, userId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign role from user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleRemove} elementsUserRoleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the embed_config.
         * @summary Set Config Active
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setConfigActive(elementsConfigId, projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setConfigActive(elementsConfigId, projId, envId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.UsersElementsDataApiFp = UsersElementsDataApiFp;
/**
 * UsersElementsDataApi - factory interface
 * @export
 */
const UsersElementsDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UsersElementsDataApiFp)(configuration);
    return {
        /**
         * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign role to user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleCreate} elementsUserRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options) {
            return localVarFp
                .elementsAssignRoleToUser(projId, envId, elementsConfigId, userId, elementsUserRoleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
         * @summary Create user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserCreate} elementsUserCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options) {
            return localVarFp
                .elementsCreateUser(projId, envId, elementsConfigId, elementsUserCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsDeleteUser(projId, envId, elementsConfigId, userId, options) {
            return localVarFp
                .elementsDeleteUser(projId, envId, elementsConfigId, userId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options) {
            return localVarFp
                .elementsListRoles(projId, envId, elementsConfigId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the users defined within an environment.
         * @summary List users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options) {
            return localVarFp
                .elementsListUsers(projId, envId, elementsConfigId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign role from user
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} userId Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;).
         * @param {ElementsUserRoleRemove} elementsUserRoleRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options) {
            return localVarFp
                .elementsUnassignRoleFromUser(projId, envId, elementsConfigId, userId, elementsUserRoleRemove, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the embed_config.
         * @summary Set Config Active
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigActive(elementsConfigId, projId, envId, options) {
            return localVarFp
                .setConfigActive(elementsConfigId, projId, envId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.UsersElementsDataApiFactory = UsersElementsDataApiFactory;
/**
 * UsersElementsDataApi - object-oriented interface
 * @export
 * @class UsersElementsDataApi
 * @extends {BaseAPI}
 */
class UsersElementsDataApi extends base_1.BaseAPI {
    /**
     * Assigns a role to the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign role to user
     * @param {UsersElementsDataApiElementsAssignRoleToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsAssignRoleToUser(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsAssignRoleToUser(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.userId, requestParameters.elementsUserRoleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new user inside the Permit.io system, from that point forward you may run permission checks on that user.  If the user is already created: will return 200 instead of 201, and will return the existing user object in the response body.
     * @summary Create user
     * @param {UsersElementsDataApiElementsCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsCreateUser(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsCreateUser(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.elementsUserCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete user
     * @param {UsersElementsDataApiElementsDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsDeleteUser(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsDeleteUser(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the users defined within an environment.
     * @summary List roles
     * @param {UsersElementsDataApiElementsListRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsListRoles(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsListRoles(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the users defined within an environment.
     * @summary List users
     * @param {UsersElementsDataApiElementsListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsListUsers(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsListUsers(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unassigns the role from the user within the tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign role from user
     * @param {UsersElementsDataApiElementsUnassignRoleFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    elementsUnassignRoleFromUser(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .elementsUnassignRoleFromUser(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.userId, requestParameters.elementsUserRoleRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the embed_config.
     * @summary Set Config Active
     * @param {UsersElementsDataApiSetConfigActiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersElementsDataApi
     */
    setConfigActive(requestParameters, options) {
        return (0, exports.UsersElementsDataApiFp)(this.configuration)
            .setConfigActive(requestParameters.elementsConfigId, requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersElementsDataApi = UsersElementsDataApi;
//# sourceMappingURL=data:application/json;base64,