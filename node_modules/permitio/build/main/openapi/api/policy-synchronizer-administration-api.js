"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicySynchronizerAdministrationApi = exports.PolicySynchronizerAdministrationApiFactory = exports.PolicySynchronizerAdministrationApiFp = exports.PolicySynchronizerAdministrationApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PolicySynchronizerAdministrationApi - axios parameter creator
 * @export
 */
const PolicySynchronizerAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySynchronizerAdministration: async (message, chunkSize, chunkCooldown, options = {}) => {
            // verify required parameter 'message' is not null or undefined
            (0, common_1.assertParamExists)('policySynchronizerAdministration', 'message', message);
            const localVarPath = `/v2/internal_sysadmin/policy-sync/regenerate-environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (chunkSize !== undefined) {
                localVarQueryParameter['chunk_size'] = chunkSize;
            }
            if (chunkCooldown !== undefined) {
                localVarQueryParameter['chunk_cooldown'] = chunkCooldown;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(message, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PolicySynchronizerAdministrationApiAxiosParamCreator = PolicySynchronizerAdministrationApiAxiosParamCreator;
/**
 * PolicySynchronizerAdministrationApi - functional programming interface
 * @export
 */
const PolicySynchronizerAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PolicySynchronizerAdministrationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policySynchronizerAdministration(message, chunkSize, chunkCooldown, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policySynchronizerAdministration(message, chunkSize, chunkCooldown, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.PolicySynchronizerAdministrationApiFp = PolicySynchronizerAdministrationApiFp;
/**
 * PolicySynchronizerAdministrationApi - factory interface
 * @export
 */
const PolicySynchronizerAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PolicySynchronizerAdministrationApiFp)(configuration);
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySynchronizerAdministration(message, chunkSize, chunkCooldown, options) {
            return localVarFp.policySynchronizerAdministration(message, chunkSize, chunkCooldown, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PolicySynchronizerAdministrationApiFactory = PolicySynchronizerAdministrationApiFactory;
/**
 * PolicySynchronizerAdministrationApi - object-oriented interface
 * @export
 * @class PolicySynchronizerAdministrationApi
 * @extends {BaseAPI}
 */
class PolicySynchronizerAdministrationApi extends base_1.BaseAPI {
    /**
     * Push policy synchronizer update to all environments in the vc organization
     * @summary Regenerate environments
     * @param {PolicySynchronizerAdministrationApiPolicySynchronizerAdministrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicySynchronizerAdministrationApi
     */
    policySynchronizerAdministration(requestParameters, options) {
        return (0, exports.PolicySynchronizerAdministrationApiFp)(this.configuration).policySynchronizerAdministration(requestParameters.message, requestParameters.chunkSize, requestParameters.chunkCooldown, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PolicySynchronizerAdministrationApi = PolicySynchronizerAdministrationApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LXN5bmNocm9uaXplci1hZG1pbmlzdHJhdGlvbi1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvcG9saWN5LXN5bmNocm9uaXplci1hZG1pbmlzdHJhdGlvbi1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRzs7Ozs7O0FBR0gsa0RBQXFGO0FBRXJGLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2Isc0NBQTZOO0FBQzdOLGFBQWE7QUFDYixrQ0FBNkY7QUFLN0Y7OztHQUdHO0FBQ0ksTUFBTSxvREFBb0QsR0FBRyxVQUFVLGFBQTZCO0lBQ3ZHLE9BQU87UUFDSDs7Ozs7Ozs7V0FRRztRQUNILGdDQUFnQyxFQUFFLEtBQUssRUFBRSxPQUFnQixFQUFFLFNBQWtCLEVBQUUsYUFBc0IsRUFBRSxVQUE4QixFQUFFLEVBQXdCLEVBQUU7WUFDN0osK0RBQStEO1lBQy9ELElBQUEsMEJBQWlCLEVBQUMsa0NBQWtDLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQ3pFLE1BQU0sWUFBWSxHQUFHLDJEQUEyRCxDQUFDO1lBQ2pGLG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNmLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQzNDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLEtBQUssSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFDLENBQUM7WUFDNUUsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFN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