"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkOperationsApi = exports.BulkOperationsApiFactory = exports.BulkOperationsApiFp = exports.BulkOperationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BulkOperationsApi - axios parameter creator
 * @export
 */
const BulkOperationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreateBulkOperation} tenantCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants: async (projId, envId, tenantCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'envId', envId);
            // verify required parameter 'tenantCreateBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'tenantCreateBulkOperation', tenantCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tenantCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserCreateBulkOperation} userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers: async (projId, envId, userCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'envId', envId);
            // verify required parameter 'userCreateBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'userCreateBulkOperation', userCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantDeleteBulkOperation} tenantDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants: async (projId, envId, tenantDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'envId', envId);
            // verify required parameter 'tenantDeleteBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'tenantDeleteBulkOperation', tenantDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tenantDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserDeleteBulkOperation} userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers: async (projId, envId, userDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'envId', envId);
            // verify required parameter 'userDeleteBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'userDeleteBulkOperation', userDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserReplaceBulkOperation} userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers: async (projId, envId, userReplaceBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'envId', envId);
            // verify required parameter 'userReplaceBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'userReplaceBulkOperation', userReplaceBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userReplaceBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BulkOperationsApiAxiosParamCreator = BulkOperationsApiAxiosParamCreator;
/**
 * BulkOperationsApi - functional programming interface
 * @export
 */
const BulkOperationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BulkOperationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreateBulkOperation} tenantCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateTenants(projId, envId, tenantCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(projId, envId, tenantCreateBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserCreateBulkOperation} userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(projId, envId, userCreateBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantDeleteBulkOperation} tenantDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteTenants(projId, envId, tenantDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(projId, envId, tenantDeleteBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserDeleteBulkOperation} userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserReplaceBulkOperation} userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.BulkOperationsApiFp = BulkOperationsApiFp;
/**
 * BulkOperationsApi - factory interface
 * @export
 */
const BulkOperationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BulkOperationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantCreateBulkOperation} tenantCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants(projId, envId, tenantCreateBulkOperation, options) {
            return localVarFp
                .bulkCreateTenants(projId, envId, tenantCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserCreateBulkOperation} userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            return localVarFp
                .bulkCreateUsers(projId, envId, userCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {TenantDeleteBulkOperation} tenantDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants(projId, envId, tenantDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteTenants(projId, envId, tenantDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserDeleteBulkOperation} userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {UserReplaceBulkOperation} userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            return localVarFp
                .bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.BulkOperationsApiFactory = BulkOperationsApiFactory;
/**
 * BulkOperationsApi - object-oriented interface
 * @export
 * @class BulkOperationsApi
 * @extends {BaseAPI}
 */
class BulkOperationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {BulkOperationsApiBulkCreateTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateTenants(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkCreateTenants(requestParameters.projId, requestParameters.envId, requestParameters.tenantCreateBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Create Users
     * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateUsers(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkCreateUsers(requestParameters.projId, requestParameters.envId, requestParameters.userCreateBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteTenants(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkDeleteTenants(requestParameters.projId, requestParameters.envId, requestParameters.tenantDeleteBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Users
     * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteUsers(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkDeleteUsers(requestParameters.projId, requestParameters.envId, requestParameters.userDeleteBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Replace Users
     * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkReplaceUsers(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkReplaceUsers(requestParameters.projId, requestParameters.envId, requestParameters.userReplaceBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.BulkOperationsApi = BulkOperationsApi;
//# sourceMappingURL=data:application/json;base64,