"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const logger_1 = require("./logger");
const index_1 = require("./index");
const test = ava_1.default;
const printBreak = () => {
    console.log('\n\n ----------- \n\n');
};
test.before((t) => {
    // config
    const defaultPDPAddress = process.env.CLOUD_PDP === 'true' ? 'https://cloudpdp.api.permit.io' : 'http://localhost:7766';
    const defaultApiAddress = process.env.API_TIER === 'prod' ? 'https://api.permit.io' : 'http://localhost:8000';
    const token = process.env.PDP_API_KEY || '';
    const pdpAddress = process.env.PDP_URL || defaultPDPAddress;
    const apiUrl = process.env.PDP_CONTROL_PLANE || defaultApiAddress;
    if (!token) {
        t.fail('PDP_API_KEY is not configured, test cannot run!');
    }
    t.context.permit = new index_1.Permit({
        token,
        pdp: pdpAddress,
        apiUrl,
        log: {
            level: 'debug',
        },
    });
    t.context.logger = logger_1.LoggerFactory.createLogger(t.context.permit.config);
});
test('Permission check e2e test', async (t) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        logger.info('initial setup of objects');
        const document = await permit.api.resources.create({
            key: 'document',
            name: 'Document',
            urn: 'prn:gdrive:document',
            description: 'google drive document',
            actions: {
                create: {},
                read: {},
                update: {},
                delete: {},
            },
            attributes: {
                private: {
                    type: 'bool',
                    description: 'whether the document is private',
                },
            },
        });
        // verify create output
        t.not(document, null);
        t.not(document.id, null);
        t.is(document.key, 'document');
        t.is(document.name, 'Document');
        t.is(document.description, 'google drive document');
        t.is(document.urn, 'prn:gdrive:document');
        t.is(Object.keys((_a = document.actions) !== null && _a !== void 0 ? _a : {}).length, 4);
        t.not(((_b = document.actions) !== null && _b !== void 0 ? _b : {})['create'], undefined);
        t.not(((_c = document.actions) !== null && _c !== void 0 ? _c : {})['read'], undefined);
        t.not(((_d = document.actions) !== null && _d !== void 0 ? _d : {})['update'], undefined);
        t.not(((_e = document.actions) !== null && _e !== void 0 ? _e : {})['delete'], undefined);
        // verify list output
        const resources = await permit.api.resources.list();
        t.is(resources.length, 1);
        t.is(resources[0].id, document.id);
        t.is(resources[0].key, document.key);
        t.is(resources[0].name, document.name);
        t.is(resources[0].description, document.description);
        t.is(resources[0].urn, document.urn);
        // create admin role
        const admin = await permit.api.roles.create({
            key: 'admin',
            name: 'Admin',
            description: 'an admin role',
            permissions: ['document:create', 'document:read'],
        });
        t.not(admin, null);
        t.is(admin.key, 'admin');
        t.is(admin.name, 'Admin');
        t.is(admin.description, 'an admin role');
        t.not(admin.permissions, undefined);
        t.true((_f = admin.permissions) === null || _f === void 0 ? void 0 : _f.includes('document:create'));
        t.true((_g = admin.permissions) === null || _g === void 0 ? void 0 : _g.includes('document:read'));
        // create viewer role
        const viewer = await permit.api.roles.create({
            key: 'viewer',
            name: 'Viewer',
            description: 'an viewer role',
        });
        t.not(viewer, null);
        t.is(viewer.key, 'viewer');
        t.is(viewer.name, 'Viewer');
        t.is(viewer.description, 'an viewer role');
        t.not(viewer.permissions, undefined);
        t.is((_h = viewer.permissions) === null || _h === void 0 ? void 0 : _h.length, 0);
        // assign permissions to roles
        const assignedViewer = await permit.api.roles.assignPermissions('viewer', ['document:read']);
        t.is(assignedViewer.key, 'viewer');
        t.is((_j = assignedViewer.permissions) === null || _j === void 0 ? void 0 : _j.length, 1);
        t.true((_k = assignedViewer.permissions) === null || _k === void 0 ? void 0 : _k.includes('document:read'));
        t.false((_l = assignedViewer.permissions) === null || _l === void 0 ? void 0 : _l.includes('document:create'));
        // create a tenant
        const tenant = await permit.api.tenants.create({
            key: 'tesla',
            name: 'Tesla Inc',
            description: 'The car company',
        });
        t.is(tenant.key, 'tesla');
        t.is(tenant.name, 'Tesla Inc');
        t.is(tenant.description, 'The car company');
        t.is(tenant.attributes, null);
        // create a user
        const { user } = await permit.api.users.sync({
            key: 'auth0|elon',
            email: 'elonmusk@tesla.com',
            first_name: 'Elon',
            last_name: 'Musk',
            attributes: {
                age: 50,
                favoriteColor: 'red',
            },
        });
        t.is(user.key, 'auth0|elon');
        t.is(user.email, 'elonmusk@tesla.com');
        t.is(user.first_name, 'Elon');
        t.is(user.last_name, 'Musk');
        t.is(Object.keys((_m = user.attributes) !== null && _m !== void 0 ? _m : {}).length, 2);
        t.is(user.attributes['age'], 50);
        t.is(user.attributes['favoriteColor'], 'red');
        // assign role to user in tenant
        const ra = await permit.api.users.assignRole({
            user: 'auth0|elon',
            role: 'viewer',
            tenant: 'tesla',
        });
        t.is(ra.user_id, user.id);
        t.is(ra.role_id, viewer.id);
        t.is(ra.tenant_id, tenant.id);
        // TODO: fix BUG in API
        // t.is(ra.user, user.key);
        t.is(ra.user, user.email);
        t.is(ra.role, viewer.key);
        t.is(ra.tenant, tenant.key);
        logger.info('sleeping 2 seconds before permit.check() to make sure all writes propagated from cloud to PDP');
        await new Promise((resolve) => setTimeout(resolve, 2000));
        // positive permission check (will be true because elon is a viewer, and a viewer can read a document)
        logger.info('testing positive permission check');
        const resourceAttributes = { secret: true };
        t.true(await permit.check('auth0|elon', 'read', 
        // a 'document' belonging to 'tesla' (ownership based on tenant)
        { type: 'document', tenant: 'tesla', attributes: resourceAttributes }));
        printBreak();
        logger.info('testing positive permission check with complete user object');
        t.true(await permit.check(user, 'read', { type: document.key, tenant: tenant.key }));
        printBreak();
        // negative permission check (will be false because a viewer cannot create a document)
        logger.info('testing negative permission check');
        t.false(await permit.check(user, 'create', { type: document.key, tenant: tenant.key }));
        printBreak();
        logger.info('changing the user roles');
        // change the user role - assign admin role
        await permit.api.users.assignRole({
            user: user.key,
            role: admin.key,
            tenant: tenant.key,
        });
        // change the user role - remove viewer role
        await permit.api.users.unassignRole({
            user: user.key,
            role: viewer.key,
            tenant: tenant.key,
        });
        // list user roles in all tenants
        const assignedRoles = await permit.api.users.getAssignedRoles({ user: user.key });
        t.is(assignedRoles.length, 1);
        t.is(assignedRoles[0].user_id, user.id);
        t.is(assignedRoles[0].role_id, admin.id);
        t.is(assignedRoles[0].tenant_id, tenant.id);
        logger.info('sleeping 2 seconds before permit.check() to make sure all writes propagated from cloud to PDP');
        await new Promise((resolve) => setTimeout(resolve, 2000));
        // run the same negative permission check again, this time it's true
        logger.info('testing previously negative permission check, should now be positive');
        t.true(await permit.check(user, 'create', { type: document.key, tenant: tenant.key }));
        printBreak();
    }
    catch (error) {
        logger.error(`GOT ERROR: ${error}`);
        t.fail(`got error: ${error}`);
    }
    finally {
        // cleanup
        try {
            await permit.api.users.delete('auth0|elon');
            await permit.api.tenants.delete('tesla');
            await permit.api.roles.delete('admin');
            await permit.api.roles.delete('viewer');
            await permit.api.resources.delete('document');
            t.is((await permit.api.resources.list()).length, 0);
            t.is((await permit.api.roles.list()).length, 0);
            t.is((await permit.api.tenants.list()).length, 1); // the default tenant
            t.is((await permit.api.users.list()).data.length, 0);
        }
        catch (error) {
            logger.error(`GOT ERROR: ${error}`);
            t.fail(`got error: ${error}`);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,