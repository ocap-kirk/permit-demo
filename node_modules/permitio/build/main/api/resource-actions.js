"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceActionsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * API client for interacting with the Resource Actions API.
 */
class ResourceActionsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the ResourceActionsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.actionsApi = new openapi_1.ResourceActionsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of all actions that are defined for a given resource.
     * @param params - pagination and filtering params, @see {@link IListActions}
     * @returns A promise that resolves to an array of ResourceActionRead objects representing the actions.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { resourceKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.actionsApi.listResourceActions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an action based on the resource key and the action key.
     *
     * @param resourceKey - The resource key.
     * @param actionKey - The action key.
     * @returns A promise that resolves to a ResourceActionRead object representing the action.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(resourceKey, actionKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.actionsApi.getResourceAction(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionId: actionKey }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an action based on the resource key and the action key.
     * Alias for the {@link get} method.
     *
     * @param resourceKey - The resource key.
     * @param actionKey - The action key.
     * @returns A promise that resolves to a ResourceActionRead object representing the action.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(resourceKey, actionKey) {
        return await this.get(resourceKey, actionKey);
    }
    /**
     * Retrieves an action based on the resource ID and the action ID.
     * Alias for the {@link get} method.
     *
     * @param resourceId - The resource ID.
     * @param actionId - The action ID.
     * @returns A promise that resolves to a ResourceActionRead object representing the action.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(resourceId, actionId) {
        return await this.get(resourceId, actionId);
    }
    /**
     * Creates a new action.
     *
     * @param resourceKey - The resource key.
     * @param actionData - The action data.
     * @returns A promise that resolves to a ResourceActionRead object representing the created action.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(resourceKey, actionData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.actionsApi.createResourceAction(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, resourceActionCreate: actionData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates an existing action.
     *
     * @param resourceKey - The resource key.
     * @param actionKey - The key of the action to modify.
     * @param actionData - The data for updating the action.
     * @returns A promise that resolves to a ResourceActionRead object representing the updated action.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(resourceKey, actionKey, actionData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.actionsApi.updateResourceAction(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionId: actionKey, resourceActionUpdate: actionData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a action based on the resource key and action key.
     * @param resourceKey - The resource key.
     * @param actionKey - The action key.
     * @returns A promise that resolves when the action is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(resourceKey, actionKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            await this.actionsApi.deleteResourceAction(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionId: actionKey }));
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.ResourceActionsApi = ResourceActionsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVzb3VyY2UtYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FLb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUFvRSxDQUFDLHdEQUF3RDtBQUM3SCx1Q0FBeUYsQ0FBQyx3REFBd0Q7QUE4RmxKOztHQUVHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxvQkFBYTtJQUduRDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksNEJBQXlCLENBQzdDLElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsZ0JBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQW9CO1FBQ3BDLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3hELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsaUNBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxVQUFVLEVBQUUsV0FBVyxFQUN2QixJQUFJO2dCQUNKLE9BQU8sSUFDUCxDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNa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