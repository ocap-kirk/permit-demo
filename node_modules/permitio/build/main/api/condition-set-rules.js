"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionSetRulesApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
class ConditionSetRulesApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the ConditionSetRulesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.setRules = new openapi_1.ConditionSetRulesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of condition set rules based on the specified parameters.
     *
     * @param params - parameters for filtering and pagination, @see {@link IListConditionSetRules}
     * @returns A promise that resolves to an array of condition set rules.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        const { userSetKey, permissionKey, resourceSetKey, page = 1, perPage = 100 } = params;
        try {
            return (await this.setRules.listSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userSet: userSetKey, permission: permissionKey, resourceSet: resourceSetKey, page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new condition set rule.
     *
     * @param rule - The condition set rule to create.
     * @returns A promise that resolves to the created condition set rule.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(rule) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.setRules.assignSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetRuleCreate: rule }))).data[0];
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a condition set rule.
     *
     * @param rule - The condition set rule to delete.
     * @returns A promise that resolves when the condition set rule is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(rule) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.setRules.unassignSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetRuleRemove: rule }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.ConditionSetRulesApi = ConditionSetRulesApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXNldC1ydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvY29uZGl0aW9uLXNldC1ydWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FLb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUFvRSxDQUFDLHdEQUF3RDtBQUM3SCx1Q0FBeUYsQ0FBQyx3REFBd0Q7QUF1RGxKLE1BQWEsb0JBQXFCLFNBQVEsb0JBQWE7SUFHckQ7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDhCQUEyQixDQUM3QyxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLGdCQUFTLEVBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBOEI7UUFDOUMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDdEYsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLGlDQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsT0FBTyxFQUFFLFVBQVUsRUFDbkIsVUFBVSxFQUFFLGFBQWEsRUFDekIsV0FBVyxFQUFFLGNBQWMsRUFDM0IsSUFBSTtnQkFDSixPQUFPLElBQ1AsQ0FDSCxDQUFDLElBQUksQ0FBQztTQUNSO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQTRCO1FBQzlDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsaUNBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxzQkFBc0IsRUFBRSxJQUFJLElBQzVCLENBQ0gsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUE0QjtRQUM5QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLGlDQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsc0JBQXNCLEVBQUUsSUFBSSxJQUM1QixDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0NBQ0Y7QUExRkQsb0RBMEZDIn0=