"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiContext = exports.PermitContextChangeError = exports.PermitContextError = exports.ApiContextLevel = exports.API_ACCESS_LEVELS = exports.ApiKeyLevel = void 0;
/**
 * The `ApiKeyLevel` enum represents the access level of a Permit API Key.
 */
var ApiKeyLevel;
(function (ApiKeyLevel) {
    /**
     * Wait for initialization of the API key.
     */
    ApiKeyLevel["WAIT_FOR_INIT"] = "WAIT_FOR_INIT";
    /**
     * Organization level API key authorization.
     * Using an API key of this scope will allow the SDK user to modify
     * all projects and environments under the organization / workspace.
     */
    ApiKeyLevel["ORGANIZATION_LEVEL_API_KEY"] = "ORGANIZATION_LEVEL_API_KEY";
    /**
     * Project level API key authorization.
     * Using an API key of this scope will allow the SDK user to modify
     * a single project and the environments under that project.
     */
    ApiKeyLevel["PROJECT_LEVEL_API_KEY"] = "PROJECT_LEVEL_API_KEY";
    /**
     * Environment level API key authorization.
     * Using an API key of this scope will allow the SDK user to modify
     * a single Permit environment.
     */
    ApiKeyLevel["ENVIRONMENT_LEVEL_API_KEY"] = "ENVIRONMENT_LEVEL_API_KEY";
})(ApiKeyLevel = exports.ApiKeyLevel || (exports.ApiKeyLevel = {}));
exports.API_ACCESS_LEVELS = [
    ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY,
    ApiKeyLevel.PROJECT_LEVEL_API_KEY,
    ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY,
];
var ApiContextLevel;
(function (ApiContextLevel) {
    /**
     * Signifies that the context is not set yet.
     */
    ApiContextLevel[ApiContextLevel["WAIT_FOR_INIT"] = 0] = "WAIT_FOR_INIT";
    /**
     * When running in this context level, the SDK knows the current organization.
     */
    ApiContextLevel[ApiContextLevel["ORGANIZATION"] = 1] = "ORGANIZATION";
    /**
     * When running in this context level, the SDK knows the current organization and project.
     */
    ApiContextLevel[ApiContextLevel["PROJECT"] = 2] = "PROJECT";
    /**
     * When running in this context level, the SDK knows the current organization, project and environment.
     */
    ApiContextLevel[ApiContextLevel["ENVIRONMENT"] = 3] = "ENVIRONMENT";
})(ApiContextLevel = exports.ApiContextLevel || (exports.ApiContextLevel = {}));
/**
 * The `PermitContextError` class represents an error that occurs when an API method
 * is called with insufficient context (not knowing in what environment, project or
 * organization the API call is being made).
 * Some of the input for the API method is provided via the SDK context.
 * If the context is missing some data required for a method - the API call will fail.
 */
class PermitContextError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PermitContextError = PermitContextError;
/**
 * The `PermitContextChangeError` will be thrown when the user is trying to set the
 * SDK context to an object that the current API Key cannot access (and if allowed,
 * such API calls will result in 401). Instead, the SDK throws this exception.
 */
class PermitContextChangeError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PermitContextChangeError = PermitContextChangeError;
/**
 * The `ApiContext` class represents the required known context for an API method.
 * Since the Permit API hierarchy is deeply nested, it is less convenient to specify
 * the full object hierarchy in every request.
 * For example, in order to list roles, the user needs to specify the (id or key) of the:
 * - the org
 * - the project
 * - then environment
 * in which the roles are located under.
 * Instead, the SDK can "remember" the current context and "auto-complete" the details
 * from that context.
 * We then get this kind of experience:
 * ```
 * await permit.api.roles.list()
 * ```
 * We can only run this function if the current context already knows the org, project,
 * and environments that we want to run under, and that is why this method assumes
 * we are running under a `ApiContextLevel.ENVIRONMENT` context.
 */
class ApiContext {
    constructor() {
        this._level = ApiKeyLevel.WAIT_FOR_INIT;
        this._permittedOrganization = null;
        this._permittedProject = null;
        this._permittedEnvironment = null;
        this._contextLevel = ApiContextLevel.WAIT_FOR_INIT;
        this._organization = null;
        this._project = null;
        this._environment = null;
    }
    /**
     * Do not call this method directly!
     */
    _saveApiKeyAccessibleScope(org, project, environment) {
        this._permittedOrganization = org; // cannot be null
        if (project && environment) {
            this._permittedProject = project;
            this._permittedEnvironment = environment;
            this._level = ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY;
        }
        else if (project) {
            this._permittedProject = project;
            this._permittedEnvironment = null;
            this._level = ApiKeyLevel.PROJECT_LEVEL_API_KEY;
        }
        else {
            this._permittedProject = null;
            this._permittedEnvironment = null;
            this._level = ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY;
        }
    }
    /**
     * Get the current API key access level.
     */
    get permittedAccessLevel() {
        return this._level;
    }
    /**
     * Get the current API key level.
     * @deprecated replaced with permit.config.apiContext.permittedAccessLevel
     */
    get level() {
        return this._level;
    }
    /**
     * Get the current SDK context level.
     */
    get contextLevel() {
        return this._contextLevel;
    }
    /**
     * Get the current organization in the context.
     */
    get organization() {
        return this._organization;
    }
    /**
     * Get the current project in the context.
     */
    get project() {
        return this._project;
    }
    /**
     * Get the current environment in the context.
     */
    get environment() {
        return this._environment;
    }
    verifyCanAccessOrg(org) {
        if (org !== this._permittedOrganization) {
            throw new PermitContextChangeError(`You cannot set an SDK context with org '${org}' due to insufficient API Key permissions`);
        }
    }
    verifyCanAccessProject(org, project) {
        this.verifyCanAccessOrg(org);
        if (this._permittedProject !== null && project !== this._permittedProject) {
            throw new PermitContextChangeError(`You cannot set an SDK context with project '${project}' due to insufficient API Key permissions`);
        }
    }
    verifyCanAccessEnvironment(org, project, environment) {
        this.verifyCanAccessProject(org, project);
        if (this._permittedEnvironment !== null && environment !== this._permittedEnvironment) {
            throw new PermitContextChangeError(`You cannot set an SDK context with environment '${environment}' due to insufficient API Key permissions`);
        }
    }
    /**
     * Set the context to organization level.
     * @param org The organization key.
     */
    setOrganizationLevelContext(org) {
        this.verifyCanAccessOrg(org);
        this._contextLevel = ApiContextLevel.ORGANIZATION;
        this._organization = org;
        this._project = null;
        this._environment = null;
    }
    /**
     * Set the context to project level.
     * @param org The organization key.
     * @param project The project key.
     */
    setProjectLevelContext(org, project) {
        this.verifyCanAccessProject(org, project);
        this._contextLevel = ApiContextLevel.PROJECT;
        this._organization = org;
        this._project = project;
        this._environment = null;
    }
    /**
     * Set the context to environment level.
     * @param org The organization key.
     * @param project The project key.
     * @param environment The environment key.
     */
    setEnvironmentLevelContext(org, project, environment) {
        this.verifyCanAccessEnvironment(org, project, environment);
        this._contextLevel = ApiContextLevel.ENVIRONMENT;
        this._organization = org;
        this._project = project;
        this._environment = environment;
    }
    /**
     * Get the API project and environment parameters from an environment-level context.
     * @returns An object containing the project and environment IDs.
     * @throws {@link PermitContextError} If the API context is not set to environment level or the project or environment is null.
     */
    get environmentContext() {
        if (this._level !== ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY ||
            this._project === null ||
            this._environment === null) {
            throw new PermitContextError(`You cannot get environment context, current api context is: ${this._level.toString()}`);
        }
        return {
            projId: this._project,
            envId: this._environment,
        };
    }
}
exports.ApiContext = ApiContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILElBQVksV0EwQlg7QUExQkQsV0FBWSxXQUFXO0lBQ3JCOztPQUVHO0lBQ0gsOENBQStCLENBQUE7SUFFL0I7Ozs7T0FJRztJQUNILHdFQUF5RCxDQUFBO0lBRXpEOzs7O09BSUc7SUFDSCw4REFBK0MsQ0FBQTtJQUUvQzs7OztPQUlHO0lBQ0gsc0VBQXVELENBQUE7QUFDekQsQ0FBQyxFQTFCVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQTBCdEI7QUFFWSxRQUFBLGlCQUFpQixHQUFrQjtJQUM5QyxXQUFXLENBQUMsMEJBQTBCO0lBQ3RDLFdBQVcsQ0FBQyxxQkFBcUI7SUFDakMsV0FBVyxDQUFDLHlCQUF5QjtDQUN0QyxDQUFDO0FBRUYsSUFBWSxlQW9CWDtBQXBCRCxXQUFZLGVBQWU7SUFDekI7O09BRUc7SUFDSCx1RUFBaUIsQ0FBQTtJQUVqQjs7T0FFRztJQUNILHFFQUFnQixDQUFBO0lBRWhCOztPQUVHO0lBQ0gsMkRBQVcsQ0FBQTtJQUVYOztPQUVHO0lBQ0gsbUVBQWUsQ0FBQTtBQUNqQixDQUFDLEVBcEJXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBb0IxQjtBQUVEOzs7Ozs7R0FNRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsS0FBSztJQUMzQyxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELGdEQUlDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQWEsd0JBQXlCLFNBQVEsS0FBSztJQUNqRCxZQUFZLE9BQWU7UUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUpELDREQUlDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILE1BQWEsVUFBVTtJQWFyQjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQztRQUN4QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUVsQyxJQUFJLENBQUMsYUFBYSxHQUFHLGVBQWUsQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMEJBQTBCLENBQUMsR0FBVyxFQUFFLE9BQWdCLEVBQUUsV0FBb0I7UUFDbkYsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQjtRQUVwRCxJQUFJLE9BQU8sSUFBSSxXQUFXLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztZQUNqQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsV0FBVyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLHlCQUF5QixDQUFDO1NBQ3JEO2FBQU0sSUFBSSxPQUFPLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztZQUNqQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLHFCQUFxQixDQUFDO1NBQ2pEO2FBQU07WUFDTCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsMEJBQTBCLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLG9CQUFvQjtRQUM3QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsWUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFdBQVc7UUFDcEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxHQUFXO1FBQ3BDLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUN2QyxNQUFNLElBQUksd0JBQXdCLENBQ2hDLDJDQUEyQyxHQUFHLDJDQUEyQyxDQUMxRixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRU8sc0JBQXNCLENBQUMsR0FBVyxFQUFFLE9BQWU7UUFDekQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksSUFBSSxDQUFDLGlCQUFpQixLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pFLE1BQU0sSUFBSSx3QkFBd0IsQ0FDaEMsK0NBQStDLE9BQU8sMkNBQTJDLENBQ2xHLENBQUM7U0FDSDtJQUNILENBQUM7SUFFTywwQkFBMEIsQ0FBQyxHQUFXLEVBQUUsT0FBZSxFQUFFLFdBQW1CO1FBQ2xGLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLENBQUMscUJBQXFCLEtBQUssSUFBSSxJQUFJLFdBQVcsS0FBSyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDckYsTUFBTSxJQUFJLHdCQUF3QixDQUNoQyxtREFBbUQsV0FBVywyQ0FBMkMsQ0FDMUcsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNJLDJCQUEyQixDQUFDLEdBQVc7UUFDNUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztRQUNsRCxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHNCQUFzQixDQUFDLEdBQVcsRUFBRSxPQUFlO1FBQ3hELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQzdDLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLDBCQUEwQixDQUFDLEdBQVcsRUFBRSxPQUFlLEVBQUUsV0FBbUI7UUFDakYsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO1FBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBVyxrQkFBa0I7UUFDM0IsSUFDRSxJQUFJLENBQUMsTUFBTSxLQUFLLFdBQVcsQ0FBQyx5QkFBeUI7WUFDckQsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJO1lBQ3RCLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxFQUMxQjtZQUNBLE1BQU0sSUFBSSxrQkFBa0IsQ0FDMUIsK0RBQStELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDeEYsQ0FBQztTQUNIO1FBQ0QsT0FBTztZQUNMLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNyQixLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDekIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTlLRCxnQ0E4S0MifQ==