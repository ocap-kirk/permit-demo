"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipTuplesApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base");
const context_1 = require("./context");
/**
 * The RelationshipTuplesApi class provides methods for interacting with Role createments.
 */
class RelationshipTuplesApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the RelationshipTuplesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.relationshipTuples = new openapi_1.RelationshipTuplesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of role createments based on the specified filters.
     *
     * @param params - The filters and pagination options for listing role createments.
     * @returns A promise that resolves with an array of role createments.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        // TODO: add filters: subject, relation, object
        const { page = 1, perPage = 100, subject, object, relation, tenant } = params;
        try {
            return (await this.relationshipTuples.listRelationshipTuples(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { page,
                perPage,
                tenant,
                subject,
                relation,
                object }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new relationship tuple, that states that a relationship (of type: relation)
     * exists between two resource instances: the subject and the object.
     *
     * @param tuple - The tuple to create
     * @returns A promise that resolves to the created relationship tuple.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(tuple) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.createRelationshipTuple(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleCreate: tuple }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes a relationship tuple.
     *
     * @param tuple - The tuple to delete
     * @returns A promise that resolves when the tuple is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(tuple) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.deleteRelationshipTuple(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleDelete: tuple }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.RelationshipTuplesApi = RelationshipTuplesApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwLXR1cGxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVsYXRpb25zaGlwLXR1cGxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FLb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUFvRDtBQUNwRCx1Q0FBeUQ7QUFvRXpEOztHQUVHO0FBQ0gsTUFBYSxxQkFBc0IsU0FBUSxvQkFBYTtJQUd0RDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSwrQkFBNEIsQ0FDeEQsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixnQkFBUyxFQUNULElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQStCO1FBQy9DLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCwrQ0FBK0M7UUFDL0MsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDOUUsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzQkFBc0IsaUNBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxJQUFJO2dCQUNKLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixPQUFPO2dCQUNQLFFBQVE7Z0JBQ1IsTUFBTSxJQUNOLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBOEI7UUFDaEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsdUJBQXVCLGlDQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsdUJBQXVCLEVBQUUsS0FBSyxJQUM5QixDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBOEI7UUFDaEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsdUJBQXVCLGlDQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsdUJBQXVCLEVBQUUsS0FBSyxJQUM5QixDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0NBQ0Y7QUE3RkQsc0RBNkZDIn0=