"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecatedApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * Contains all the deprecated `permit.api.` methods in one place.
 * The SDK now replaced all `permit.api.createRole()` with `permit.api.roles.create()`
 * due to the large number of API endpoints, trying to allow more user-friendly code
 * autocomplete behavior.
 */
class DeprecatedApiClient extends base_2.BasePermitApi {
    /**
     * Creates an instance of DeprecatedApiClient.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger object for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this._users = new openapi_1.UsersApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._tenants = new openapi_1.TenantsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._roles = new openapi_1.RolesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._conditionSets = new openapi_1.ConditionSetsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._conditionSetRules = new openapi_1.ConditionSetRulesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._roleAssignments = new openapi_1.RoleAssignmentsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this._resources = new openapi_1.ResourcesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of users.
     * @returns A promise that resolves to an array of UserRead objects representing the users.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.list()
     */
    async listUsers() {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.listUsers(Object.assign({}, this.config.apiContext.environmentContext));
            this.logger.debug(`[${response.status}] permit.api.listUsers()`);
            return response.data.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getUser(), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a list of roles.
     * @returns A promise that resolves to an array of RoleRead objects representing the roles.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.roles.list()
     */
    async listRoles() {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roles.listRoles(Object.assign({}, this.config.apiContext.environmentContext));
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.listRoles(), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a list of condition sets.
     * @param type - The type of the condition set, either `userset` or `resourceset`.
     * @param page - The page number.
     * @param perPage - The number of items per page.
     * @returns A promise that resolves to an array of ConditionSetRead objects representing the condition sets.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSets.list()
     */
    async listConditionSets(type, page, perPage) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSets.listConditionSets(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { type: type, page: page, perPage: perPage }));
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.listRoles(), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a list of condition set rules.
     * @param page - The page number.
     * @param perPage - The number of items per page.
     * @returns A promise that resolves to an array of ConditionSetRuleRead objects representing the condition set rules.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSetRules.list()
     */
    async listConditionSetsRules(page, perPage) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSetRules.listSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { page: page, perPage: perPage }));
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.listRoles(), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a user by ID or key
     * @param userId - The ID or the key of the user.
     * @returns A promise that resolves to a UserRead object representing the user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.get()
     */
    async getUser(userId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.getUser(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userId: userId }));
            this.logger.debug(`[${response.status}] permit.api.getUser(${userId})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getUser(${userId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a tenant by ID or key.
     * @param tenantId - The ID or the key of the tenant.
     * @returns A promise that resolves to a TenantRead object representing the tenant.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.tenants.get()
     */
    async getTenant(tenantId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._tenants.getTenant(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { tenantId: tenantId }));
            this.logger.debug(`[${response.status}] permit.api.getTenant(${tenantId})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getTenant(${tenantId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a list of tenants.
     * @param page - The page number.
     * @returns A promise that resolves to an array of TenantRead objects representing the tenants.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.tenants.list()
     */
    async listTenants(page) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._tenants.listTenants(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { page: page }));
            this.logger.debug(`[${response.status}] permit.api.listTenants(${page !== null && page !== void 0 ? page : ''})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.listTenants(${page !== null && page !== void 0 ? page : ''}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves a role by ID or key.
     * @param roleId - The ID or the key of the role.
     * @returns A promise that resolves to a RoleRead object representing the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.roles.get()
     */
    async getRole(roleId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roles.getRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleId }));
            this.logger.debug(`[${response.status}] permit.api.getRole(${roleId})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getRole(${roleId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Retrieves the assigned roles for a user (either in a single tenant or in all tenants).
     * @param user - The ID or key of the user.
     * @param tenant - The ID or key of the tenant, optional. If provided, only roles assigned within this tenant will be returned.
     * @returns A promise that resolves to an array of RoleAssignmentRead objects representing the assigned roles.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.getAssignedRoles()
     */
    async getAssignedRoles(user, tenant) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roleAssignments.listRoleAssignments(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { user: user, tenant: tenant }));
            this.logger.debug(`[${response.status}] permit.api.getAssignedRoles(${user}, ${tenant !== null && tenant !== void 0 ? tenant : 'all tenants'})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getAssignedRoles(${user}, ${tenant !== null && tenant !== void 0 ? tenant : 'all tenants'}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a new resource.
     * @param resource - The resource to create.
     * @returns A promise that resolves to a ResourceRead object representing the created resource.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.resources.create()
     */
    async createResource(resource) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._resources.createResource(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceCreate: resource }));
            this.logger.debug(`[${response.status}] permit.api.createResource(${JSON.stringify(resource)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createResource(${JSON.stringify(resource)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Updates an existing resource.
     * @param resourceId - The ID or key of the resource to update.
     * @param resource - The updated resource data.
     * @returns A promise that resolves to a ResourceRead object representing the updated resource.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.resources.update()
     */
    async updateResource(resourceId, resource) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._resources.updateResource(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceId, resourceUpdate: resource }));
            this.logger.debug(`[${response.status}] permit.api.updateResource(${resourceId}, ${JSON.stringify(resource)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.updateResource(${resourceId}, ${JSON.stringify(resource)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Deletes a resource.
     * @param resourceId - The ID or key of the resource to delete.
     * @returns A promise that resolves when the resource is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.resources.delete()
     */
    async deleteResource(resourceId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._resources.deleteResource(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceId }));
            this.logger.debug(`[${response.status}] permit.api.deleteResource(${resourceId})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteResource(${resourceId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a new user.
     * @param user - The user to create.
     * @returns A promise that resolves to a UserRead object representing the created user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.create()
     */
    async createUser(user) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.createUser(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userCreate: user }));
            this.logger.debug(`[${response.status}] permit.api.createUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createUser(${JSON.stringify(user)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates or Updates in place a user.
     * @param user - The user to create or update.
     * @returns A promise that resolves to a UserRead object representing the synced user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.sync()
     */
    async syncUser(user) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.replaceUser(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userId: user.key, userCreate: user }));
            this.logger.debug(`[${response.status}] permit.api.syncUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.syncUser(${JSON.stringify(user)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Updates an existing user.
     * @param userId - The ID or key of the user to update.
     * @param user - The updated user data.
     * @returns A promise that resolves to a UserRead object representing the updated user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.update()
     */
    async updateUser(userId, user) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.updateUser(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userId, userUpdate: user }));
            this.logger.debug(`[${response.status}] permit.api.updateUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.updateUser(${JSON.stringify(user)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Deletes a user.
     * @param userId - The ID or key of the user to delete.
     * @returns A promise that resolves when the user is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.delete()
     */
    async deleteUser(userId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._users.deleteUser(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { userId: userId }));
            this.logger.debug(`[${response.status}] permit.api.deleteUser(${userId})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteUser(${userId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a new tenant.
     * @param tenant - The tenant to create.
     * @returns A promise that resolves to a TenantRead object representing the created tenant.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.tenants.create()
     */
    async createTenant(tenant) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._tenants.createTenant(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { tenantCreate: tenant }));
            this.logger.debug(`[${response.status}] permit.api.createTenant(${JSON.stringify(tenant)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createTenant(${JSON.stringify(tenant)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Updates an existing tenant.
     * @param tenantId - The ID or key of the tenant to update.
     * @param tenant - The updated tenant data.
     * @returns A promise that resolves to a TenantRead object representing the updated tenant.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.tenants.update()
     */
    async updateTenant(tenantId, tenant) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._tenants.updateTenant(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { tenantId: tenantId, tenantUpdate: tenant }));
            this.logger.debug(`[${response.status}] permit.api.updateTenant(${tenantId}, ${JSON.stringify(tenant)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.updateTenant(${tenantId}, ${JSON.stringify(tenant)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Deletes a tenant.
     * @param tenantId - The ID or key of the tenant to delete.
     * @returns A promise that resolves when the tenant is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.tenants.delete()
     */
    async deleteTenant(tenantId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._tenants.deleteTenant(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { tenantId: tenantId }));
            this.logger.debug(`[${response.status}] permit.api.deleteTenant(${tenantId})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteTenant(${tenantId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a new role.
     * @param role - The role to create.
     * @returns A promise that resolves to a RoleRead object representing the created role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.roles.create()
     */
    async createRole(role) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roles.createRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleCreate: role }));
            this.logger.debug(`[${response.status}] permit.api.createRole(${JSON.stringify(role)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createRole(${JSON.stringify(role)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Updates an existing role.
     * @param roleId - The ID or key of the role to update.
     * @param role - The updated role data.
     * @returns A promise that resolves to a RoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.roles.update()
     */
    async updateRole(roleId, role) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roles.updateRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleId, roleUpdate: role }));
            this.logger.debug(`[${response.status}] permit.api.updateRole(${roleId}, ${JSON.stringify(role)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.updateRole(${roleId}, ${JSON.stringify(role)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Deletes a role.
     * @param roleId - The ID or key of the role to delete.
     * @returns A promise that resolves when the role is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.roles.delete()
     */
    async deleteRole(roleId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roles.deleteRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleId }));
            this.logger.debug(`[${response.status}] permit.api.deleteRole(${roleId})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteRole(${roleId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Assigns a role to a user.
     * @param assignedRole - The role assignment data.
     * @returns A promise that resolves to a RoleAssignmentRead object representing the assigned role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.assignRole()
     */
    async assignRole(assignedRole) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roleAssignments.assignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentCreate: assignedRole }));
            this.logger.debug(`[${response.status}] permit.api.assignRole(${JSON.stringify(assignedRole)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.assignRole(${JSON.stringify(assignedRole)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Unassigns a role from a user.
     * @param removedRole - The role unassignment data.
     * @returns A promise that resolves when the role is unassigned.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.users.unassignRole()
     */
    async unassignRole(removedRole) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._roleAssignments.unassignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentRemove: removedRole }));
            this.logger.debug(`[${response.status}] permit.api.unassignRole(${JSON.stringify(removedRole)})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.unassignRole(${JSON.stringify(removedRole)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a new condition set.
     * @param conditionSet - The condition set to create.
     * @returns A promise that resolves to a ConditionSetRead object representing the created condition set.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSets.create()
     */
    async createConditionSet(conditionSet) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSets.createConditionSet(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetCreate: conditionSet }));
            this.logger.debug(`[${response.status}] permit.api.createConditionSet(${JSON.stringify(conditionSet)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createConditionSet(${JSON.stringify(conditionSet)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Updates an existing condition set.
     * @param conditionSetId - The ID or key of the condition set to update.
     * @param conditionSet - The updated condition set data.
     * @returns A promise that resolves to a ConditionSetRead object representing the updated condition set.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSets.update()
     */
    async updateConditionSet(conditionSetId, conditionSet) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSets.updateConditionSet(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetId: conditionSetId, conditionSetUpdate: conditionSet }));
            this.logger.debug(`[${response.status}] permit.api.updateConditionSet(${conditionSetId}, ${JSON.stringify(conditionSet)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.updateConditionSet(${conditionSetId}, ${JSON.stringify(conditionSet)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Deletes a condition set.
     * @param conditionSetId - The ID or key of the condition set to delete.
     * @returns A promise that resolves when the condition set is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSets.delete()
     */
    async deleteConditionSet(conditionSetId) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSets.deleteConditionSet(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetId: conditionSetId }));
            this.logger.debug(`[${response.status}] permit.api.deleteConditionSet(${conditionSetId})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteConditionSet(${conditionSetId}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Creates a condition set rule (i.e: grants permission to a userset to act on a resourceset).
     * @param conditionSetRule - The condition set rule data.
     * @returns A promise that resolves to a ConditionSetRuleRead object representing the assigned condition set rule.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSetRules.create()
     */
    async assignConditionSetRule(conditionSetRule) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSetRules.assignSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetRuleCreate: conditionSetRule }));
            this.logger.debug(`[${response.status}] permit.api.createConditionSetRule(${JSON.stringify(conditionSetRule)})`);
            return response.data;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.createConditionSetRule(${JSON.stringify(conditionSetRule)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    /**
     * Removes a condition set rule (i.e: unassigns permission from a userset to act on a resourceset).
     * @param conditionSetRuleId - The ID or key of the condition set rule to remove.
     * @returns A promise that resolves when the condition set rule is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @deprecated replaced with permit.api.conditionSetRules.delete()
     */
    async unassignConditionSetRule(conditionSetRule) {
        var _a, _b;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this._conditionSetRules.unassignSetPermissions(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { conditionSetRuleRemove: conditionSetRule }));
            this.logger.debug(`[${response.status}] permit.api.deleteConditionSetRule(${JSON.stringify(conditionSetRule)})`);
            return response;
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.deleteConditionSetRule(${JSON.stringify(conditionSetRule)}), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw err;
        }
    }
    getMethods() {
        return {
            listUsers: this.listUsers.bind(this),
            listRoles: this.listRoles.bind(this),
            listConditionSets: this.listConditionSets.bind(this),
            listConditionSetsRules: this.listConditionSetsRules.bind(this),
            updateUser: this.updateUser.bind(this),
            getUser: this.getUser.bind(this),
            getTenant: this.getTenant.bind(this),
            getRole: this.getRole.bind(this),
            getAssignedRoles: this.getAssignedRoles.bind(this),
            createResource: this.createResource.bind(this),
            updateResource: this.updateResource.bind(this),
            deleteResource: this.deleteResource.bind(this),
            createUser: this.createUser.bind(this),
            syncUser: this.syncUser.bind(this),
            deleteUser: this.deleteUser.bind(this),
            createTenant: this.createTenant.bind(this),
            updateTenant: this.updateTenant.bind(this),
            deleteTenant: this.deleteTenant.bind(this),
            listTenants: this.listTenants.bind(this),
            createRole: this.createRole.bind(this),
            updateRole: this.updateRole.bind(this),
            deleteRole: this.deleteRole.bind(this),
            assignRole: this.assignRole.bind(this),
            unassignRole: this.unassignRole.bind(this),
            createConditionSet: this.createConditionSet.bind(this),
            updateConditionSet: this.updateConditionSet.bind(this),
            deleteConditionSet: this.deleteConditionSet.bind(this),
            assignConditionSetRule: this.assignConditionSetRule.bind(this),
            unassignConditionSetRule: this.unassignConditionSetRule.bind(this),
        };
    }
}
exports.DeprecatedApiClient = DeprecatedApiClient;
//# sourceMappingURL=data:application/json;base64,