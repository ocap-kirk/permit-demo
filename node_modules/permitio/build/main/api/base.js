"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePermitApi = exports.PermitApiError = void 0;
const axios_1 = __importDefault(require("axios"));
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const context_1 = require("./context");
class PermitApiError extends Error {
    constructor(message, originalError) {
        super(message);
        this.originalError = originalError;
    }
    get request() {
        return this.originalError.request;
    }
    get response() {
        return this.originalError.response;
    }
}
exports.PermitApiError = PermitApiError;
class BasePermitApi {
    constructor(config, logger) {
        var _a;
        this.config = config;
        this.logger = logger;
        const version = (_a = process.env.npm_package_version) !== null && _a !== void 0 ? _a : 'unknown';
        this.openapiClientConfig = new openapi_1.Configuration({
            basePath: `${this.config.apiUrl}`,
            accessToken: this.config.token,
            baseOptions: {
                headers: {
                    'X-Permit-SDK-Version': `node:${version}`,
                },
            },
        });
        this.scopeApi = new openapi_1.APIKeysApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Sets the API context and permitted access level based on the API key scope.
     */
    async setContextFromApiKey() {
        var _a, _b;
        try {
            this.logger.debug('Fetching api key scope');
            const response = await this.scopeApi.getApiKeyScope();
            if (response.data.organization_id !== undefined && response.data.organization_id !== null) {
                this.config.apiContext._saveApiKeyAccessibleScope(response.data.organization_id, response.data.project_id, response.data.environment_id);
                if (response.data.project_id !== undefined && response.data.project_id !== null) {
                    if (response.data.environment_id !== undefined && response.data.environment_id !== null) {
                        // set environment level context
                        this.logger.debug(`setting: environment-level api context`);
                        this.config.apiContext.setEnvironmentLevelContext(response.data.organization_id, response.data.project_id, response.data.environment_id);
                        return;
                    }
                    // set project level context
                    this.logger.debug(`setting: project-level api context`);
                    this.config.apiContext.setProjectLevelContext(response.data.organization_id, response.data.project_id);
                    return;
                }
                // set org level context
                this.logger.debug(`setting: organization-level api context`);
                this.config.apiContext.setOrganizationLevelContext(response.data.organization_id);
                return;
            }
            throw new context_1.PermitContextError('could not set api context level');
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                this.logger.error(`[${(_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status}] permit.api.getApiKeyScope(), err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            }
            throw new context_1.PermitContextError('could not fetch the api key scope in order to set the api context level');
        }
    }
    /**
     * Ensure that the API Key has the necessary permissions to successfully call the API endpoint.
     * Note that this check is not foolproof, and the API may still throw 401.
     * @param requiredAccessLevel The required API Key Access level for the endpoint.
     * @throws PermitContextError If the currently set API key access level does not match the required access level.
     */
    async ensureAccessLevel(requiredAccessLevel) {
        // should only happen once in the lifetime of the SDK
        if (this.config.apiContext.contextLevel === context_1.ApiContextLevel.WAIT_FOR_INIT ||
            this.config.apiContext.permittedAccessLevel === context_1.ApiKeyLevel.WAIT_FOR_INIT) {
            await this.setContextFromApiKey();
        }
        if (requiredAccessLevel !== this.config.apiContext.permittedAccessLevel) {
            if (context_1.API_ACCESS_LEVELS.indexOf(requiredAccessLevel) <
                context_1.API_ACCESS_LEVELS.indexOf(this.config.apiContext.permittedAccessLevel)) {
                throw new context_1.PermitContextError(`You're trying to use an SDK method that requires an API Key with access level: ${requiredAccessLevel}, ` +
                    `however the SDK is running with an API key with level ${this.config.apiContext.permittedAccessLevel}.`);
            }
        }
    }
    /**
     * Ensure that the API context matches the required endpoint context.
     * @param requiredContext The required API context level for the endpoint.
     * @throws PermitContextError If the currently set API context level does not match the required context level.
     */
    async ensureContext(requiredContext) {
        // should only happen once in the lifetime of the SDK
        if (this.config.apiContext.contextLevel === context_1.ApiContextLevel.WAIT_FOR_INIT ||
            this.config.apiContext.permittedAccessLevel === context_1.ApiKeyLevel.WAIT_FOR_INIT) {
            await this.setContextFromApiKey();
        }
        if (this.config.apiContext.contextLevel < requiredContext ||
            this.config.apiContext.contextLevel === context_1.ApiContextLevel.WAIT_FOR_INIT) {
            throw new context_1.PermitContextError(`You're trying to use an SDK method that requires an API context of ${context_1.ApiContextLevel[requiredContext]}, ` +
                `however the SDK is running in a less specific context level: ${context_1.ApiContextLevel[this.config.apiContext.contextLevel]}.`);
        }
    }
    handleApiError(err) {
        var _a, _b;
        if (axios_1.default.isAxiosError(err)) {
            // this is an http response with an error status code
            const message = `Got error status code: ${(_a = err.response) === null || _a === void 0 ? void 0 : _a.status}`;
            // log this to the SDK logger
            this.logger.error(`${message}, err: ${JSON.stringify((_b = err === null || err === void 0 ? void 0 : err.response) === null || _b === void 0 ? void 0 : _b.data)}`);
            // and throw a permit error exception
            throw new PermitApiError(message, err);
        }
        else {
            // unexpected error, just throw
            throw err;
        }
    }
}
exports.BasePermitApi = BasePermitApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBeUQ7QUFJekQsd0NBQXVEO0FBQ3ZELDBDQUE0QztBQUU1Qyx1Q0FBZ0c7QUFFaEcsTUFBYSxjQUFrQixTQUFRLEtBQUs7SUFDMUMsWUFBWSxPQUFlLEVBQVMsYUFBNEI7UUFDOUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRG1CLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBRWhFLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBWkQsd0NBWUM7QUFhRCxNQUFzQixhQUFhO0lBSWpDLFlBQXNCLE1BQXFCLEVBQVksTUFBYzs7UUFBL0MsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFZLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDbkUsTUFBTSxPQUFPLEdBQUcsTUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixtQ0FBSSxTQUFTLENBQUM7UUFDN0QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksdUJBQWEsQ0FBQztZQUMzQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQzlCLFdBQVcsRUFBRTtnQkFDWCxPQUFPLEVBQUU7b0JBQ1Asc0JBQXNCLEVBQUUsUUFBUSxPQUFPLEVBQUU7aUJBQzFDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksb0JBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsZ0JBQVMs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