"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceRelationsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * API client for interacting with the Resource Relations API.
 */
class ResourceRelationsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the ResourceRelationsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.relationsApi = new openapi_1.ResourceRelationsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of all resource relations that are defined for a given resource.
     * @param params - pagination and filtering params, @see {@link IListRelations}
     * @returns A promise that resolves to an array of RelationRead objects representing the relations.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { resourceKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.listResourceRelations(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a resource relation based on the resource key and the relation key.
     *
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(resourceKey, relationKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.getResourceRelation(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, relationId: relationKey }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an relation based on the resource key and the relation key.
     * Alias for the {@link get} method.
     *
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(resourceKey, relationKey) {
        return await this.get(resourceKey, relationKey);
    }
    /**
     * Retrieves an relation based on the resource ID and the relation ID.
     * Alias for the {@link get} method.
     *
     * @param resourceId - The resource ID.
     * @param relationId - The relation ID.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(resourceId, relationId) {
        return await this.get(resourceId, relationId);
    }
    /**
     * Creates a new resource relation.
     *
     * @param resourceKey - The resource key.
     * @param RelationData - The relation data.
     * @returns A promise that resolves to a RelationRead object representing the created relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(resourceKey, RelationData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.createResourceRelation(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, relationCreate: RelationData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a relation based on the resource key and relation key.
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves when the relation is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(resourceKey, relationKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            await this.relationsApi.deleteResourceRelation(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, relationId: relationKey }));
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.ResourceRelationsApi = ResourceRelationsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtcmVsYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9yZXNvdXJjZS1yZWxhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0Esd0NBSW9CO0FBQ3BCLDBDQUE0QztBQUU1QyxpQ0FBb0UsQ0FBQyx3REFBd0Q7QUFDN0gsdUNBQXlGLENBQUMsd0RBQXdEO0FBOEVsSjs7R0FFRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsb0JBQWE7SUFHckQ7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLDhCQUEyQixDQUNqRCxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLGdCQUFTLEVBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFzQjtRQUN0QyxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUN4RCxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLGlDQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsVUFBVSxFQUFFLFdBQVcsRUFDdkIsSUFBSTtnQkFDSixPQUFPLElBQ1AsQ0FDSCxDQUFDLElBQUksQ0FBQztTQUNSO1FBQUMsT0FBTyxHQUFHLEVBQUU7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