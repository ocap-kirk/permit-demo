"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAssignmentsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base");
const context_1 = require("./context");
/**
 * The RoleAssignmentsApi class provides methods for interacting with Role Assignments.
 */
class RoleAssignmentsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the RoleAssignmentsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.roleAssignments = new openapi_1.RoleAssignmentsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of role assignments based on the specified filters.
     *
     * @param params - The filters and pagination options for listing role assignments.
     * @returns A promise that resolves with an array of role assignments.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        const { user, tenant, role, resourceInstance, page = 1, perPage = 100 } = params;
        try {
            return (await this.roleAssignments.listRoleAssignments(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { user,
                tenant,
                role,
                resourceInstance,
                page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns a role to a user in the scope of a given tenant.
     *
     * @param assignment - The role assignment details.
     * @returns A promise that resolves with the assigned role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async assign(assignment) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.assignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentCreate: assignment }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Unassigns a role from a user in the scope of a given tenant.
     *
     * @param unassignment - The role unassignment details.
     * @returns A promise that resolves when the role is successfully unassigned.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async unassign(unassignment) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.unassignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentRemove: unassignment }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns multiple roles in bulk using the provided role assignments data.
     * Each role assignment is a tuple of (user, role, tenant).
     *
     * @param assignments - The role assignments to be performed in bulk.
     * @returns A promise that resolves with the bulk assignment report.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkAssign(assignments) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.bulkAssignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentCreate: assignments }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes multiple role assignments in bulk using the provided unassignment data.
     * Each role to unassign is a tuple of (user, role, tenant).
     *
     * @param unassignments - The role unassignments to be performed in bulk.
     * @returns A promise that resolves with the bulk unassignment report.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkUnassign(unassignments) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.bulkUnassignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentRemove: unassignments }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.RoleAssignmentsApi = RoleAssignmentsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS1hc3NpZ25tZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcm9sZS1hc3NpZ25tZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FPb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUFvRDtBQUNwRCx1Q0FBeUQ7QUE0RnpEOztHQUVHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxvQkFBYTtJQUduRDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksNEJBQXlCLENBQ2xELElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsZ0JBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUE0QjtRQUM1QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUNqRixJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsaUNBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxJQUFJO2dCQUNKLE1BQU07Z0JBQ04sSUFBSTtnQkFDSixnQkFBZ0I7Z0JBQ2hCLElBQUk7Z0JBQ0osT0FBTyxJQUNQLENBQ0gsQ0FBQyxJQUFJ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