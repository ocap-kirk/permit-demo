"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolesApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base");
const context_1 = require("./context");
/**
 * The RolesApi class provides methods for interacting with Permit Roles.
 */
class RolesApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the RolesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.roles = new openapi_1.RolesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of roles.
     *
     * @param pagination The pagination options, @see {@link IPagination}
     * @returns A promise that resolves to an array of roles.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(pagination) {
        const { page = 1, perPage = 100 } = pagination !== null && pagination !== void 0 ? pagination : {};
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.listRoles(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a role by its key.
     *
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(roleKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.getRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleKey }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a role by its key.
     * Alias for the {@link get} method.
     *
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(roleKey) {
        return await this.get(roleKey);
    }
    /**
     * Retrieves a role by its ID.
     * Alias for the {@link get} method.
     *
     * @param roleId The ID of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(roleId) {
        return await this.get(roleId);
    }
    /**
     * Creates a new role.
     *
     * @param roleData The data for the new role.
     * @returns A promise that resolves to the created role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(roleData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.createRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleCreate: roleData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates a role.
     *
     * @param roleKey The key of the role.
     * @param roleData The updated data for the role.
     * @returns A promise that resolves to the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(roleKey, roleData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.updateRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleKey, roleUpdate: roleData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a role.
     *
     * @param roleKey The key of the role to delete.
     * @returns A promise that resolves when the role is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(roleKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            await this.roles.deleteRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleKey }));
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns permissions to a role.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be assigned to the role.
     * @returns A promise that resolves to a RoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async assignPermissions(roleKey, permissions) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.assignPermissionsToRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleKey, addRolePermissions: {
                    permissions,
                } }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes permissions from a role.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be removed from the role.
     * @returns A promise that resolves to a RoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async removePermissions(roleKey, permissions) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.removePermissionsFromRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleId: roleKey, removeRolePermissions: {
                    permissions,
                } }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.RolesApi = RolesApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3JvbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLHdDQUEyRjtBQUMzRiwwQ0FBNEM7QUFFNUMsaUNBQW9EO0FBQ3BELHVDQUF5RDtBQW1HekQ7O0dBRUc7QUFDSCxNQUFhLFFBQVMsU0FBUSxvQkFBYTtJQUd6Qzs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksa0JBQWUsQ0FDOUIsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixnQkFBUyxFQUNULElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQXdCO1FBQ3hDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxHQUFHLEVBQUUsR0FBRyxVQUFVLGFBQVYsVUFBVSxjQUFWLFVBQVUsR0FBSSxFQUFFLENBQUM7UUFDckQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsaUNBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxJQUFJO2dCQUNKLE9BQU8sSUFDUCxDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFD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