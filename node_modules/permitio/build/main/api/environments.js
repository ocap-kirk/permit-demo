"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * The EnvironmentsApi class provides methods for interacting with Permit Environments.
 */
class EnvironmentsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the EnvironmentsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.environments = new openapi_1.EnvironmentsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
        this.apiKeys = new openapi_1.APIKeysApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of environments.
     *
     * @param params - the filters and pagination options, @see {@link IListEnvironments}
     * @returns A promise that resolves to an array of EnvironmentRead objects representing the listed environments.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { projectKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.listEnvironments({
                projId: projectKey,
                page,
                perPage,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Gets an environment by project key and environment key.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @returns A promise that resolves to an EnvironmentRead object representing the retrieved environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(projectKey, environmentKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.getEnvironment({
                projId: projectKey,
                envId: environmentKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Gets an environment by project key and environment key.
     * Alias for the {@link get} method.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @returns A promise that resolves to an EnvironmentRead object representing the retrieved environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(projectKey, environmentKey) {
        return await this.get(projectKey, environmentKey);
    }
    /**
     * Gets an environment by project ID and environment ID.
     * Alias for the {@link get} method.
     *
     * @param projectId - The project ID.
     * @param environmentId - The environment ID.
     * @returns A promise that resolves to an EnvironmentRead object representing the retrieved environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(projectId, environmentId) {
        return await this.get(projectId, environmentId);
    }
    /**
     * Retrieves statistics and metadata for an environment.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @returns A promise that resolves to an EnvironmentStats object representing the statistics data.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getStats(projectKey, environmentKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.statsEnvironments({
                projId: projectKey,
                envId: environmentKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves the API key that grants access for an environment (and only the requested environment).
     * Must be requested with an organization-level api key.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @returns A promise that resolves to an APIKeyRead object containing the API key and its metadata.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getApiKey(projectKey, environmentKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.apiKeys.getEnvironmentApiKey({
                projId: projectKey,
                envId: environmentKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new environment.
     *
     * @param projectKey - The project key.
     * @param environmentData - The data for creating the environment.
     * @returns A promise that resolves to an EnvironmentRead object representing the created environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(projectKey, environmentData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.PROJECT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.createEnvironment({
                projId: projectKey,
                environmentCreate: environmentData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates an existing environment.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @param environmentData - The data for updating the environment.
     * @returns A promise that resolves to an EnvironmentRead object representing the updated environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(projectKey, environmentKey, environmentData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.updateEnvironment({
                projId: projectKey,
                envId: environmentKey,
                environmentUpdate: environmentData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Clones data (creates a copy) from a source specified environment into a different target
     * environment in the same project. The target environment can be a new environment or an existing
     * environment. For existing environments, the user must specify a conflict strategy - meaning what
     * the system should do in case a copied object conflicts with an existing object (with the same key)
     * in the target environment. The system can overwrite all the conflicting objects, or fail (and
     * cancel the copy) when encountering the first conflict.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @param copyParams - The parameters for copying the environment.
     * @returns A promise that resolves to an EnvironmentRead object representing the copied environment.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async copy(projectKey, environmentKey, copyParams) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.PROJECT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            return (await this.environments.copyEnvironment({
                projId: projectKey,
                envId: environmentKey,
                environmentCopy: copyParams,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes an environment.
     *
     * @param projectKey - The project key.
     * @param environmentKey - The environment key.
     * @returns A promise that resolves when the environment is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(projectKey, environmentKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ORGANIZATION);
        try {
            await this.environments.deleteEnvironment({
                projId: projectKey,
                envId: environmentKey,
            });
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.EnvironmentsApi = EnvironmentsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9lbnZpcm9ubWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0Esd0NBU29CO0FBQ3BCLDBDQUE0QztBQUU1QyxpQ0FBb0UsQ0FBQyx3REFBd0Q7QUFDN0gsdUNBQXlGLENBQUMsd0RBQXdEO0FBbUpsSjs7R0FFRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxvQkFBYTtJQUloRDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQXNCLENBQzVDLElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsZ0JBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxvQkFBaUIsQ0FDbEMsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixnQkFBUyxFQUNULElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQXlCO1FBQ3pDLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3ZELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RCxJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDdkMsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLElB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