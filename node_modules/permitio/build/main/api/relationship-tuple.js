"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAssignmentsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base");
const context_1 = require("./context");
/**
 * The RoleAssignmentsApi class provides methods for interacting with Role Assignments.
 */
class RoleAssignmentsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the RoleAssignmentsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.roleAssignments = new openapi_1.RoleAssignmentsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of relationship tuples based on the specified filters.
     *
     * @param params - The filters and pagination options for listing relationship tuples.
     * @returns A promise that resolves with an array of relationship tuples.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureContext(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        const { user, tenant, role, page = 1, perPage = 100 } = params;
        try {
            return (await this.roleAssignments.listRoleAssignments(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { user,
                tenant,
                role,
                page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns a role to a user in the scope of a given tenant.
     *
     * @param assignment - The role assignment details.
     * @returns A promise that resolves with the assigned role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(assignment) {
        await this.ensureContext(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        try {
            return (await this.roleAssignments.assignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentCreate: assignment }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Unassigns a role from a user in the scope of a given tenant.
     *
     * @param unassignment - The role unassignment details.
     * @returns A promise that resolves when the role is successfully unassigned.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(unassignment) {
        await this.ensureContext(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        try {
            return (await this.roleAssignments.unassignRole(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { roleAssignmentRemove: unassignment }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.RoleAssignmentsApi = RoleAssignmentsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwLXR1cGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9yZWxhdGlvbnNoaXAtdHVwbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0Esd0NBT29CO0FBQ3BCLDBDQUE0QztBQUU1QyxpQ0FBb0Q7QUFDcEQsdUNBQXdDO0FBa0V4Qzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsb0JBQWE7SUFHbkQ7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLDRCQUF5QixDQUNsRCxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLGdCQUFTLEVBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBNEI7UUFDNUMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNoRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQy9ELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixpQ0FDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEtBQzVDLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixJQUFJO2dCQUNKLElBQUk7Z0JBQ0osT0FBTyxJQUNQLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFnQztRQUNsRCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsaUNBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxvQkFBb0IsRUFBRSxVQUFVLElBQ2hDLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFrQztRQUNwRCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksaUNBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxvQkFBb0IsRUFBRSxZQUFZLElBQ2xDLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7Q0FFRjtBQXhGRCxnREF3RkMifQ==