"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceActionGroupsApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base"); // eslint-disable-line @typescript-eslint/no-unused-vars
const context_1 = require("./context"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * API client for interacting with the Resource Action Groups API.
 */
class ResourceActionGroupsApi extends base_2.BasePermitApi {
    /**
     * Creates an instance of the ResourceActionGroupsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.groupsApi = new openapi_1.ResourceActionGroupsApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of all action groups that are defined for a given resource.
     * @param params - pagination and filtering params, @see {@link IListActionGroups}
     * @returns A promise that resolves to an array of ResourceActionGroupRead objects representing the action groups.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { resourceKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.groupsApi.listResourceActionGroups(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, page,
                perPage }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an action group based on the resource key and the group key.
     *
     * @param resourceKey - The resource key.
     * @param groupKey - The group key.
     * @returns A promise that resolves to a ResourceActionGroupRead object representing the action group.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(resourceKey, groupKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.groupsApi.getResourceActionGroup(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionGroupId: groupKey }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an action group based on the resource key and the group key.
     * Alias for the {@link get} method.
     *
     * @param resourceKey - The resource key.
     * @param groupKey - The group key.
     * @returns A promise that resolves to a ResourceActionGroupRead object representing the action group.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(resourceKey, groupKey) {
        return await this.get(resourceKey, groupKey);
    }
    /**
     * Retrieves an action group based on the resource ID and the group ID.
     * Alias for the {@link get} method.
     *
     * @param resourceId - The resource ID.
     * @param groupId - The group ID.
     * @returns A promise that resolves to a ResourceActionGroupRead object representing the action group.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(resourceId, groupId) {
        return await this.get(resourceId, groupId);
    }
    /**
     * Creates a new action group.
     * @param resourceKey - The resource key.
     * @param groupData - The action group data.
     * @returns A promise that resolves to a ResourceActionGroupRead object representing the created action group.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(resourceKey, groupData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.groupsApi.createResourceActionGroup(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, resourceActionGroupCreate: groupData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates an action group.
     * @param resourceKey - The resource key.
     * @param groupKey - The group key.
     * @param groupData - The action group data.
     * @returns A promise that resolves to a ResourceActionGroupRead object representing the updated action group.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(resourceKey, groupKey, groupData) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.groupsApi.updateResourceActionGroup(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionGroupId: groupKey, resourceActionGroupUpdate: groupData }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a action group based on the resource key and group key.
     * @param resourceKey - The resource key.
     * @param groupKey - The group key.
     * @returns A promise that resolves when the action group is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(resourceKey, groupKey) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            await this.groupsApi.deleteResourceActionGroup(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { resourceId: resourceKey, actionGroupId: groupKey }));
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.ResourceActionGroupsApi = ResourceActionGroupsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtYWN0aW9uLWdyb3Vwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVzb3VyY2UtYWN0aW9uLWdyb3Vwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FLb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUFvRSxDQUFDLHdEQUF3RDtBQUM3SCx1Q0FBeUYsQ0FBQyx3REFBd0Q7QUErRmxKOztHQUVHO0FBQ0gsTUFBYSx1QkFBd0IsU0FBUSxvQkFBYTtJQUd4RDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksaUNBQThCLENBQ2pELElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsZ0JBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQXlCO1FBQ3pDLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3hELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsaUNBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1QyxVQUFVLEVBQUUsV0FBVyxFQUN2QixJQUFJO2dCQUNKLE9BQU8sSUFDUCxDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdB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