"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Permit = exports.PermitApiError = exports.ApiKeyLevel = exports.PermitContextError = exports.ApiContext = exports.PermitPDPStatusError = exports.PermitError = exports.PermitConnectionError = void 0;
const api_client_1 = require("./api/api-client");
const elements_1 = require("./api/elements");
const config_1 = require("./config");
const enforcer_1 = require("./enforcement/enforcer");
const logger_1 = require("./logger");
const http_logger_1 = require("./utils/http-logger");
// exported interfaces
__exportStar(require("./api"), exports);
var enforcer_2 = require("./enforcement/enforcer");
Object.defineProperty(exports, "PermitConnectionError", { enumerable: true, get: function () { return enforcer_2.PermitConnectionError; } });
Object.defineProperty(exports, "PermitError", { enumerable: true, get: function () { return enforcer_2.PermitError; } });
Object.defineProperty(exports, "PermitPDPStatusError", { enumerable: true, get: function () { return enforcer_2.PermitPDPStatusError; } });
var context_1 = require("./api/context");
Object.defineProperty(exports, "ApiContext", { enumerable: true, get: function () { return context_1.ApiContext; } });
Object.defineProperty(exports, "PermitContextError", { enumerable: true, get: function () { return context_1.PermitContextError; } });
Object.defineProperty(exports, "ApiKeyLevel", { enumerable: true, get: function () { return context_1.ApiKeyLevel; } });
var base_1 = require("./api/base");
Object.defineProperty(exports, "PermitApiError", { enumerable: true, get: function () { return base_1.PermitApiError; } });
/**
 * The `Permit` class represents the main entry point for interacting with the Permit.io SDK.
 * The SDK constructor expects an object implementing the {@link IPermitConfig} interface.
 *
 * Example usage:
 *
 * ```typescript
 * import { Permit } from 'permitio';
 *
 * const permit = new Permit({
 *   // this is typically the same API Key you would use for the PDP container
 *   token: "[YOUR_API_KEY]",
 *   // in production, you might need to change this url to fit your deployment
 *   pdp: "http://localhost:7766",
 *   ...
 * });
 *
 * // creates (or updates) a user on that can be assigned roles and permissions
 * const { user } = await permit.api.users.sync({
 *   // the user key must be a unique id of the user
 *   key: 'auth0|elon',
 *   // optional params
 *   email: 'elonmusk@tesla.com',
 *   first_name: 'Elon',
 *   last_name: 'Musk',
 *   // user attributes can be used in attribute-based access-control policies
 *   attributes: {
 *     age: 50,
 *     favoriteColor: 'red',
 *   },
 * });
 *
 * // 'document' is the protected resource we are enforcing access to
 * const resource = 'document';
 * // the action the user is trying to do on the resource
 * const action = 'read';
 *
 * const permitted = await permit.check(user, action, resource);
 * if (permitted) {
 *     console.log('User is authorized to read a document.');
 * } else {
 *     console.log('User is not authorized to read a document.');
 * }
 * ```
 */
class Permit {
    /**
     * Constructs a new instance of the {@link Permit} class with the specified configuration.
     *
     * @param config - The configuration for the Permit SDK.
     */
    constructor(config) {
        this.config = config_1.ConfigFactory.build(config);
        this.logger = logger_1.LoggerFactory.createLogger(this.config);
        http_logger_1.AxiosLoggingInterceptor.setupInterceptor(this.config.axiosInstance, this.logger);
        this.api = new api_client_1.ApiClient(this.config, this.logger);
        this.enforcer = new enforcer_1.Enforcer(this.config, this.logger);
        this.elements = new elements_1.ElementsClient(this.config, this.logger);
        this.logger.debug(`Permit.io SDK initialized with config:\n${JSON.stringify(this.config, undefined, 2)}`);
    }
    /**
     * Checks if a `user` is authorized to perform an `action` on a `resource` within the specified context.
     *
     * @param user     - The user object representing the user.
     * @param action   - The action to be performed on the resource.
     * @param resource - The resource object representing the resource.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns `true` if the user is authorized, `false` otherwise.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async check(user, action, resource, context, config) {
        return await this.enforcer.check(user, action, resource, context, config);
    }
    /**
     * Checks multiple requests within the specified context.
     *
     * @param checks   - The check requests.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns array containing `true` if the user is authorized, `false` otherwise for each check request.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async bulkCheck(checks, context, config) {
        return await this.enforcer.bulkCheck(checks, context, config);
    }
    /**
     * Get all permissions for the specified user.
     *
     * @param user     - The user object representing the user.
     * @param tenants  - The list of tenants to filter the permissions on ( given by roles ).
     * @param resources - The list of resources to filter the permissions on ( given by resource roles ).
     * @param resource_types - The list of resource types to filter the permissions on ( given by resource roles ).
     * @returns object with key as the resource identifier and value as the resource details and permissions.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async getUserPermissions(user, tenants, resources, resource_types, config) {
        return await this.enforcer.getUserPermissions(user, tenants, resources, resource_types, config);
    }
}
exports.Permit = Permit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxpREFBeUQ7QUFDekQsNkNBQW9FO0FBQ3BFLHFDQUF3RDtBQUN4RCxxREFBNkQ7QUFFN0QscUNBQXlDO0FBRXpDLHFEQUE4RDtBQUc5RCxzQkFBc0I7QUFDdEIsd0NBQXNCO0FBR3RCLG1EQUFrRztBQUF6RixpSEFBQSxxQkFBcUIsT0FBQTtBQUFFLHVHQUFBLFdBQVcsT0FBQTtBQUFFLGdIQUFBLG9CQUFvQixPQUFBO0FBRWpFLHlDQUE0RTtBQUFuRSxxR0FBQSxVQUFVLE9BQUE7QUFBRSw2R0FBQSxrQkFBa0IsT0FBQTtBQUFFLHNHQUFBLFdBQVcsT0FBQTtBQUNwRCxtQ0FBNEM7QUFBbkMsc0dBQUEsY0FBYyxPQUFBO0FBb0J2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Q0c7QUFDSCxNQUFhLE1BQU07SUF5Q2pCOzs7O09BSUc7SUFDSCxZQUFZLE1BQXVDO1FBQ2pELElBQUksQ0FBQyxNQUFNLEdBQUcsc0JBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxzQkFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQscUNBQXVCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpGLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxzQkFBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRW5ELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSx5QkFBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLDJDQUEyQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQ3ZGLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNJLEtBQUssQ0FBQyxLQUFLLENBQ2hCLElBQW9CLEVBQ3BCLE1BQWMsRUFDZCxRQUE0QixFQUM1QixPQUE2QixFQUM3QixNQUFnQztRQUVoQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyxTQUFTLENBQ3BCLE1BQTBCLEVBQzFCLE9BQTZCLEVBQzdCLE1BQWdDO1FBRWhDLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0ksS0FBSyxDQUFDLGtCQUFrQixDQUM3QixJQUFvQixFQUNwQixPQUFrQixFQUNsQixTQUFvQixFQUNwQixjQUF5QixFQUN6QixNQUFvQjtRQUVwQixPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEcsQ0FBQztDQUNGO0FBdkhELHdCQXVIQyJ9