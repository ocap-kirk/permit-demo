"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceReporter = exports.ResourceStub = void 0;
const axios_1 = __importDefault(require("axios"));
const registry_1 = require("./registry");
class ResourceStub {
    constructor(reporter, resourceName) {
        this.reporter = reporter;
        this.resourceName = resourceName;
    }
    action(config) {
        const action = new registry_1.ActionDefinition(config.name, config.title, config.description, config.path, config.attributes || {});
        this.reporter.addActionToResource(this.resourceName, action);
    }
}
exports.ResourceStub = ResourceStub;
/**
 * the ResourceReporter is used to sync resources and actions
 * (the authorization enforcement points) defined by the app to the
 * permit.io control plane in the cloud, so that policy and permissions
 * may be defined by the control plane. The only data permit.io needs to
 * know about the app is the available enforcement point (i.e: resources
 * and actions).
 */
class ResourceReporter {
    constructor(config, registry, logger) {
        this.config = config;
        this.registry = registry;
        this.logger = logger;
        this.initialized = false;
        this.client = axios_1.default.create();
        this.client = axios_1.default.create({
            baseURL: `${this.config.pdpUrl}/`,
            headers: {
                Authorization: `Bearer ${this.config.token}`,
                'Content-Type': 'application/json',
            },
        });
        this.initialized = true; // TODO: remove this
        this.syncResourcesToControlPlane();
    }
    get token() {
        return this.config.token;
    }
    // resources and actions
    addResource(resource) {
        this.registry.addResource(resource);
        this.maybeSyncResource(resource);
        return new ResourceStub(this, resource.name);
    }
    addActionToResource(resourceName, actionDef) {
        const action = this.registry.addActionToResource(resourceName, actionDef);
        if (action) {
            this.maybeSyncAction(action);
        }
    }
    maybeSyncResource(resource) {
        if (this.initialized && !this.registry.isSynced(resource)) {
            this.logger.info(`syncing resource: ${resource.repr()}`);
            this.client
                .put(`cloud/resources/${resource.name}`, resource.dict())
                .then((response) => {
                this.registry.markAsSynced(resource, response.data.id);
            })
                .catch((error) => {
                this.logger.error(`tried to sync resource ${resource.name}, got error: ${error}`);
            });
        }
    }
    maybeSyncAction(action) {
        if (!action.resourceId) {
            return;
        }
        const resourceId = action.resourceId;
        if (this.initialized && !this.registry.isSynced(action)) {
            this.logger.info(`syncing action: ${action.repr()}`);
            this.client
                .put(`cloud/resources/${resourceId}/actions`, action.dict())
                .then((response) => {
                this.registry.markAsSynced(action, response.data.id);
            })
                .catch((error) => {
                this.logger.error(`tried to sync action ${action.name}, got error: ${error}`);
            });
        }
    }
    syncResourcesToControlPlane() {
        // will also sync actions
        for (const resource of this.registry.resourceList) {
            this.maybeSyncResource(resource);
        }
    }
    resource(config) {
        const resource = new registry_1.ResourceDefinition(config.name, config.type, config.path, config.description, config.actions || [], config.attributes || {});
        return this.addResource(resource);
    }
    action(config) {
        return new registry_1.ActionDefinition(config.name, config.title, config.description, config.path, config.attributes || {});
    }
    // TODO: currently we use the old api (PUT single resource)
    // due to mismatches with the resource registry
    syncResources(config) {
        const stubs = [];
        for (const resource of config.resources) {
            stubs.push(this.addResource(new registry_1.ResourceDefinition(resource.type, 'rest', `/resources/${resource.type}`, resource.description, Object.keys(resource.actions).map((actionName) => {
                var _a;
                const action = resource.actions[actionName];
                return new registry_1.ActionDefinition(actionName, (_a = action.title) !== null && _a !== void 0 ? _a : actionName, action.description, action.path, action.attributes || {});
            }), resource.attributes || {})));
        }
        return stubs;
    }
    getMethods() {
        return {
            resource: this.resource.bind(this),
            action: this.action.bind(this),
            syncResources: this.syncResources.bind(this),
        };
    }
}
exports.ResourceReporter = ResourceReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVzb3VyY2VzL3JlcG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUE2QztBQU03Qyx5Q0FBb0Y7QUFNcEYsTUFBYSxZQUFZO0lBQ3ZCLFlBQW9CLFFBQTBCLEVBQWtCLFlBQW9CO1FBQWhFLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQWtCLGlCQUFZLEdBQVosWUFBWSxDQUFRO0lBQUcsQ0FBQztJQUVqRixNQUFNLENBQUMsTUFBb0I7UUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBZ0IsQ0FDakMsTUFBTSxDQUFDLElBQUksRUFDWCxNQUFNLENBQUMsS0FBSyxFQUNaLE1BQU0sQ0FBQyxXQUFXLEVBQ2xCLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQ3hCLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUNGO0FBYkQsb0NBYUM7QUFRRDs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxnQkFBZ0I7SUFJM0IsWUFDVSxNQUFxQixFQUNyQixRQUEwQixFQUMxQixNQUFjO1FBRmQsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUNyQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTmhCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLFdBQU0sR0FBa0IsZUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBTzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztZQUN6QixPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRztZQUNqQyxPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLFVBQVUsSUFBSSxD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