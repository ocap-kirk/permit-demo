"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceRegistry = exports.ResourceDefinition = exports.ActionDefinition = exports.extractPatternAndContext = exports.NO_VERB = void 0;
const context_1 = require("../utils/context");
const dict_1 = require("../utils/dict");
const regex_1 = require("../utils/regex");
exports.NO_VERB = 'DEFAULT';
function extractPatternAndContext(path) {
    if (path.endsWith('/')) {
        path = path.slice(0, -1); // remove last "/"
    }
    const regex = /\:(\w+)/;
    const PLACEHOLDER = '(\\w+)';
    const matches = (0, regex_1.matchAll)(regex, path);
    const parts = [];
    const contextVars = [];
    let currentIndex = 0;
    for (const match of matches) {
        // save param name to context vars
        contextVars.push(match.groups[1]);
        // push (escaped) chunk before match
        parts.push((0, regex_1.escapeRegex)(path.slice(currentIndex, match.start)));
        // push placeholder regex instead of match
        parts.push(PLACEHOLDER);
        // advance the index after the match end
        currentIndex += match.start + match.length;
    }
    if (currentIndex < path.length) {
        parts.push((0, regex_1.escapeRegex)(path.slice(currentIndex)));
    }
    const pattern = new RegExp('^' + parts.join('') + '\\/?$');
    return {
        pattern: pattern,
        contextVars: contextVars,
    };
}
exports.extractPatternAndContext = extractPatternAndContext;
class ActionDefinition {
    constructor(name, title, description, path, attributes = {}, resourceId) {
        this.name = name;
        this.title = title;
        this.description = description;
        this.path = path;
        this.attributes = attributes;
        this._resourceId = undefined;
        this._resourceName = '';
        this.resourceId = resourceId;
    }
    get resourceId() {
        return this._resourceId;
    }
    set resourceId(id) {
        this._resourceId = id;
    }
    get resourceName() {
        return this._resourceName;
    }
    set resourceName(name) {
        this._resourceName = name;
    }
    get verb() {
        const v = this.attributes['verb'] || exports.NO_VERB;
        return v.toUpperCase();
    }
    dict() {
        return {
            name: this.name,
            title: this.title,
            description: this.description,
            path: this.path,
            attributes: this.attributes,
            resourceId: this.resourceId,
        };
    }
    repr() {
        return `Action( name=${this.name}, path=${this.path} )`;
    }
}
exports.ActionDefinition = ActionDefinition;
class ResourceDefinition {
    constructor(name, type, path, description, actions = [], attributes = {}) {
        this.name = name;
        this.type = type;
        this.path = path;
        this.description = description;
        this.actions = actions;
        this.attributes = attributes;
        this._remoteId = undefined;
        this.attributes = attributes;
    }
    get remoteId() {
        return this._remoteId;
    }
    set remoteId(id) {
        this._remoteId = id;
    }
    dict() {
        return {
            name: this.name,
            type: this.type,
            path: this.path,
            description: this.description,
            actions: this.actions.map((a) => a.dict()),
            attributes: this.attributes,
        };
    }
    repr() {
        return `Resource(name="${this.name}", path="${this.path}", actions=[${this.actions.map((a) => a.name)}])`;
    }
}
exports.ResourceDefinition = ResourceDefinition;
/**
 * TODO: remove this class completely.
 */
class ResourceSchemaBuilder {
    constructor(name, path, definition, context = {}) {
        this.name = name;
        this.path = path;
        this.definition = definition;
        this.context = context;
        this.definitionPath = (definition === null || definition === void 0 ? void 0 : definition.path) || undefined;
    }
    build() {
        var _a;
        return {
            type: this.name,
            tenant: this.context['tenant'] || '',
            attributes: ((_a = this.definition) === null || _a === void 0 ? void 0 : _a.attributes) || {},
            context: this.context,
        };
    }
}
exports.default = ResourceSchemaBuilder;
class ResourceRegistry {
    constructor() {
        this.resources = {};
        this.alreadySynced = new Set();
        this.processedPaths = {};
        this.actionMatchers = [];
        this.contextStore = new context_1.ContextStore();
    }
    get resourceList() {
        return Object.keys(this.resources).map((k) => this.resources[k]);
    }
    addResource(resource) {
        if (!(resource.name in this.resources)) {
            this.resources[resource.name] = resource;
        }
        resource.actions.forEach((action) => {
            action.resourceName = resource.name;
            const path = action.path ? action.path : resource.path;
            this.processActionPath(path, action.verb, resource.name, action.name);
        });
    }
    addActionToResource(resourceName, action) {
        if (!(resourceName in this.resources)) {
            return undefined;
        }
        const resource = this.resources[resourceName];
        action.resourceId = resource.remoteId;
        action.resourceName = resource.name;
        const existingActions = resource.actions.map((a) => a.name);
        if (!(action.name in existingActions)) {
            resource.actions.push(action);
        }
        const path = action.path ? action.path : resource.path;
        this.processActionPath(path, action.verb, resource.name, action.name);
        return action;
    }
    get paths() {
        return Array.from(Object.keys(this.processedPaths));
    }
    static actionKey(action) {
        return `${action.resourceName}:${action.name}`;
    }
    /**
     * parses the action URI (path) and http verb into a matcher regex with context vars (named params)
     */
    processActionPath(path, verb, resourceName, actionName) {
        let patternAndContext;
        if (this.processedPaths.hasOwnProperty(path)) {
            patternAndContext = this.processedPaths[path];
        }
        else {
            patternAndContext = extractPatternAndContext(path);
            this.processedPaths[path] = patternAndContext;
        }
        this.actionMatchers.push(Object.assign(Object.assign({}, patternAndContext), { resourceName: resourceName, actionName: actionName, verb: verb }));
    }
    isSynced(obj) {
        if (obj instanceof ResourceDefinition) {
            return obj.name in this.alreadySynced;
        }
        if (obj instanceof ActionDefinition) {
            return ResourceRegistry.actionKey(obj) in this.alreadySynced;
        }
        return false;
    }
    markAsSynced(obj, remoteId) {
        if (obj instanceof ResourceDefinition) {
            this.alreadySynced.add(obj.name);
            this.resources[obj.name].remoteId = remoteId;
            obj.actions.forEach((action) => {
                this.alreadySynced.add(ResourceRegistry.actionKey(action));
            });
        }
        if (obj instanceof ActionDefinition) {
            this.alreadySynced.add(ResourceRegistry.actionKey(obj));
        }
    }
    getUrlContext(path, verb = exports.NO_VERB) {
        for (const matcher of this.actionMatchers) {
            if (matcher.verb !== verb && verb !== exports.NO_VERB) {
                continue;
            }
            const match = path.match(matcher.pattern);
            if (match) {
                const resourceDef = this.resources[matcher.resourceName] || undefined;
                let context = {};
                const capturedGroups = match.slice(1); // the first group is the entire string
                if (matcher.contextVars.length == capturedGroups.length) {
                    // TODO dictZip should probably be replaced by lodash _.zipObject
                    context = (0, dict_1.dictZip)(matcher.contextVars, capturedGroups) || {};
                }
                const processedContext = this.contextStore.transform(this.contextStore.getDerivedContext(context));
                const resource = new ResourceSchemaBuilder(matcher.resourceName, path, resourceDef, processedContext).build();
                return {
                    resource: resource,
                    action: matcher.actionName,
                };
            }
        }
        return undefined;
    }
    getMethods() {
        return {
            getUrlContext: this.getUrlContext.bind(this),
        };
    }
}
exports.ResourceRegistry = ResourceRegistry;
//# sourceMappingURL=data:application/json;base64,