import { Logger } from 'pino';
import { IPermitConfig } from '../config';
import { CheckConfig, Context, ContextStore } from '../utils/context';
import { IAction, ICheckQuery, IResource, IUser, IUserPermissions } from './interfaces';
export declare class PermitError extends Error {
    constructor(message: string);
}
export declare class PermitConnectionError extends PermitError {
    constructor(message: string);
}
export declare class PermitPDPStatusError extends PermitError {
    constructor(message: string);
}
export interface IEnforcer {
    /**
     * Checks if a `user` is authorized to perform an `action` on a `resource` within the specified context.
     *
     * @param user     - The user object representing the user.
     * @param action   - The action to be performed on the resource.
     * @param resource - The resource object representing the resource.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns `true` if the user is authorized, `false` otherwise.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    check(user: IUser | string, action: IAction, resource: IResource | string, context?: Context, config?: CheckConfig): Promise<boolean>;
    /**
     * Checks multiple requests within the specified context.
     *
     * @param checks   - The check requests.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns array containing `true` if the user is authorized, `false` otherwise for each check request.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    bulkCheck(checks: Array<ICheckQuery>, context?: Context, config?: CheckConfig): Promise<Array<boolean>>;
    /**
     * Get all permissions for the specified user.
     *
     * @param user     - The user object representing the user.
     * @param tenants  - The list of tenants to filter the permissions on ( given by roles ).
     * @param resources - The list of resources to filter the permissions on ( given by resource roles ).
     * @param resource_types - The list of resource types to filter the permissions on ( given by resource roles ).
     * @returns object with key as the resource identifier and value as the resource details and permissions.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    getUserPermissions(user: IUser | string, tenants?: string[], resources?: string[], resource_types?: string[], config?: CheckConfig): Promise<IUserPermissions>;
}
/**
 * The {@link Enforcer} class is responsible for performing permission checks against the PDP.
 * It implements the {@link IEnforcer} interface.
 */
export declare class Enforcer implements IEnforcer {
    private config;
    private logger;
    contextStore: ContextStore;
    private client;
    /**
     * Creates an instance of the Enforcer class.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config: IPermitConfig, logger: Logger);
    getUserPermissions(user: IUser | string, tenants?: string[], resources?: string[], resource_types?: string[], config?: CheckConfig): Promise<IUserPermissions>;
    private getUserPermissionsWithExceptions;
    bulkCheck(checks: Array<ICheckQuery>, context?: Context, // context provided specifically for this query
    config?: CheckConfig): Promise<Array<boolean>>;
    private buildCheckInput;
    private checkInputRepr;
    private bulkCheckWithExceptions;
    check(user: IUser | string, action: IAction, resource: IResource | string, context?: Context, // context provided specifically for this query
    config?: CheckConfig): Promise<boolean>;
    private checkWithExceptions;
    private normalizeResource;
    private static userRepr;
    private static resourceRepr;
    private static resourceFromString;
    getMethods(): IEnforcer;
}
