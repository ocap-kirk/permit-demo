export interface Context {
    [id: string]: any;
}
export interface CheckConfig {
    timeout?: number;
    throwOnError?: boolean;
}
export interface ContextTransform {
    (context: Context): Context;
}
/**
 * Store for contexted passed as part of check() queries
 */
export declare class ContextStore {
    private baseContext;
    private transforms;
    /**
     * add context to the base context
     */
    add(context: Context): void;
    registerTransform(transform: ContextTransform): void;
    /**
     * merges the global context (this.context) with the context
     * provided for this specific query (context). the specific
     * context overrides the base (global) context.
     */
    getDerivedContext(context: Context): Context;
    transform(initialContext: Context): Context;
}
