"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideTestExecutionContext = exports.handleApiError = exports.printBreak = void 0;
const index_1 = require("../index");
const logger_1 = require("../logger");
const printBreak = () => {
    console.log('\n\n ----------- \n\n');
};
exports.printBreak = printBreak;
function handleApiError(error, message, t) {
    var _a, _b;
    const err = `${message}: status=${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status}, url=${error.request.url}, method=${error.request.method}, details=${(_b = error.response) === null || _b === void 0 ? void 0 : _b.data}`;
    t.context.logger.error(err);
    t.fail(err);
}
exports.handleApiError = handleApiError;
const provideTestExecutionContext = (t) => {
    // config
    const defaultPDPAddress = process.env.CLOUD_PDP === 'true' ? 'https://cloudpdp.api.permit.io' : 'http://localhost:7766';
    const defaultApiAddress = process.env.API_TIER === 'prod' ? 'https://api.permit.io' : 'http://localhost:8000';
    const token = process.env.PDP_API_KEY || '';
    const pdpAddress = process.env.PDP_URL || defaultPDPAddress;
    const apiUrl = process.env.PDP_CONTROL_PLANE || defaultApiAddress;
    if (!token) {
        t.fail('PDP_API_KEY is not configured, test cannot run!');
    }
    t.context.permit = new index_1.Permit({
        token,
        pdp: pdpAddress,
        apiUrl,
        log: {
            level: 'debug',
        },
    });
    t.context.logger = logger_1.LoggerFactory.createLogger(t.context.permit.config);
};
exports.provideTestExecutionContext = provideTestExecutionContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdHMvZml4dHVyZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0Esb0NBQWlFO0FBQ2pFLHNDQUEwQztBQUluQyxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUZXLFFBQUEsVUFBVSxjQUVyQjtBQUVGLFNBQWdCLGNBQWMsQ0FDNUIsS0FBMEIsRUFDMUIsT0FBZSxFQUNmLENBQWdDOztJQUVoQyxNQUFNLEdBQUcsR0FBRyxHQUFHLE9BQU8sWUFBWSxNQUFBLEtBQUssQ0FBQyxRQUFRLDBDQUFFLE1BQU0sU0FBUyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sYUFBYSxNQUFBLEtBQUssQ0FBQyxRQUFRLDBDQUFFLElBQUksRUFBRSxDQUFDO0lBQ3RKLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQVJELHdDQVFDO0FBRU0sTUFBTSwyQkFBMkIsR0FBRyxDQUFDLENBQWdDLEVBQUUsRUFBRTtJQUM5RSxTQUFTO0lBQ1QsTUFBTSxpQkFBaUIsR0FDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUM7SUFDaEcsTUFBTSxpQkFBaUIsR0FDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUM7SUFFdEYsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0lBQ3BELE1BQU0sVUFBVSxHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLGlCQUFpQixDQUFDO0lBQ3BFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksaUJBQWlCLENBQUM7SUFFbEUsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsaURBQWlELENBQUMsQ0FBQztLQUMzRDtJQUVELENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksY0FBTSxDQUFDO1FBQzVCLEtBQUs7UUFDTCxHQUFHLEVBQUUsVUFBVTtRQUNmLE1BQU07UUFDTixHQUFHLEVBQUU7WUFDSCxLQUFLLEVBQUUsT0FBTztTQUNmO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsc0JBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBekJXLFFBQUEsMkJBQTJCLCtCQXlCdEMifQ==