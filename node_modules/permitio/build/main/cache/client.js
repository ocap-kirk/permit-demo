"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalCacheClient = void 0;
const axios_1 = __importDefault(require("axios"));
const HTTP_404_NOT_FOUND = 404;
/**
 * The LocalCacheClient is able to fetch the latest cached (i.e: synced)
 * state from the policy agent (i.e: OPA). This client is very performant
 * and DOES NOT go outside the local network (i.e: VPC), in other words,
 * queries made by this client are complete private, and do not reach
 * the permit.io control plane in the cloud.
 */
class LocalCacheClient {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.client = axios_1.default.create({
            baseURL: `${this.config.pdp}/`,
            headers: {
                Authorization: `Bearer ${this.config.token}`,
                'Content-Type': 'application/json',
            },
        });
    }
    async isUser(userId) {
        const user = await this.getUser(userId);
        if (user === null) {
            return false;
        }
        return user.id === userId;
    }
    // cached object api
    async getUser(userId) {
        return await this.client
            .get(`local/users/${userId}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUser(${userId}): ${error}`);
                }
            }
            return null;
        });
    }
    async getUsers() {
        return await this.client
            .get(`local/users`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUsers(): ${error}`);
                }
            }
            return [];
        });
    }
    async getUserTenants(userId) {
        return await this.client
            .get(`local/users/${userId}/tenants`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUserTenants(${userId}): ${error}`);
                }
            }
            return null; // indicate user is not synced
        });
    }
    async getAssignedRoles(userId) {
        return await this.client
            .get(`local/users/${userId}/roles`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getAssignedRoles(${userId}): ${error}`);
                }
            }
            return null; // indicate user is not synced
        });
    }
    async getRoles() {
        return await this.client
            .get(`local/roles`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoles(): ${error}`);
                }
            }
            return [];
        });
    }
    async getRoleById(roleId) {
        return await this.client
            .get(`local/roles/${roleId}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoleById(${roleId}): ${error}`);
                }
            }
            return null;
        });
    }
    async getRoleByName(roleName) {
        return await this.client
            .get(`local/roles/by-name/${roleName}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoleByName(${roleName}): ${error}`);
                }
            }
            return null;
        });
    }
    async updatePolicy() {
        return this.client
            .post('policy-updater/trigger')
            .then((response) => {
            return response.status == 200;
        })
            .catch((error) => {
            this.logger.error(`tried to trigger policy update, got error: ${error}`);
            return false;
        });
    }
    async updatePolicyData() {
        return this.client
            .post('data-updater/trigger')
            .then((response) => {
            return response.status == 200;
        })
            .catch((error) => {
            this.logger.error(`tried to trigger policy update, got error: ${error}`);
            return false;
        });
    }
    async refresh() {
        return this.updatePolicy().then((triggered) => {
            if (!triggered)
                return false;
            return this.updatePolicyData().then((triggered) => {
                return triggered;
            });
        });
    }
    getMethods() {
        return {
            isUser: this.isUser.bind(this),
            getUser: this.getUser.bind(this),
            getUsers: this.getUsers.bind(this),
            getUserTenants: this.getUserTenants.bind(this),
            getAssignedRoles: this.getAssignedRoles.bind(this),
            getRoles: this.getRoles.bind(this),
            getRoleById: this.getRoleById.bind(this),
            getRoleByName: this.getRoleByName.bind(this),
            refresh: this.refresh.bind(this),
        };
    }
}
exports.LocalCacheClient = LocalCacheClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhY2hlL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBd0U7QUFLeEUsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUE4Qi9COzs7Ozs7R0FNRztBQUNILE1BQWEsZ0JBQWdCO0lBRzNCLFlBQW9CLE1BQXFCLEVBQVUsTUFBYztRQUE3QyxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUMvRCxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDekIsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUc7WUFDOUIsT0FBTyxFQUFFO2dCQUNQLGFBQWEsRUFBRSxVQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO2dCQUM1QyxjQUFjLEVBQUUsa0JBQWtCO2FBQ25DO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBYztRQUNoQyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDO0lBQzVCLENBQUM7SUFFRCxvQkFBb0I7SUFDYixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWM7UUFDakMsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNO2FBQ3JCLEdBQUcsQ0FBYyxlQUFlLE1BQU0sRUFBRSxDQUFDO2FBQ3pDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxLQUFpQixFQUFFLEVBQUU7WUFDM0IsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNsQixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLGtCQUFrQixFQUFFO29CQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixzREFBc0QsTUFBTSxNQUFNLEtBQUssRUFBRSxDQUMxRSxDQUFDO2lCQUNIO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRO1FBQ25CLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTTthQUNyQixHQUFHLENBQWdCLGFBQWEsQ0FBQzthQUNqQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBaUIsRUFBRSxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxrQkFBa0IsRUFBRTtvQkFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ3RGO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBYztRQUN4QyxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU07YUFDckIsR0FBRyxDQUFXLGVBQWUsTUFBTSxVQUFVLENBQUM7YUFDOUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtZQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssa0JBQWtCLEVBQUU7b0JBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLDZEQUE2RCxNQUFNLE1BQU0sS0FBSyxFQUFFLENBQ2pGLENBQUM7aUJBQ0g7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDLENBQUMsOEJBQThCO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFjO1FBQzFDLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTTthQUNyQixHQUFHLENBQWdCLGVBQWUsTUFBTSxRQUFRLENBQUM7YUFDakQsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtZQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssa0JBQWtCLEVBQUU7b0JBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLCtEQUErRCxNQUFNLE1BQU0sS0FBSyxFQUFFLENBQ25GLENBQUM7aUJBQ0g7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDLENBQUMsOEJBQThCO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRO1FBQ25CLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTTthQUNyQixHQUFHLENBQWdCLGFBQWEsQ0FBQzthQUNqQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBaUIsRUFBRSxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxrQkFBa0IsRUFBRTtvQkFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ3RGO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBYztRQUNyQyxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU07YUFDckIsR0FBRyxDQUFjLGVBQWUsTUFBTSxFQUFFLENBQUM7YUFDekMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtZQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssa0JBQWtCLEVBQUU7b0JBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLDBEQUEwRCxNQUFNLE1BQU0sS0FBSyxFQUFFLENBQzlFLENBQUM7aUJBQ0g7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFnQjtRQUN6QyxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU07YUFDckIsR0FBRyxDQUFjLHVCQUF1QixRQUFRLEVBQUUsQ0FBQzthQUNuRCxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBaUIsRUFBRSxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxrQkFBa0IsRUFBRTtvQkFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsNERBQTRELFFBQVEsTUFBTSxLQUFLLEVBQUUsQ0FDbEYsQ0FBQztpQkFDSDthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxLQUFLLENBQUMsWUFBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNO2FBQ2YsSUFBSSxDQUFDLHdCQUF3QixDQUFDO2FBQzlCLElBQUksQ0FBQyxDQUFDLFFBQXVCLEVBQUUsRUFBRTtZQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ2hDLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsOENBQThDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDekUsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxLQUFLLENBQUMsZ0JBQWdCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDZixJQUFJLENBQUMsc0JBQXNCLENBQUM7YUFDNUIsSUFBSSxDQUFDLENBQUMsUUFBdUIsRUFBRSxFQUFFO1lBQ2hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7UUFDaEMsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RSxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxTQUFTO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBRTdCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQ2hELE9BQU8sU0FBUyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sVUFBVTtRQUNmLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNsQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzlDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2xELFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDbEMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzVDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDakMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQS9MRCw0Q0ErTEMifQ==