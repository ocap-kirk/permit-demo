import axios from 'axios';
export class ReadOperation {
    constructor(callback) {
        this.callback = callback;
    }
    async run() {
        return await this.callback();
    }
}
export class WriteOperation {
    constructor(callback) {
        this.callback = callback;
    }
    async run() {
        return await this.callback();
    }
}
export class MutationsClient {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.client = axios.create();
        this.client = axios.create({
            baseURL: `${this.config.pdpURL}/`,
            headers: {
                Authorization: `Bearer ${this.config.token}`,
                'Content-Type': 'application/json',
            },
        });
    }
    // read api -----------------------------------------------------------------
    getUser(userKey) {
        return new ReadOperation(async () => {
            this.logger.info(`permit.api.getUser(${userKey})`);
            return this.client
                .get(`cloud/users/${userKey}`)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to get user with key: ${userKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    getRole(roleKey) {
        return new ReadOperation(async () => {
            this.logger.info(`permit.api.getRole(${roleKey})`);
            return this.client
                .get(`cloud/roles/${roleKey}`)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to get role with id: ${roleKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    getTenant(tenantKey) {
        return new ReadOperation(async () => {
            this.logger.info(`permit.api.getTenant(${tenantKey})`);
            return this.client
                .get(`cloud/tenants/${tenantKey}`)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to get tenant with id: ${tenantKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    // either in one tenant or in all tenants
    // TODO: fix schema
    getAssignedRoles(userKey, tenantKey) {
        return new ReadOperation(async () => {
            this.logger.info(`permit.api.getAssignedRoles(user=${userKey}, tenant=${tenantKey})`);
            let url = `cloud/role_assignments?user=${userKey}`;
            if (tenantKey !== undefined) {
                url += `&tenant=${tenantKey}`;
            }
            return await this.client
                .get(url)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`could not get user roles for user ${userKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    // write api ----------------------------------------------------------------
    // user mutations
    syncUser(user) {
        return new WriteOperation(async () => {
            this.logger.info(`permit.api.syncUser(${JSON.stringify(user)})`);
            return await this.client
                .put('cloud/users', user)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to sync user with key: ${user.key}, got error: ${error}`);
                throw error;
            });
        });
    }
    deleteUser(userKey) {
        return new WriteOperation(async () => {
            this.logger.info(`permit.api.deleteUser(${userKey})`);
            return await this.client
                .delete(`cloud/users/${userKey}`)
                .then((response) => {
                return { status: response.status };
            })
                .catch((error) => {
                this.logger.error(`tried to delete user with key: ${userKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    // tenant mutations
    createTenant(tenant) {
        return new WriteOperation(async () => {
            this.logger.info(`permit.api.createTenant(${JSON.stringify(tenant)})`);
            const data = {};
            data.externalId = tenant.key;
            data.name = tenant.name;
            if (tenant.description) {
                data.description = tenant.description;
            }
            return await this.client
                .put('cloud/tenants', data)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to create tenant with key: ${tenant.key}, got error: ${error}`);
                throw error;
            });
        });
    }
    updateTenant(tenant) {
        return new WriteOperation(async () => {
            this.logger.info(`permit.api.updateTenant(${JSON.stringify(tenant)})`);
            const data = {};
            data.name = tenant.name;
            if (tenant.description) {
                data.description = tenant.description;
            }
            return await this.client
                .patch(`cloud/tenants/${tenant.key}`, data)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`tried to update tenant with key: ${tenant.key}, got error: ${error}`);
                throw error;
            });
        });
    }
    deleteTenant(tenantKey) {
        return new WriteOperation(async () => {
            this.logger.info(`permit.api.deleteTenant(${tenantKey})`);
            return await this.client
                .delete(`cloud/tenants/${tenantKey}`)
                .then((response) => {
                return { status: response.status };
            })
                .catch((error) => {
                this.logger.error(`tried to delete tenant with key: ${tenantKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    // role mutations
    assignRole(userKey, roleKey, tenantKey) {
        return new WriteOperation(async () => {
            const data = {
                role: roleKey,
                user: userKey,
                scope: tenantKey,
            };
            this.logger.info(`permit.api.assignRole(${JSON.stringify(data)})`);
            return await this.client
                .post('cloud/role_assignments', data)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`could not assign role ${roleKey} to ${userKey} in tenant ${tenantKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    unassignRole(userKey, roleKey, tenantKey) {
        return new WriteOperation(async () => {
            const data = {
                role: roleKey,
                user: userKey,
                scope: tenantKey,
            };
            this.logger.info(`permit.api.assignRole(${JSON.stringify(data)})`);
            return await this.client
                .delete(`cloud/role_assignments?role=${roleKey}&user=${userKey}&scope=${tenantKey}`)
                .then((response) => {
                return response.data;
            })
                .catch((error) => {
                this.logger.error(`could not unassign role ${roleKey} of ${userKey} in tenant ${tenantKey}, got error: ${error}`);
                throw error;
            });
        });
    }
    // cloud api proxy ----------------------------------------------------------
    async read(...operations) {
        // reads do not need to be resolved in order
        return await Promise.all(operations.map((op) => op.run()));
    }
    async write(...operations) {
        const results = [];
        for (const op of operations) {
            const result = await op.run();
            results.push(result);
        }
        return results;
    }
    get api() {
        return {
            // read methods
            isUser: this.isUser.bind(this),
            getUser: this.getUser.bind(this),
            getUsers: this.getUsers.bind(this),
            getRole: this.getRole.bind(this),
            getRoles: this.getRoles.bind(this),
            getTenant: this.getTenant.bind(this),
            getTenants: this.getTenants.bind(this),
            getUserTenants: this.getUserTenants.bind(this),
            getResources: this.getResources.bind(this),
            getResource: this.getResource.bind(this),
            getActions: this.getActions.bind(this),
            getAction: this.getAction.bind(this),
            getCurrentOrganization: this.getCurrentOrganization.bind(this),
            getCurrentProject: this.getCurrentProject.bind(this),
            getCurrentEnvironment: this.getCurrentEnvironment.bind(this),
            // getLastUpdateFromServer: this.getLastUpdateFromServer.bind(this),
            // getUptime: this.getUptime.bind(this),
            getAssignedRoles: this.getAssignedRoles.bind(this),
            // write methods
            syncUser: this.syncUser.bind(this),
            createUser: this.createUser.bind(this),
            updateUser: this.updateUser.bind(this),
            deleteUser: this.deleteUser.bind(this),
            createTenant: this.createTenant.bind(this),
            updateTenant: this.updateTenant.bind(this),
            deleteTenant: this.deleteTenant.bind(this),
            createResource: this.createResource.bind(this),
            updateResource: this.updateResource.bind(this),
            deleteResource: this.deleteResource.bind(this),
            createAction: this.createAction.bind(this),
            updateAction: this.updateAction.bind(this),
            deleteAction: this.deleteAction.bind(this),
            createRole: this.createRole.bind(this),
            updateRole: this.updateRole.bind(this),
            deleteRole: this.deleteRole.bind(this),
            assignRole: this.assignRole.bind(this),
            unassignRole: this.unassignRole.bind(this),
        };
    }
    getMethods() {
        return {
            // read: this.read.bind(this),
            // write: this.write.bind(this),
            api: this.api,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,