/**
 * Based on https://github.com/AlbertoFdzM/express-list-endpoints/blob/0b14cc3a5c2a2422d1e3712085203acb4a0b5cfe/src/index.js
 * + additional change to expose the callback function
 */
import _ from 'lodash';
// var debug = require('debug')('express-list-endpoints')
const regexpExpressRegexp = /^\/\^\\\/(?:(:?[\w\\.-]*(?:\\\/:?[\w\\.-]*)*)|(\(\?:\(\[\^\\\/]\+\?\)\)))\\\/.*/;
// var arrayPathItemRegexp = /\^[^^$]*\\\/\?\(\?=\\\/\|\$\)\|?/
// var arrayPathsRegexp = /\(\?:((\^[^^$]*\\\/\?\(\?=\\\/\|\$\)\|?)+)\)\/i?/
const expressRootRegexp = '/^\\/?(?=\\/|$)/i';
const regexpExpressParam = /\(\?:\(\[\^\\\/]\+\?\)\)/g;
const STACK_ITEM_VALID_NAMES = ['router', 'bound dispatch', 'mounted_app'];
/**
 * Returns all the verbs detected for the passed route
 */
const getRouteMethods = function (route) {
    const methods = [];
    for (const method in route.methods) {
        if (method === '_all')
            continue;
        methods.push(method.toUpperCase());
    }
    return methods;
};
/**
 * Returns the names (or anonymous) of all the middleware attached to the
 * passed route
 */
const getRouteMiddleware = function (route) {
    return route.stack.map(function (item) {
        return item.handle || undefined;
    });
};
/**
 * Returns true if found regexp related with express params
 */
const hasParams = function (pathRegexp) {
    return regexpExpressParam.test(pathRegexp);
};
/**
 * Utility function for parseExpressRoute
 */
function parseSingleRoute(route, basePath, path) {
    const methods = getRouteMethods(route);
    const middleware = getRouteMiddleware(route);
    // Actual functions without middleware (middleware comes first)
    const endFunctions = _.slice(middleware, _.size(middleware) - _.size(methods));
    return {
        path: basePath + (basePath && path === '/' ? '' : path),
        methods,
        middleware,
        // layer: layer,
        // route: route,
        namedMethods: _.fromPairs(_.reject(_.zip(methods, _.map(endFunctions, 'name')), ([, v]) => v === undefined)),
        methodToCallable: _.fromPairs(_.zip(methods, endFunctions)),
    };
}
/**
 * @param {Object} route Express route object to be parsed
 * @param {string} basePath The basePath the route is on
 * @param {Object} layer The layer that  wraps the route
 * @return {Object[]} Endpoints info
 */
const parseExpressRoute = function (route, basePath) {
    const endpoints = [];
    if (Array.isArray(route.path)) {
        route.path.forEach(function (path) {
            const endpoint = parseSingleRoute(route, basePath, path);
            endpoints.push(endpoint);
        });
    }
    else {
        const endpoint = parseSingleRoute(route, basePath, route.path);
        endpoints.push(endpoint);
    }
    return endpoints;
};
const parseExpressPath = function (expressPathRegexp, params) {
    let parsedPath = regexpExpressRegexp.exec(expressPathRegexp);
    let parsedRegexp = expressPathRegexp;
    let paramIdx = 0;
    while (hasParams(parsedRegexp)) {
        const paramId = ':' + params[paramIdx].name;
        parsedRegexp = parsedRegexp.toString().replace(/\(\?:\(\[\^\\\/]\+\?\)\)/, paramId);
        paramIdx++;
    }
    if (parsedRegexp !== expressPathRegexp) {
        parsedPath = regexpExpressRegexp.exec(parsedRegexp);
    }
    parsedPath = parsedPath[1].replace(/\\\//g, '/');
    return parsedPath;
};
const parseEndpoints = function (app, basePath, endpoints) {
    const stack = app.stack || (app._router && app._router.stack);
    endpoints = endpoints || [];
    basePath = basePath || '';
    if (!stack) {
        addEndpoints(endpoints, [
            {
                path: basePath,
                methods: [],
                middleware: [],
            },
        ]);
    }
    else {
        stack.forEach(function (stackItem) {
            if (stackItem.route) {
                const newEndpoints = parseExpressRoute(stackItem.route, basePath);
                endpoints = addEndpoints(endpoints, newEndpoints);
            }
            else if (STACK_ITEM_VALID_NAMES.indexOf(stackItem.name) > -1) {
                if (regexpExpressRegexp.test(stackItem.regexp)) {
                    const parsedPath = parseExpressPath(stackItem.regexp, stackItem.keys);
                    parseEndpoints(stackItem.handle, basePath + '/' + parsedPath, endpoints);
                }
                else if (!stackItem.path &&
                    stackItem.regexp &&
                    stackItem.regexp.toString() !== expressRootRegexp) {
                    const regEcpPath = ' RegExp(' + stackItem.regexp + ') ';
                    parseEndpoints(stackItem.handle, basePath + '/' + regEcpPath, endpoints);
                }
                else {
                    parseEndpoints(stackItem.handle, basePath, endpoints);
                }
            }
        });
    }
    return endpoints;
};
/**
 * Ensures the path of the new endpoints isn't yet in the array.
 * If the path is already in the array merges the endpoints with the existing
 * one, if not, it adds them to the array.
 *
 * @param {Array} endpoints Array of current endpoints
 * @param {Object[]} newEndpoints New endpoints to be added to the array
 * @returns {Array} Updated endpoints array
 */
const addEndpoints = function (endpoints, newEndpoints) {
    newEndpoints.forEach(function (newEndpoint) {
        const foundEndpointIdx = endpoints.findIndex(function (item) {
            return item.path === newEndpoint.path;
        });
        if (foundEndpointIdx > -1) {
            const foundEndpoint = endpoints[foundEndpointIdx];
            const newMethods = newEndpoint.methods.filter(function (method) {
                return foundEndpoint.methods.indexOf(method) === -1;
            });
            const newMiddleware = newEndpoint.middleware.filter(function (middleware) {
                return foundEndpoint.middleware.indexOf(middleware) === -1;
            });
            foundEndpoint.methods = foundEndpoint.methods.concat(newMethods);
            foundEndpoint.middleware = foundEndpoint.middleware.concat(newMiddleware);
            foundEndpoint.namedMethods = _.assign(foundEndpoint.namedMethods, newEndpoint.namedMethods);
            foundEndpoint.methodToCallable = _.assign(foundEndpoint.methodToCallable, newEndpoint.methodToCallable);
        }
        else {
            endpoints.push(newEndpoint);
        }
    });
    return endpoints;
};
/**
 * Returns an array of strings with all the detected endpoints
 * @param {Object} app the express/route instance to get the endpoints from
 */
const getEndpoints = function (app) {
    const endpoints = parseEndpoints(app);
    return endpoints;
};
export default getEndpoints;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdEVuZHBvaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9pbnN0cnVtZW50L2FwcE1hcHBlci9tYXBFeHByZXNzL2xpc3RFbmRwb2ludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXZCLHlEQUF5RDtBQUN6RCxNQUFNLG1CQUFtQixHQUN2QixpRkFBaUYsQ0FBQztBQUNwRiwrREFBK0Q7QUFDL0QsNEVBQTRFO0FBQzVFLE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7QUFDOUMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztBQUV2RCxNQUFNLHNCQUFzQixHQUFHLENBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxlQUFlLEdBQUcsVUFBVSxLQUFVO0lBQzFDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUVuQixLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDbEMsSUFBSSxNQUFNLEtBQUssTUFBTTtZQUFFLFNBQVM7UUFFaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztLQUNwQztJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxLQUF1QjtJQUMxRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBK0I7UUFDOUQsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxTQUFTLEdBQUcsVUFBVSxVQUFrQjtJQUM1QyxPQUFPLGtCQUFrQixD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