import { Logger } from 'pino';
import { IPermitConfig } from '../config';
export interface ISyncedRole {
    id: string;
    name: string;
    tenant_id?: string;
    metadata?: Record<string, any>;
    permissions?: string[];
}
export interface ISyncedUser {
    id: string;
    name?: string;
    email?: string;
    metadata?: Record<string, any>;
    roles: ISyncedRole[];
}
export interface IPermitCache {
    isUser(userId: string): Promise<boolean>;
    getUser(userId: string): Promise<ISyncedUser | null>;
    getUsers(): Promise<ISyncedUser[]>;
    getUserTenants(userId: string): Promise<string[] | null>;
    getAssignedRoles(userId: string): Promise<ISyncedRole[] | null>;
    getRoles(): Promise<ISyncedRole[]>;
    getRoleById(roleId: string): Promise<ISyncedRole | null>;
    getRoleByName(roleName: string): Promise<ISyncedRole | null>;
    refresh(): Promise<boolean>;
}
/**
 * The LocalCacheClient is able to fetch the latest cached (i.e: synced)
 * state from the policy agent (i.e: OPA). This client is very performant
 * and DOES NOT go outside the local network (i.e: VPC), in other words,
 * queries made by this client are complete private, and do not reach
 * the permit.io control plane in the cloud.
 */
export declare class LocalCacheClient implements IPermitCache {
    private config;
    private logger;
    private client;
    constructor(config: IPermitConfig, logger: Logger);
    isUser(userId: string): Promise<boolean>;
    getUser(userId: string): Promise<ISyncedUser | null>;
    getUsers(): Promise<ISyncedUser[]>;
    getUserTenants(userId: string): Promise<string[] | null>;
    getAssignedRoles(userId: string): Promise<ISyncedRole[] | null>;
    getRoles(): Promise<ISyncedRole[]>;
    getRoleById(roleId: string): Promise<ISyncedRole | null>;
    getRoleByName(roleName: string): Promise<ISyncedRole | null>;
    private updatePolicy;
    private updatePolicyData;
    refresh(): Promise<boolean>;
    getMethods(): IPermitCache;
}
