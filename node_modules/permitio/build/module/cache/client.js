import axios from 'axios';
const HTTP_404_NOT_FOUND = 404;
/**
 * The LocalCacheClient is able to fetch the latest cached (i.e: synced)
 * state from the policy agent (i.e: OPA). This client is very performant
 * and DOES NOT go outside the local network (i.e: VPC), in other words,
 * queries made by this client are complete private, and do not reach
 * the permit.io control plane in the cloud.
 */
export class LocalCacheClient {
    config;
    logger;
    client;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.client = axios.create({
            baseURL: `${this.config.pdp}/`,
            headers: {
                Authorization: `Bearer ${this.config.token}`,
                'Content-Type': 'application/json',
            },
        });
    }
    async isUser(userId) {
        const user = await this.getUser(userId);
        if (user === null) {
            return false;
        }
        return user.id === userId;
    }
    // cached object api
    async getUser(userId) {
        return await this.client
            .get(`local/users/${userId}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUser(${userId}): ${error}`);
                }
            }
            return null;
        });
    }
    async getUsers() {
        return await this.client
            .get(`local/users`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUsers(): ${error}`);
                }
            }
            return [];
        });
    }
    async getUserTenants(userId) {
        return await this.client
            .get(`local/users/${userId}/tenants`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getUserTenants(${userId}): ${error}`);
                }
            }
            return null; // indicate user is not synced
        });
    }
    async getAssignedRoles(userId) {
        return await this.client
            .get(`local/users/${userId}/roles`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getAssignedRoles(${userId}): ${error}`);
                }
            }
            return null; // indicate user is not synced
        });
    }
    async getRoles() {
        return await this.client
            .get(`local/roles`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoles(): ${error}`);
                }
            }
            return [];
        });
    }
    async getRoleById(roleId) {
        return await this.client
            .get(`local/roles/${roleId}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoleById(${roleId}): ${error}`);
                }
            }
            return null;
        });
    }
    async getRoleByName(roleName) {
        return await this.client
            .get(`local/roles/by-name/${roleName}`)
            .then((response) => {
            return response.data;
        })
            .catch((error) => {
            if (error.response) {
                if (error.response.status !== HTTP_404_NOT_FOUND) {
                    this.logger.error(`unexpected error when calling permit.cache.getRoleByName(${roleName}): ${error}`);
                }
            }
            return null;
        });
    }
    async updatePolicy() {
        return this.client
            .post('policy-updater/trigger')
            .then((response) => {
            return response.status == 200;
        })
            .catch((error) => {
            this.logger.error(`tried to trigger policy update, got error: ${error}`);
            return false;
        });
    }
    async updatePolicyData() {
        return this.client
            .post('data-updater/trigger')
            .then((response) => {
            return response.status == 200;
        })
            .catch((error) => {
            this.logger.error(`tried to trigger policy update, got error: ${error}`);
            return false;
        });
    }
    async refresh() {
        return this.updatePolicy().then((triggered) => {
            if (!triggered)
                return false;
            return this.updatePolicyData().then((triggered) => {
                return triggered;
            });
        });
    }
    getMethods() {
        return {
            isUser: this.isUser.bind(this),
            getUser: this.getUser.bind(this),
            getUsers: this.getUsers.bind(this),
            getUserTenants: this.getUserTenants.bind(this),
            getAssignedRoles: this.getAssignedRoles.bind(this),
            getRoles: this.getRoles.bind(this),
            getRoleById: this.getRoleById.bind(this),
            getRoleByName: this.getRoleByName.bind(this),
            refresh: this.refresh.bind(this),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhY2hlL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQW1ELE1BQU0sT0FBTyxDQUFDO0FBS3hFLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBOEIvQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWdCO0lBR1A7SUFBK0I7SUFGM0MsTUFBTSxDQUFnQjtJQUU5QixZQUFvQixNQUFxQixFQUFVLE1BQWM7UUFBN0MsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDL0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3pCLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQzlCLE9BQU8sRUFBRTtnQkFDUCxhQUFhLEVBQUUsVUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDNUMsY0FBYyxFQUFFLGtCQUFrQjthQUNuQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQztJQUM1QixDQUFDO0lBRUQsb0JBQW9CO0lBQ2IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTTthQUNyQixHQUFHLENBQWMsZUFBZSxNQUFNLEVBQUUsQ0FBQzthQUN6QyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixPQUFPLFFB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