import axios from 'axios';
import { ActionDefinition, ResourceDefinition } from './registry';
export class ResourceStub {
    reporter;
    resourceName;
    constructor(reporter, resourceName) {
        this.reporter = reporter;
        this.resourceName = resourceName;
    }
    action(config) {
        const action = new ActionDefinition(config.name, config.title, config.description, config.path, config.attributes || {});
        this.reporter.addActionToResource(this.resourceName, action);
    }
}
/**
 * the ResourceReporter is used to sync resources and actions
 * (the authorization enforcement points) defined by the app to the
 * permit.io control plane in the cloud, so that policy and permissions
 * may be defined by the control plane. The only data permit.io needs to
 * know about the app is the available enforcement point (i.e: resources
 * and actions).
 */
export class ResourceReporter {
    config;
    registry;
    logger;
    initialized = false;
    client = axios.create();
    constructor(config, registry, logger) {
        this.config = config;
        this.registry = registry;
        this.logger = logger;
        this.client = axios.create({
            baseURL: `${this.config.pdpUrl}/`,
            headers: {
                Authorization: `Bearer ${this.config.token}`,
                'Content-Type': 'application/json',
            },
        });
        this.initialized = true; // TODO: remove this
        this.syncResourcesToControlPlane();
    }
    get token() {
        return this.config.token;
    }
    // resources and actions
    addResource(resource) {
        this.registry.addResource(resource);
        this.maybeSyncResource(resource);
        return new ResourceStub(this, resource.name);
    }
    addActionToResource(resourceName, actionDef) {
        const action = this.registry.addActionToResource(resourceName, actionDef);
        if (action) {
            this.maybeSyncAction(action);
        }
    }
    maybeSyncResource(resource) {
        if (this.initialized && !this.registry.isSynced(resource)) {
            this.logger.info(`syncing resource: ${resource.repr()}`);
            this.client
                .put(`cloud/resources/${resource.name}`, resource.dict())
                .then((response) => {
                this.registry.markAsSynced(resource, response.data.id);
            })
                .catch((error) => {
                this.logger.error(`tried to sync resource ${resource.name}, got error: ${error}`);
            });
        }
    }
    maybeSyncAction(action) {
        if (!action.resourceId) {
            return;
        }
        const resourceId = action.resourceId;
        if (this.initialized && !this.registry.isSynced(action)) {
            this.logger.info(`syncing action: ${action.repr()}`);
            this.client
                .put(`cloud/resources/${resourceId}/actions`, action.dict())
                .then((response) => {
                this.registry.markAsSynced(action, response.data.id);
            })
                .catch((error) => {
                this.logger.error(`tried to sync action ${action.name}, got error: ${error}`);
            });
        }
    }
    syncResourcesToControlPlane() {
        // will also sync actions
        for (const resource of this.registry.resourceList) {
            this.maybeSyncResource(resource);
        }
    }
    resource(config) {
        const resource = new ResourceDefinition(config.name, config.type, config.path, config.description, config.actions || [], config.attributes || {});
        return this.addResource(resource);
    }
    action(config) {
        return new ActionDefinition(config.name, config.title, config.description, config.path, config.attributes || {});
    }
    // TODO: currently we use the old api (PUT single resource)
    // due to mismatches with the resource registry
    syncResources(config) {
        const stubs = [];
        for (const resource of config.resources) {
            stubs.push(this.addResource(new ResourceDefinition(resource.type, 'rest', `/resources/${resource.type}`, resource.description, Object.keys(resource.actions).map((actionName) => {
                const action = resource.actions[actionName];
                return new ActionDefinition(actionName, action.title ?? actionName, action.description, action.path, action.attributes || {});
            }), resource.attributes || {})));
        }
        return stubs;
    }
    getMethods() {
        return {
            resource: this.resource.bind(this),
            action: this.action.bind(this),
            syncResources: this.syncResources.bind(this),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVzb3VyY2VzL3JlcG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBd0IsTUFBTSxPQUFPLENBQUM7QUFNN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFvQixNQUFNLFlBQVksQ0FBQztBQU1wRixNQUFNLE9BQU8sWUFBWTtJQUNIO0lBQTRDO0lBQWhFLFlBQW9CLFFBQTBCLEVBQWtCLFlBQW9CO1FBQWhFLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQWtCLGlCQUFZLEdBQVosWUFBWSxDQUFRO0lBQUcsQ0FBQztJQUVqRixNQUFNLENBQUMsTUFBb0I7UUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FDakMsTUFBTSxDQUFDLElBQUksRUFDWCxNQUFNLENBQUMsS0FBSyxFQUNaLE1BQU0sQ0FBQyxXQUFXLEVBQ2xCLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQ3hCLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUNGO0FBUUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFLakI7SUFDQTtJQUNBO0lBTkYsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUNwQixNQUFNLEdBQWtCLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUUvQyxZQUNVLE1BQXFCLEVBQ3JCLFFBQTBCLEVBQzFCLE1BQWM7UUFGZCxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQ3JCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQzFCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3pCLE9BQU8sRUFB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