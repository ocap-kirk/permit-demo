import { ContextStore } from '../utils/context';
import { dictZip } from '../utils/dict';
import { escapeRegex, matchAll } from '../utils/regex';
export const NO_VERB = 'DEFAULT';
export function extractPatternAndContext(path) {
    if (path.endsWith('/')) {
        path = path.slice(0, -1); // remove last "/"
    }
    const regex = /\:(\w+)/;
    const PLACEHOLDER = '(\\w+)';
    const matches = matchAll(regex, path);
    const parts = [];
    const contextVars = [];
    let currentIndex = 0;
    for (const match of matches) {
        // save param name to context vars
        contextVars.push(match.groups[1]);
        // push (escaped) chunk before match
        parts.push(escapeRegex(path.slice(currentIndex, match.start)));
        // push placeholder regex instead of match
        parts.push(PLACEHOLDER);
        // advance the index after the match end
        currentIndex += match.start + match.length;
    }
    if (currentIndex < path.length) {
        parts.push(escapeRegex(path.slice(currentIndex)));
    }
    const pattern = new RegExp('^' + parts.join('') + '\\/?$');
    return {
        pattern: pattern,
        contextVars: contextVars,
    };
}
export class ActionDefinition {
    name;
    title;
    description;
    path;
    attributes;
    _resourceId = undefined;
    _resourceName = '';
    constructor(name, title, description, path, attributes = {}, resourceId) {
        this.name = name;
        this.title = title;
        this.description = description;
        this.path = path;
        this.attributes = attributes;
        this.resourceId = resourceId;
    }
    get resourceId() {
        return this._resourceId;
    }
    set resourceId(id) {
        this._resourceId = id;
    }
    get resourceName() {
        return this._resourceName;
    }
    set resourceName(name) {
        this._resourceName = name;
    }
    get verb() {
        const v = this.attributes['verb'] || NO_VERB;
        return v.toUpperCase();
    }
    dict() {
        return {
            name: this.name,
            title: this.title,
            description: this.description,
            path: this.path,
            attributes: this.attributes,
            resourceId: this.resourceId,
        };
    }
    repr() {
        return `Action( name=${this.name}, path=${this.path} )`;
    }
}
export class ResourceDefinition {
    name;
    type;
    path;
    description;
    actions;
    attributes;
    _remoteId = undefined;
    constructor(name, type, path, description, actions = [], attributes = {}) {
        this.name = name;
        this.type = type;
        this.path = path;
        this.description = description;
        this.actions = actions;
        this.attributes = attributes;
        this.attributes = attributes;
    }
    get remoteId() {
        return this._remoteId;
    }
    set remoteId(id) {
        this._remoteId = id;
    }
    dict() {
        return {
            name: this.name,
            type: this.type,
            path: this.path,
            description: this.description,
            actions: this.actions.map((a) => a.dict()),
            attributes: this.attributes,
        };
    }
    repr() {
        return `Resource(name="${this.name}", path="${this.path}", actions=[${this.actions.map((a) => a.name)}])`;
    }
}
/**
 * TODO: remove this class completely.
 */
export default class ResourceSchemaBuilder {
    name;
    path;
    definition;
    context;
    definitionPath;
    constructor(name, path, definition, context = {}) {
        this.name = name;
        this.path = path;
        this.definition = definition;
        this.context = context;
        this.definitionPath = definition?.path || undefined;
    }
    build() {
        return {
            type: this.name,
            tenant: this.context['tenant'] || '',
            attributes: this.definition?.attributes || {},
            context: this.context,
        };
    }
}
export class ResourceRegistry {
    resources = {};
    alreadySynced = new Set();
    processedPaths = {};
    actionMatchers = [];
    contextStore = new ContextStore();
    get resourceList() {
        return Object.keys(this.resources).map((k) => this.resources[k]);
    }
    addResource(resource) {
        if (!(resource.name in this.resources)) {
            this.resources[resource.name] = resource;
        }
        resource.actions.forEach((action) => {
            action.resourceName = resource.name;
            const path = action.path ? action.path : resource.path;
            this.processActionPath(path, action.verb, resource.name, action.name);
        });
    }
    addActionToResource(resourceName, action) {
        if (!(resourceName in this.resources)) {
            return undefined;
        }
        const resource = this.resources[resourceName];
        action.resourceId = resource.remoteId;
        action.resourceName = resource.name;
        const existingActions = resource.actions.map((a) => a.name);
        if (!(action.name in existingActions)) {
            resource.actions.push(action);
        }
        const path = action.path ? action.path : resource.path;
        this.processActionPath(path, action.verb, resource.name, action.name);
        return action;
    }
    get paths() {
        return Array.from(Object.keys(this.processedPaths));
    }
    static actionKey(action) {
        return `${action.resourceName}:${action.name}`;
    }
    /**
     * parses the action URI (path) and http verb into a matcher regex with context vars (named params)
     */
    processActionPath(path, verb, resourceName, actionName) {
        let patternAndContext;
        if (this.processedPaths.hasOwnProperty(path)) {
            patternAndContext = this.processedPaths[path];
        }
        else {
            patternAndContext = extractPatternAndContext(path);
            this.processedPaths[path] = patternAndContext;
        }
        this.actionMatchers.push({
            ...patternAndContext,
            resourceName: resourceName,
            actionName: actionName,
            verb: verb,
        });
    }
    isSynced(obj) {
        if (obj instanceof ResourceDefinition) {
            return obj.name in this.alreadySynced;
        }
        if (obj instanceof ActionDefinition) {
            return ResourceRegistry.actionKey(obj) in this.alreadySynced;
        }
        return false;
    }
    markAsSynced(obj, remoteId) {
        if (obj instanceof ResourceDefinition) {
            this.alreadySynced.add(obj.name);
            this.resources[obj.name].remoteId = remoteId;
            obj.actions.forEach((action) => {
                this.alreadySynced.add(ResourceRegistry.actionKey(action));
            });
        }
        if (obj instanceof ActionDefinition) {
            this.alreadySynced.add(ResourceRegistry.actionKey(obj));
        }
    }
    getUrlContext(path, verb = NO_VERB) {
        for (const matcher of this.actionMatchers) {
            if (matcher.verb !== verb && verb !== NO_VERB) {
                continue;
            }
            const match = path.match(matcher.pattern);
            if (match) {
                const resourceDef = this.resources[matcher.resourceName] || undefined;
                let context = {};
                const capturedGroups = match.slice(1); // the first group is the entire string
                if (matcher.contextVars.length == capturedGroups.length) {
                    // TODO dictZip should probably be replaced by lodash _.zipObject
                    context = dictZip(matcher.contextVars, capturedGroups) || {};
                }
                const processedContext = this.contextStore.transform(this.contextStore.getDerivedContext(context));
                const resource = new ResourceSchemaBuilder(matcher.resourceName, path, resourceDef, processedContext).build();
                return {
                    resource: resource,
                    action: matcher.actionName,
                };
            }
        }
        return undefined;
    }
    getMethods() {
        return {
            getUrlContext: this.getUrlContext.bind(this),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVzb3VyY2VzL3JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFjLE1BQU0sZ0JBQWdCLENBQUM7QUFrQm5FLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFFakMsTUFBTSxVQUFVLHdCQUF3QixDQUFDLElBQVk7SUFDbkQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCO0tBQzdDO0lBRUQsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDO0lBQ3hCLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztJQUU3QixNQUFNLE9BQU8sR0FBaUIsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVwRCxNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDO0lBRWpDLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztJQUNyQixLQUFLLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRTtRQUMzQixrQ0FBa0M7UUFDbEMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsb0NBQW9DO1FBQ3BDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENB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