import { ResourceRelationsApi as AutogenResourceRelationsApi, } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { BasePermitApi } from './base'; // eslint-disable-line @typescript-eslint/no-unused-vars
import { ApiContextLevel, ApiKeyLevel } from './context'; // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * API client for interacting with the Resource Relations API.
 */
export class ResourceRelationsApi extends BasePermitApi {
    relationsApi;
    /**
     * Creates an instance of the ResourceRelationsApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.relationsApi = new AutogenResourceRelationsApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of all resource relations that are defined for a given resource.
     * @param params - pagination and filtering params, @see {@link IListRelations}
     * @returns A promise that resolves to an array of RelationRead objects representing the relations.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { resourceKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.listResourceRelations({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                page,
                perPage,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a resource relation based on the resource key and the relation key.
     *
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(resourceKey, relationKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.getResourceRelation({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                relationId: relationKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves an relation based on the resource key and the relation key.
     * Alias for the {@link get} method.
     *
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(resourceKey, relationKey) {
        return await this.get(resourceKey, relationKey);
    }
    /**
     * Retrieves an relation based on the resource ID and the relation ID.
     * Alias for the {@link get} method.
     *
     * @param resourceId - The resource ID.
     * @param relationId - The relation ID.
     * @returns A promise that resolves to a RelationRead object representing the relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(resourceId, relationId) {
        return await this.get(resourceId, relationId);
    }
    /**
     * Creates a new resource relation.
     *
     * @param resourceKey - The resource key.
     * @param RelationData - The relation data.
     * @returns A promise that resolves to a RelationRead object representing the created relation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(resourceKey, RelationData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationsApi.createResourceRelation({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                relationCreate: RelationData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a relation based on the resource key and relation key.
     * @param resourceKey - The resource key.
     * @param relationKey - The relation key.
     * @returns A promise that resolves when the relation is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(resourceKey, relationKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            await this.relationsApi.deleteResourceRelation({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                relationId: relationKey,
            });
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtcmVsYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS9yZXNvdXJjZS1yZWxhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUNMLG9CQUFvQixJQUFJLDJCQUEyQixHQUdwRCxNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUMsT0FBTyxFQUFFLGFBQWEsRUFBK0IsTUFBTSxRQUFRLENBQUMsQ0FBQyx3REFBd0Q7QUFDN0gsT0FBTyxFQUFjLGVBQWUsRUFBRSxXQUFXLEVBQXNCLE1BQU0sV0FBVyxDQUFDLENBQUMsd0RBQXdEO0FBOEVsSjs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxhQUFhO0lBQzdDLFlBQVksQ0FBOEI7SUFFbEQ7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLDJCQUEyQixDQUNqRCxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQXNCO1FBQ3RDLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3hELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FB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