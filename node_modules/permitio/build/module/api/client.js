import axios from 'axios';
import { APIKeysApi, ConditionSetRulesApi, ConditionSetsApi, Configuration, ResourcesApi, RoleAssignmentsApi, RolesApi, TenantsApi, UsersApi, } from '../openapi';
export class ApiClient {
    config;
    logger;
    #gotScope = false;
    project;
    environment;
    scope;
    users;
    tenants;
    roles;
    conditionSets;
    conditionSetRules;
    roleAssignments;
    resources;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.project = 'default';
        this.environment = 'prod';
        const axiosClientConfig = new Configuration({
            basePath: `${this.config.apiUrl}`,
            accessToken: this.config.token,
        });
        this.scope = new APIKeysApi(axiosClientConfig);
        this.users = new UsersApi(axiosClientConfig);
        this.tenants = new TenantsApi(axiosClientConfig);
        this.roles = new RolesApi(axiosClientConfig);
        this.conditionSets = new ConditionSetsApi(axiosClientConfig);
        this.conditionSetRules = new ConditionSetRulesApi(axiosClientConfig);
        this.roleAssignments = new RoleAssignmentsApi(axiosClientConfig);
        this.resources = new ResourcesApi(axiosClientConfig);
    }
    async getScope() {
        if (this.#gotScope) {
            return;
        }
        try {
            const response = await this.scope.getApiKeyScope();
            this.#gotScope = true;
            if (response.data.project_id != undefined && response.data.environment_id != undefined) {
                this.project = response.data.project_id;
                this.environment = response.data.environment_id;
            }
            else {
                throw Error(`Invalid response from /scope: ${response.data}`);
            }
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getApiKeyScope(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async listUsers() {
        await this.getScope();
        try {
            const response = await this.users.listUsers({
                projId: this.project,
                envId: this.environment,
            });
            this.logger.debug(`[${response.status}] permit.api.listUsers()`);
            return response.data.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getUser(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async listRoles() {
        await this.getScope();
        try {
            const response = await this.roles.listRoles({
                projId: this.project,
                envId: this.environment,
            });
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.listRoles(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async listConditionSets(type, page, perPage) {
        await this.getScope();
        try {
            const response = await this.conditionSets.listConditionSets({
                projId: this.project,
                envId: this.environment,
                type: type,
                page: page,
                perPage: perPage,
            });
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.listRoles(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async listConditionSetsRules(page, perPage) {
        await this.getScope();
        try {
            const response = await this.conditionSetRules.listSetPermissions({
                projId: this.project,
                envId: this.environment,
                page: page,
                perPage: perPage,
            });
            this.logger.debug(`[${response.status}] permit.api.listRoles()`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.listRoles(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async getUser(userId) {
        await this.getScope();
        try {
            const response = await this.users.getUser({
                projId: this.project,
                envId: this.environment,
                userId: userId,
            });
            this.logger.debug(`[${response.status}] permit.api.getUser(${userId})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getUser(${userId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async getTenant(tenantId) {
        await this.getScope();
        try {
            const response = await this.tenants.getTenant({
                projId: this.project,
                envId: this.environment,
                tenantId: tenantId,
            });
            this.logger.debug(`[${response.status}] permit.api.getTenant(${tenantId})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getTenant(${tenantId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async listTenants(page) {
        await this.getScope();
        try {
            const response = await this.tenants.listTenants({
                projId: this.project,
                envId: this.environment,
                page: page,
            });
            this.logger.debug(`[${response.status}] permit.api.listTenants(${page ?? ''})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.listTenants(${page ?? ''}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async getRole(roleId) {
        await this.getScope();
        try {
            const response = await this.roles.getRole({
                projId: this.project,
                envId: this.environment,
                roleId: roleId,
            });
            this.logger.debug(`[${response.status}] permit.api.getRole(${roleId})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getRole(${roleId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async getAssignedRoles(user, tenant) {
        await this.getScope();
        try {
            const response = await this.roleAssignments.listRoleAssignments({
                projId: this.project,
                envId: this.environment,
                user: user,
                tenant: tenant,
            });
            this.logger.debug(`[${response.status}] permit.api.getAssignedRoles(${user}, ${tenant ?? 'all tenants'})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getAssignedRoles(${user}, ${tenant ?? 'all tenants'}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async createResource(resource) {
        await this.getScope();
        try {
            const response = await this.resources.createResource({
                projId: this.project,
                envId: this.environment,
                resourceCreate: resource,
            });
            this.logger.debug(`[${response.status}] permit.api.createResource(${JSON.stringify(resource)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createResource(${JSON.stringify(resource)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async updateResource(resourceId, resource) {
        await this.getScope();
        try {
            const response = await this.resources.updateResource({
                projId: this.project,
                envId: this.environment,
                resourceId: resourceId,
                resourceUpdate: resource,
            });
            this.logger.debug(`[${response.status}] permit.api.updateResource(${resourceId}, ${JSON.stringify(resource)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.updateResource(${resourceId}, ${JSON.stringify(resource)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async deleteResource(resourceId) {
        await this.getScope();
        try {
            const response = await this.resources.deleteResource({
                projId: this.project,
                envId: this.environment,
                resourceId: resourceId,
            });
            this.logger.debug(`[${response.status}] permit.api.deleteResource(${resourceId})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteResource(${resourceId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async createUser(user) {
        await this.getScope();
        try {
            const response = await this.users.createUser({
                projId: this.project,
                envId: this.environment,
                userCreate: user,
            });
            this.logger.debug(`[${response.status}] permit.api.createUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createUser(${JSON.stringify(user)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async syncUser(user) {
        await this.getScope();
        try {
            const response = await this.users.replaceUser({
                projId: this.project,
                envId: this.environment,
                userId: user.key,
                userCreate: user,
            });
            this.logger.debug(`[${response.status}] permit.api.syncUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.syncUser(${JSON.stringify(user)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async updateUser(userId, user) {
        await this.getScope();
        try {
            const response = await this.users.updateUser({
                projId: this.project,
                envId: this.environment,
                userId,
                userUpdate: user,
            });
            this.logger.debug(`[${response.status}] permit.api.updateUser(${JSON.stringify(user)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.updateUser(${JSON.stringify(user)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async deleteUser(userId) {
        await this.getScope();
        try {
            const response = await this.users.deleteUser({
                projId: this.project,
                envId: this.environment,
                userId: userId, // user id or key
            });
            this.logger.debug(`[${response.status}] permit.api.deleteUser(${userId})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteUser(${userId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async createTenant(tenant) {
        await this.getScope();
        try {
            const response = await this.tenants.createTenant({
                projId: this.project,
                envId: this.environment,
                tenantCreate: tenant,
            });
            this.logger.debug(`[${response.status}] permit.api.createTenant(${JSON.stringify(tenant)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createTenant(${JSON.stringify(tenant)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async updateTenant(tenantId, tenant) {
        await this.getScope();
        try {
            const response = await this.tenants.updateTenant({
                projId: this.project,
                envId: this.environment,
                tenantId: tenantId,
                tenantUpdate: tenant,
            });
            this.logger.debug(`[${response.status}] permit.api.updateTenant(${tenantId}, ${JSON.stringify(tenant)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.updateTenant(${tenantId}, ${JSON.stringify(tenant)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async deleteTenant(tenantId) {
        await this.getScope();
        try {
            const response = await this.tenants.deleteTenant({
                projId: this.project,
                envId: this.environment,
                tenantId: tenantId,
            });
            this.logger.debug(`[${response.status}] permit.api.deleteTenant(${tenantId})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteTenant(${tenantId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async createRole(role) {
        await this.getScope();
        try {
            const response = await this.roles.createRole({
                projId: this.project,
                envId: this.environment,
                roleCreate: role,
            });
            this.logger.debug(`[${response.status}] permit.api.createRole(${JSON.stringify(role)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createRole(${JSON.stringify(role)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async updateRole(roleId, role) {
        await this.getScope();
        try {
            const response = await this.roles.updateRole({
                projId: this.project,
                envId: this.environment,
                roleId: roleId,
                roleUpdate: role,
            });
            this.logger.debug(`[${response.status}] permit.api.updateRole(${roleId}, ${JSON.stringify(role)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.updateRole(${roleId}, ${JSON.stringify(role)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async deleteRole(roleId) {
        await this.getScope();
        try {
            const response = await this.roles.deleteRole({
                projId: this.project,
                envId: this.environment,
                roleId: roleId,
            });
            this.logger.debug(`[${response.status}] permit.api.deleteRole(${roleId})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteRole(${roleId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async assignRole(assignedRole) {
        await this.getScope();
        try {
            const response = await this.roleAssignments.assignRole({
                projId: this.project,
                envId: this.environment,
                roleAssignmentCreate: assignedRole,
            });
            this.logger.debug(`[${response.status}] permit.api.assignRole(${JSON.stringify(assignedRole)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.assignRole(${JSON.stringify(assignedRole)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async unassignRole(removedRole) {
        await this.getScope();
        try {
            const response = await this.roleAssignments.unassignRole({
                projId: this.project,
                envId: this.environment,
                roleAssignmentRemove: removedRole,
            });
            this.logger.debug(`[${response.status}] permit.api.unassignRole(${JSON.stringify(removedRole)})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.unassignRole(${JSON.stringify(removedRole)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async createConditionSet(conditionSet) {
        await this.getScope();
        try {
            const response = await this.conditionSets.createConditionSet({
                projId: this.project,
                envId: this.environment,
                conditionSetCreate: conditionSet,
            });
            this.logger.debug(`[${response.status}] permit.api.createConditionSet(${JSON.stringify(conditionSet)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createConditionSet(${JSON.stringify(conditionSet)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async updateConditionSet(conditionSetId, conditionSet) {
        await this.getScope();
        try {
            const response = await this.conditionSets.updateConditionSet({
                projId: this.project,
                envId: this.environment,
                conditionSetId: conditionSetId,
                conditionSetUpdate: conditionSet,
            });
            this.logger.debug(`[${response.status}] permit.api.updateConditionSet(${conditionSetId}, ${JSON.stringify(conditionSet)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.updateConditionSet(${conditionSetId}, ${JSON.stringify(conditionSet)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async deleteConditionSet(conditionSetId) {
        await this.getScope();
        try {
            const response = await this.conditionSets.deleteConditionSet({
                projId: this.project,
                envId: this.environment,
                conditionSetId: conditionSetId,
            });
            this.logger.debug(`[${response.status}] permit.api.deleteConditionSet(${conditionSetId})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteConditionSet(${conditionSetId}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async assignConditionSetRule(conditionSetRule) {
        await this.getScope();
        try {
            const response = await this.conditionSetRules.assignSetPermissions({
                projId: this.project,
                envId: this.environment,
                conditionSetRuleCreate: conditionSetRule,
            });
            this.logger.debug(`[${response.status}] permit.api.createConditionSetRule(${JSON.stringify(conditionSetRule)})`);
            return response.data;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.createConditionSetRule(${JSON.stringify(conditionSetRule)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    async unassignConditionSetRule(conditionSetRule) {
        await this.getScope();
        try {
            const response = await this.conditionSetRules.unassignSetPermissions({
                projId: this.project,
                envId: this.environment,
                conditionSetRuleRemove: conditionSetRule,
            });
            this.logger.debug(`[${response.status}] permit.api.deleteConditionSetRule(${JSON.stringify(conditionSetRule)})`);
            return response;
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.deleteConditionSetRule(${JSON.stringify(conditionSetRule)}), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw err;
        }
    }
    get api() {
        return {
            listUsers: this.listUsers.bind(this),
            listRoles: this.listRoles.bind(this),
            listConditionSets: this.listConditionSets.bind(this),
            listConditionSetsRules: this.listConditionSetsRules.bind(this),
            updateUser: this.updateUser.bind(this),
            getUser: this.getUser.bind(this),
            getTenant: this.getTenant.bind(this),
            getRole: this.getRole.bind(this),
            getAssignedRoles: this.getAssignedRoles.bind(this),
            createResource: this.createResource.bind(this),
            updateResource: this.updateResource.bind(this),
            deleteResource: this.deleteResource.bind(this),
            createUser: this.createUser.bind(this),
            syncUser: this.syncUser.bind(this),
            deleteUser: this.deleteUser.bind(this),
            createTenant: this.createTenant.bind(this),
            updateTenant: this.updateTenant.bind(this),
            deleteTenant: this.deleteTenant.bind(this),
            listTenants: this.listTenants.bind(this),
            createRole: this.createRole.bind(this),
            updateRole: this.updateRole.bind(this),
            deleteRole: this.deleteRole.bind(this),
            assignRole: this.assignRole.bind(this),
            unassignRole: this.unassignRole.bind(this),
            createConditionSet: this.createConditionSet.bind(this),
            updateConditionSet: this.updateConditionSet.bind(this),
            deleteConditionSet: this.deleteConditionSet.bind(this),
            assignConditionSetRule: this.assignConditionSetRule.bind(this),
            unassignConditionSetRule: this.unassignConditionSetRule.bind(this),
        };
    }
    getMethods() {
        return {
            api: this.api,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,