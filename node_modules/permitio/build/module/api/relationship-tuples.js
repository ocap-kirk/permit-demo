import { RelationshipTuplesApi as AutogenRelationshipTuplesApi, } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { BasePermitApi } from './base';
import { ApiContextLevel, ApiKeyLevel } from './context';
/**
 * The RelationshipTuplesApi class provides methods for interacting with Role createments.
 */
export class RelationshipTuplesApi extends BasePermitApi {
    relationshipTuples;
    /**
     * Creates an instance of the RelationshipTuplesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.relationshipTuples = new AutogenRelationshipTuplesApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of role createments based on the specified filters.
     *
     * @param params - The filters and pagination options for listing role createments.
     * @returns A promise that resolves with an array of role createments.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        // TODO: add filters: subject, relation, object
        const { page = 1, perPage = 100, subject, object, relation, tenant } = params;
        try {
            return (await this.relationshipTuples.listRelationshipTuples({
                ...this.config.apiContext.environmentContext,
                page,
                perPage,
                tenant,
                subject,
                relation,
                object,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new relationship tuple, that states that a relationship (of type: relation)
     * exists between two resource instances: the subject and the object.
     *
     * @param tuple - The tuple to create
     * @returns A promise that resolves to the created relationship tuple.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(tuple) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.createRelationshipTuple({
                ...this.config.apiContext.environmentContext,
                relationshipTupleCreate: tuple,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes a relationship tuple.
     *
     * @param tuple - The tuple to delete
     * @returns A promise that resolves when the tuple is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(tuple) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.deleteRelationshipTuple({
                ...this.config.apiContext.environmentContext,
                relationshipTupleDelete: tuple,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwLXR1cGxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVsYXRpb25zaGlwLXR1cGxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQ0wscUJBQXFCLElBQUksNEJBQTRCLEdBSXRELE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsYUFBYSxFQUFlLE1BQU0sUUFBUSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBb0V6RDs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxhQUFhO0lBQzlDLGtCQUFrQixDQUErQjtJQUV6RDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSw0QkFBNEIsQ0FDeEQsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixTQUFTLEVBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzFCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBK0I7UUFDL0MsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCwrQ0FBK0M7UUFDL0MsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDOUUsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDbkQsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0I7Z0JBQzVDLElBQUk7Z0JBQ0osT0FBTztnQkFDUCxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsUUFBUTtnQkFDUixNQUFNO2FBQ1AsQ0FBQyxDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQThCO1FBQ2hELE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQztnQkFDcEQsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0I7Z0JBQzVDLHVCQUF1QixFQUFFLEtBQUs7YUFDL0IsQ0FBQyxDQUNILENBQUMsSUFBSSxDQUFDO1NBQ1I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBOEI7UUFDaEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxDQUNMLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO2dCQUNwRCxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQjtnQkFDNUMsdUJBQXVCLEVBQUUsS0FBSzthQUMvQixDQUFDLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7Q0FDRiJ9