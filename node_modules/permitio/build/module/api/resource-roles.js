import { ResourceRolesApi as AutogenResourceRolesApi, ImplicitGrantsApi as AutogenRoleDerivationsApi, } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { BasePermitApi } from './base';
import { ApiContextLevel, ApiKeyLevel } from './context';
/**
 * The ResourceRolesApi class provides methods for interacting with Permit Roles.
 */
export class ResourceRolesApi extends BasePermitApi {
    resourceRoles;
    roleDerivations;
    /**
     * Creates an instance of the ResourceRolesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.resourceRoles = new AutogenResourceRolesApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
        this.roleDerivations = new AutogenRoleDerivationsApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of resource roles.
     *
     * @param params - pagination and filtering params, @see {@link IListResourceRoles}
     * @returns A promise that resolves to an array of roles.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        const { resourceKey, page = 1, perPage = 100 } = params;
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.listResourceRoles({
                ...this.config.apiContext.environmentContext,
                page,
                perPage,
                resourceId: resourceKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a resource role by its key.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(resourceKey, roleKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.getResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a resource role by its key.
     * Alias for the {@link get} method.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(resourceKey, roleKey) {
        return await this.get(resourceKey, roleKey);
    }
    /**
     * Retrieves a resource role by its ID.
     * Alias for the {@link get} method.
     *
     * @param resourceId The ID of the resource.
     * @param roleId The ID of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(resourceId, roleId) {
        return await this.get(resourceId, roleId);
    }
    /**
     * Creates a new role.
     *
     * @param resourceKey The key of the resource.
     * @param roleData The data for the new role.
     * @returns A promise that resolves to the created role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(resourceKey, roleData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.createResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                resourceRoleCreate: roleData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates a resource role.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey The key of the role.
     * @param roleData The updated data for the role.
     * @returns A promise that resolves to the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(resourceKey, roleKey, roleData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.updateResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                resourceRoleUpdate: roleData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a resource role.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey The key of the role to delete.
     * @returns A promise that resolves when the role is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(resourceKey, roleKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            await this.resourceRoles.deleteResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
            });
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns permissions to a resource role.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be assigned to the role.
     * @returns A promise that resolves to a ResourceRoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async assignPermissions(resourceKey, roleKey, permissions) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.assignPermissionsToResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                addRolePermissions: {
                    permissions,
                },
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes permissions from a resource role.
     *
     * @param resourceKey The key of the resource.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be removed from the role.
     * @returns A promise that resolves to a ResourceRoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async removePermissions(resourceKey, roleKey, permissions) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.resourceRoles.removePermissionsFromResourceRole({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                removeRolePermissions: {
                    permissions,
                },
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Create a conditional derivation from another role.
     * The derivation states that users with some other role on a related object will implicitly also be granted this role.
     *
     * @param resourceKey - The key of the resource the role belongs to.
     * @param roleKey - The key of the role.
     * @param derivationRule - A rule when to derived this role from another related role.
     * @returns A DerivedRoleRuleRead object representing the newly created role derivation.
     * @throws PermitApiError - If the API returns an error HTTP status code.
     * @throws PermitContextError - If the configured ApiContext does not match the required endpoint context.
     */
    async createRoleDerivation(resourceKey, roleKey, derivationRule) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleDerivations.createImplicitGrant({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                derivedRoleRuleCreate: derivationRule,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Delete a role derivation.
     *
     * @param resourceKey - The key of the resource the role belongs to.
     * @param roleKey - The key of the role.
     * @param derivationRule - The details of the derivation rule to delete.
     * @throws PermitApiError - If the API returns an error HTTP status code.
     * @throws PermitContextError - If the configured ApiContext does not match the required endpoint context.
     */
    async deleteRoleDerivation(resourceKey, roleKey, derivationRule) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleDerivations.deleteImplicitGrant({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                derivedRoleRuleDelete: derivationRule,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Update the optional (ABAC) conditions when to derive this role from other roles.
     *
     * @param resourceKey - The key of the resource the role belongs to.
     * @param roleKey - The key of the role.
     * @param conditions - The conditions object.
     * @returns The updated PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings.
     * @throws PermitApiError - If the API returns an error HTTP status code.
     * @throws PermitContextError - If the configured ApiContext does not match the required endpoint context.
     */
    async updateRoleDerivationConditions(resourceKey, roleKey, conditions) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleDerivations.updateImplicitGrantsConditions({
                ...this.config.apiContext.environmentContext,
                resourceId: resourceKey,
                roleId: roleKey,
                permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: conditions,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2Utcm9sZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3Jlc291cmNlLXJvbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFDTCxnQkFBZ0IsSUFBSSx1QkFBdUIsRUFDM0MsaUJBQWlCLElBQUkseUJBQXlCLEdBUS9DLE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsYUFBYSxFQUFlLE1BQU0sUUFBUSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBNkt6RDs7R0FFRztBQUNILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFhO0lBQ3pDLGFBQWEsQ0FBMEI7SUFDdkMsZUFBZSxDQUE0QjtJQUVuRDs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksdUJBQXVCLENBQzlDLElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsU0FBUyxFQUNULElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUMxQixDQUFDO1FBRUYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLHlCQUF5QixDQUNsRCxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUEwQjtRQUMxQyxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUN4RCxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxX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