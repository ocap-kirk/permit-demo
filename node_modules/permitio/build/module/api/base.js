import axios from 'axios';
import { APIKeysApi, Configuration } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { API_ACCESS_LEVELS, ApiContextLevel, ApiKeyLevel, PermitContextError } from './context';
export class PermitApiError extends Error {
    originalError;
    constructor(message, originalError) {
        super(message);
        this.originalError = originalError;
    }
    get request() {
        return this.originalError.request;
    }
    get response() {
        return this.originalError.response;
    }
}
export class BasePermitApi {
    config;
    logger;
    openapiClientConfig;
    scopeApi;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        const version = process.env.npm_package_version ?? 'unknown';
        this.openapiClientConfig = new Configuration({
            basePath: `${this.config.apiUrl}`,
            accessToken: this.config.token,
            baseOptions: {
                headers: {
                    'X-Permit-SDK-Version': `node:${version}`,
                },
            },
        });
        this.scopeApi = new APIKeysApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Sets the API context and permitted access level based on the API key scope.
     */
    async setContextFromApiKey() {
        try {
            this.logger.debug('Fetching api key scope');
            const response = await this.scopeApi.getApiKeyScope();
            if (response.data.organization_id !== undefined && response.data.organization_id !== null) {
                this.config.apiContext._saveApiKeyAccessibleScope(response.data.organization_id, response.data.project_id, response.data.environment_id);
                if (response.data.project_id !== undefined && response.data.project_id !== null) {
                    if (response.data.environment_id !== undefined && response.data.environment_id !== null) {
                        // set environment level context
                        this.logger.debug(`setting: environment-level api context`);
                        this.config.apiContext.setEnvironmentLevelContext(response.data.organization_id, response.data.project_id, response.data.environment_id);
                        return;
                    }
                    // set project level context
                    this.logger.debug(`setting: project-level api context`);
                    this.config.apiContext.setProjectLevelContext(response.data.organization_id, response.data.project_id);
                    return;
                }
                // set org level context
                this.logger.debug(`setting: organization-level api context`);
                this.config.apiContext.setOrganizationLevelContext(response.data.organization_id);
                return;
            }
            throw new PermitContextError('could not set api context level');
        }
        catch (err) {
            if (axios.isAxiosError(err)) {
                this.logger.error(`[${err?.response?.status}] permit.api.getApiKeyScope(), err: ${JSON.stringify(err?.response?.data)}`);
            }
            throw new PermitContextError('could not fetch the api key scope in order to set the api context level');
        }
    }
    /**
     * Ensure that the API Key has the necessary permissions to successfully call the API endpoint.
     * Note that this check is not foolproof, and the API may still throw 401.
     * @param requiredAccessLevel The required API Key Access level for the endpoint.
     * @throws PermitContextError If the currently set API key access level does not match the required access level.
     */
    async ensureAccessLevel(requiredAccessLevel) {
        // should only happen once in the lifetime of the SDK
        if (this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT ||
            this.config.apiContext.permittedAccessLevel === ApiKeyLevel.WAIT_FOR_INIT) {
            await this.setContextFromApiKey();
        }
        if (requiredAccessLevel !== this.config.apiContext.permittedAccessLevel) {
            if (API_ACCESS_LEVELS.indexOf(requiredAccessLevel) <
                API_ACCESS_LEVELS.indexOf(this.config.apiContext.permittedAccessLevel)) {
                throw new PermitContextError(`You're trying to use an SDK method that requires an API Key with access level: ${requiredAccessLevel}, ` +
                    `however the SDK is running with an API key with level ${this.config.apiContext.permittedAccessLevel}.`);
            }
        }
    }
    /**
     * Ensure that the API context matches the required endpoint context.
     * @param requiredContext The required API context level for the endpoint.
     * @throws PermitContextError If the currently set API context level does not match the required context level.
     */
    async ensureContext(requiredContext) {
        // should only happen once in the lifetime of the SDK
        if (this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT ||
            this.config.apiContext.permittedAccessLevel === ApiKeyLevel.WAIT_FOR_INIT) {
            await this.setContextFromApiKey();
        }
        if (this.config.apiContext.contextLevel < requiredContext ||
            this.config.apiContext.contextLevel === ApiContextLevel.WAIT_FOR_INIT) {
            throw new PermitContextError(`You're trying to use an SDK method that requires an API context of ${ApiContextLevel[requiredContext]}, ` +
                `however the SDK is running in a less specific context level: ${ApiContextLevel[this.config.apiContext.contextLevel]}.`);
        }
    }
    handleApiError(err) {
        if (axios.isAxiosError(err)) {
            // this is an http response with an error status code
            const message = `Got error status code: ${err.response?.status}`;
            // log this to the SDK logger
            this.logger.error(`${message}, err: ${JSON.stringify(err?.response?.data)}`);
            // and throw a permit error exception
            throw new PermitApiError(message, err);
        }
        else {
            // unexpected error, just throw
            throw err;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQW9DLE1BQU0sT0FBTyxDQUFDO0FBSXpELE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVoRyxNQUFNLE9BQU8sY0FBa0IsU0FBUSxLQUFLO0lBQ047SUFBcEMsWUFBWSxPQUFlLEVBQVMsYUFBNEI7UUFDOUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRG1CLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBRWhFLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBYUQsTUFBTSxPQUFnQixhQUFhO0lBSVg7SUFBaUM7SUFIN0MsbUJBQW1CLENBQWdCO0lBQ3JDLFFBQVEsQ0FBYTtJQUU3QixZQUFzQixNQUFxQixFQUFZLE1BQWM7UUFBL0MsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFZLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDbkUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxTQUFTLENBQUM7UUFDN0QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksYUFBYSxDQUFDO1lBQzNDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFdBQVcsRUFBRSxJ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