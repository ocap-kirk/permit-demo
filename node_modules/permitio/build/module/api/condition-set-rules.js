import { ConditionSetRulesApi as AutogenConditionSetRulesApi, } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { BasePermitApi } from './base'; // eslint-disable-line @typescript-eslint/no-unused-vars
import { ApiContextLevel, ApiKeyLevel } from './context'; // eslint-disable-line @typescript-eslint/no-unused-vars
export class ConditionSetRulesApi extends BasePermitApi {
    setRules;
    /**
     * Creates an instance of the ConditionSetRulesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.setRules = new AutogenConditionSetRulesApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of condition set rules based on the specified parameters.
     *
     * @param params - parameters for filtering and pagination, @see {@link IListConditionSetRules}
     * @returns A promise that resolves to an array of condition set rules.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        const { userSetKey, permissionKey, resourceSetKey, page = 1, perPage = 100 } = params;
        try {
            return (await this.setRules.listSetPermissions({
                ...this.config.apiContext.environmentContext,
                userSet: userSetKey,
                permission: permissionKey,
                resourceSet: resourceSetKey,
                page,
                perPage,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new condition set rule.
     *
     * @param rule - The condition set rule to create.
     * @returns A promise that resolves to the created condition set rule.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(rule) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.setRules.assignSetPermissions({
                ...this.config.apiContext.environmentContext,
                conditionSetRuleCreate: rule,
            })).data[0];
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a condition set rule.
     *
     * @param rule - The condition set rule to delete.
     * @returns A promise that resolves when the condition set rule is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(rule) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.setRules.unassignSetPermissions({
                ...this.config.apiContext.environmentContext,
                conditionSetRuleRemove: rule,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXNldC1ydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvY29uZGl0aW9uLXNldC1ydWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQ0wsb0JBQW9CLElBQUksMkJBQTJCLEdBSXBELE1BQU0sWUFBWSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsYUFBYSxFQUErQixNQUFNLFFBQVEsQ0FBQyxDQUFDLHdEQUF3RDtBQUM3SCxPQUFPLEVBQWMsZUFBZSxFQUFFLFdBQVcsRUFBc0IsTUFBTSxXQUFXLENBQUMsQ0FBQyx3REFBd0Q7QUF1RGxKLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxhQUFhO0lBQzdDLFFBQVEsQ0FBOEI7SUFFOUM7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDJCQUEyQixDQUM3QyxJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUE4QjtRQUM5QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDdEYsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3JDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCO2dCQUM1QyxPQUFPLEVBQUUsVUFBVTtnQkFDbkIsVUFBVSxFQUFFLGFBQWE7Z0JBQ3pCLFdBQVcsRUFBRSxjQUFjO2dCQUMzQixJQUFJO2dCQUNKLE9BQU87YUFDUixDQUFDLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUE0QjtRQUM5QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO2dCQUN2QyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQjtnQkFDNUMsc0JBQXNCLEVBQUUsSUFBSTthQUM3QixDQUFDLENBQ0gsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUE0QjtRQUM5QyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO2dCQUN6QyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQjtnQkFDNUMsc0JBQXNCLEVBQUUsSUFBSTthQUM3QixDQUFDLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7Q0FDRiJ9