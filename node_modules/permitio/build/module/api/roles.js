import { RolesApi as AutogenRolesApi } from '../openapi';
import { BASE_PATH } from '../openapi/base';
import { BasePermitApi } from './base';
import { ApiContextLevel, ApiKeyLevel } from './context';
/**
 * The RolesApi class provides methods for interacting with Permit Roles.
 */
export class RolesApi extends BasePermitApi {
    roles;
    /**
     * Creates an instance of the RolesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.roles = new AutogenRolesApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of roles.
     *
     * @param pagination The pagination options, @see {@link IPagination}
     * @returns A promise that resolves to an array of roles.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(pagination) {
        const { page = 1, perPage = 100 } = pagination ?? {};
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.listRoles({
                ...this.config.apiContext.environmentContext,
                page,
                perPage,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a role by its key.
     *
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(roleKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.getRole({
                ...this.config.apiContext.environmentContext,
                roleId: roleKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a role by its key.
     * Alias for the {@link get} method.
     *
     * @param roleKey The key of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(roleKey) {
        return await this.get(roleKey);
    }
    /**
     * Retrieves a role by its ID.
     * Alias for the {@link get} method.
     *
     * @param roleId The ID of the role.
     * @returns A promise that resolves to the role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(roleId) {
        return await this.get(roleId);
    }
    /**
     * Creates a new role.
     *
     * @param roleData The data for the new role.
     * @returns A promise that resolves to the created role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(roleData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.createRole({
                ...this.config.apiContext.environmentContext,
                roleCreate: roleData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates a role.
     *
     * @param roleKey The key of the role.
     * @param roleData The updated data for the role.
     * @returns A promise that resolves to the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(roleKey, roleData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.updateRole({
                ...this.config.apiContext.environmentContext,
                roleId: roleKey,
                roleUpdate: roleData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a role.
     *
     * @param roleKey The key of the role to delete.
     * @returns A promise that resolves when the role is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(roleKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            await this.roles.deleteRole({
                ...this.config.apiContext.environmentContext,
                roleId: roleKey,
            });
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns permissions to a role.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be assigned to the role.
     * @returns A promise that resolves to a RoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async assignPermissions(roleKey, permissions) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.assignPermissionsToRole({
                ...this.config.apiContext.environmentContext,
                roleId: roleKey,
                addRolePermissions: {
                    permissions,
                },
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes permissions from a role.
     * @param roleKey - The key of the role.
     * @param permissions - An array of permission keys (<resourceKey:actionKey>) to be removed from the role.
     * @returns A promise that resolves to a RoleRead object representing the updated role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async removePermissions(roleKey, permissions) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roles.removePermissionsFromRole({
                ...this.config.apiContext.environmentContext,
                roleId: roleKey,
                removeRolePermissions: {
                    permissions,
                },
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3JvbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxRQUFRLElBQUksZUFBZSxFQUFvQyxNQUFNLFlBQVksQ0FBQztBQUMzRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUMsT0FBTyxFQUFFLGFBQWEsRUFBZSxNQUFNLFFBQVEsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQW1HekQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sUUFBUyxTQUFRLGFBQWE7SUFDakMsS0FBSyxDQUFrQjtJQUUvQjs7OztPQUlHO0lBQ0gsWUFBWSxNQUFxQixFQUFFLE1BQWM7UUFDL0MsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBZSxDQUM5QixJQUFJLENBQUMsbUJBQW1CLEVBQ3hCLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUF3QjtRQUN4QyxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztRQUNyRCxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztnQkFDekIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUs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