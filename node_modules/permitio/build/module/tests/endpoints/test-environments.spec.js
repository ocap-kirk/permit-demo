import anyTest from 'ava';
import { ApiKeyLevel, Permit, PermitApiError, PermitConnectionError, } from '../../index';
import { handleApiError, printBreak, provideTestExecutionContext } from '../fixtures';
const test = anyTest;
test.before(provideTestExecutionContext);
const TEST_PROJECT_KEY = 'test-node-proj';
const CREATED_PROJECTS = [{ key: TEST_PROJECT_KEY, name: 'New Node Project' }];
const CREATED_ENVIRONMENTS = [
    { key: 'my-node-env', name: 'My Node Env' },
    { key: 'my-node-env-2', name: 'My Node Env 2' },
];
const permitWithOrgLevelApiKey = new Permit({
    token: process.env.ORG_PDP_API_KEY || process.env.PDP_API_KEY || '',
    pdp: process.env.PDP_URL || 'http://localhost:7766',
    apiUrl: process.env.PDP_CONTROL_PLANE || 'https://api.permit.io',
    log: {
        level: 'debug',
    },
});
const permitWithProjectLevelApiKey = new Permit({
    token: process.env.PROJECT_PDP_API_KEY || process.env.PDP_API_KEY || '',
    pdp: process.env.PDP_URL || 'http://localhost:7766',
    apiUrl: process.env.PDP_CONTROL_PLANE || 'https://api.permit.io',
    log: {
        level: 'debug',
    },
});
async function cleanup(permit, projectKey, t) {
    t.context.logger.info('Running cleanup...');
    for (const env of CREATED_ENVIRONMENTS) {
        try {
            await permit.api.environments.delete(projectKey, env.key);
        }
        catch (error) {
            if (error instanceof PermitApiError && error.response?.status === 404) {
                t.context.logger.info(`SKIPPING delete, env does not exist: ${env.key}, project_key=${projectKey}`);
            }
        }
    }
    printBreak();
}
test.serial('environment creation with org level api key', async (t) => {
    const permit = permitWithOrgLevelApiKey;
    t.context.logger.info(`token: ${permit.config.token}`);
    try {
        await permit.api.ensureAccessLevel(ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY);
    }
    catch (error) {
        t.context.logger.warn('this test must run with an org level api key');
        return;
    }
    t.is(permit.config.apiContext.permittedAccessLevel, ApiKeyLevel.ORGANIZATION_LEVEL_API_KEY);
    try {
        await cleanup(permit, TEST_PROJECT_KEY, t);
        const projects = [];
        for (const projectData of CREATED_PROJECTS) {
            t.context.logger.info(`trying to creating project: ${projectData.key}`);
            try {
                let project;
                try {
                    project = await permit.api.projects.create(projectData);
                }
                catch (error) {
                    if (error instanceof PermitApiError && error.response?.status === 409) {
                        t.context.logger.info(`SKIPPING create, project already exists: ${projectData.key}`);
                    }
                    project = await permit.api.projects.get(projectData.key);
                }
                projects.push(project);
                t.truthy(project);
                t.is(project.key, projectData.key);
                t.is(project.name, projectData.name);
                t.true(project.description == projectData.description); // will compare null and undefined as well
            }
            catch (error) {
                if (error instanceof PermitApiError) {
                    handleApiError(error, 'Got API Error', t);
                }
                else if (error instanceof PermitConnectionError) {
                    throw error;
                }
                else {
                    t.context.logger.error(`Got error: ${error}`);
                    t.fail(`Got error: ${error}`);
                }
            }
        }
        printBreak();
        const environmentsOriginal = await permit.api.environments.list({
            projectKey: projects[0]?.key,
        });
        const originalNumOfEnvs = environmentsOriginal.length;
        for (const environmentData of CREATED_ENVIRONMENTS) {
            t.context.logger.info(`creating environment: ${environmentData.key}`);
            const environment = await permit.api.environments.create(projects[0].key, environmentData);
            t.truthy(environment);
            t.is(environment.key, environmentData.key);
            t.is(environment.name, environmentData.name);
            t.true(environment.description == environmentData.description); // will compare null and undefined as well
            t.is(environment.project_id, projects[0].id);
        }
        printBreak();
        const environments = await permit.api.environments.list({ projectKey: projects[0]?.key });
        t.context.logger.info(`environments: ${environments.map((e) => e.key)}`);
        t.is(environments.length, CREATED_ENVIRONMENTS.length + originalNumOfEnvs); // each project has 2 default `dev` and `prod` environments
        const testEnvironment = await permit.api.environments.get(TEST_PROJECT_KEY, CREATED_ENVIRONMENTS[0].key);
        t.truthy(testEnvironment);
        t.is(testEnvironment.key, CREATED_ENVIRONMENTS[0].key);
        t.is(testEnvironment.name, CREATED_ENVIRONMENTS[0].name);
        t.true(testEnvironment.description == CREATED_ENVIRONMENTS[0].description); // will compare null and undefined as well
    }
    catch (error) {
        t.context.logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
    finally {
        printBreak();
        await cleanup(permit, TEST_PROJECT_KEY, t);
    }
});
test.serial('environment creation with project level api key', async (t) => {
    const permit = permitWithProjectLevelApiKey;
    try {
        await permit.api.ensureAccessLevel(ApiKeyLevel.PROJECT_LEVEL_API_KEY);
    }
    catch (error) {
        t.context.logger.warn('this test must run with a project level api key');
        return;
    }
    t.is(permit.config.apiContext.permittedAccessLevel, ApiKeyLevel.PROJECT_LEVEL_API_KEY);
    try {
        const project = permit.config.apiContext.project;
        t.truthy(project);
        const projectId = String(project);
        const projectRead = await permit.api.projects.get(projectId);
        t.is(String(projectRead.id), projectId);
        await cleanup(permit, projectRead.key, t);
        for (const environmentData of CREATED_ENVIRONMENTS) {
            t.context.logger.info(`creating environment: ${environmentData.key}`);
            const environment = await permit.api.environments.create(projectRead.key, environmentData);
            t.truthy(environment);
            t.is(environment.key, environmentData.key);
            t.is(environment.name, environmentData.name);
            t.true(environment.description == environmentData.description); // will compare null and undefined as well
            t.is(environment.project_id, projectRead.id);
        }
        const environments = await permit.api.environments.list({ projectKey: projectRead?.key });
        const actualEnvSet = environments.map((env) => env.key);
        const createdEnvSet = new Set(CREATED_ENVIRONMENTS.map((env) => env.key));
        const intersection = new Set(actualEnvSet.filter((x) => createdEnvSet.has(x)));
        t.is(intersection.size, 2);
    }
    catch (error) {
        if (error instanceof PermitApiError) {
            handleApiError(error, 'Got API Error', t);
        }
        else if (error instanceof PermitConnectionError) {
            throw error;
        }
        else {
            t.context.logger.error(`Got error: ${error}`);
            t.fail(`Got error: ${error}`);
        }
    }
    finally {
        await cleanup(permit, TEST_PROJECT_KEY, t);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1lbnZpcm9ubWVudHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0cy9lbmRwb2ludHMvdGVzdC1lbnZpcm9ubWVudHMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQTRDLE1BQU0sS0FBSyxDQUFDO0FBRS9ELE9BQU8sRUFDTCxXQUFXLEVBR1gsTUFBTSxFQUNOLGNBQWMsRUFDZCxxQkFBcUIsR0FHdEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsMkJBQTJCLEVBQWUsTUFBTSxhQUFhLENBQUM7QUFFbkcsTUFBTSxJQUFJLEdBQUcsT0FBcUMsQ0FBQztBQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFFekMsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUMxQyxNQUFNLGdCQUFnQixHQUFvQixDQUFDLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7QUFDaEcsTUFBTSxvQkFBb0IsR0FBd0I7SUFDaEQsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUU7SUFDM0MsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7Q0FDaEQsQ0FBQztBQUVGLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxNQUFNLENBQUM7SUFDMUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUU7SUFDbkUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLHVCQUF1QjtJQUNuRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSx1QkFBdUI7SUFDaEUsR0FBRyxF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