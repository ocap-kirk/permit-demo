import { ApiClient } from './api/api-client';
import { ElementsClient } from './api/elements';
import { ConfigFactory } from './config';
import { Enforcer } from './enforcement/enforcer';
import { LoggerFactory } from './logger';
import { AxiosLoggingInterceptor } from './utils/http-logger';
// exported interfaces
export * from './api';
export { PermitConnectionError, PermitError, PermitPDPStatusError } from './enforcement/enforcer';
export { ApiContext, PermitContextError, ApiKeyLevel } from './api/context';
export { PermitApiError } from './api/base';
/**
 * The `Permit` class represents the main entry point for interacting with the Permit.io SDK.
 * The SDK constructor expects an object implementing the {@link IPermitConfig} interface.
 *
 * Example usage:
 *
 * ```typescript
 * import { Permit } from 'permitio';
 *
 * const permit = new Permit({
 *   // this is typically the same API Key you would use for the PDP container
 *   token: "[YOUR_API_KEY]",
 *   // in production, you might need to change this url to fit your deployment
 *   pdp: "http://localhost:7766",
 *   ...
 * });
 *
 * // creates (or updates) a user on that can be assigned roles and permissions
 * const { user } = await permit.api.users.sync({
 *   // the user key must be a unique id of the user
 *   key: 'auth0|elon',
 *   // optional params
 *   email: 'elonmusk@tesla.com',
 *   first_name: 'Elon',
 *   last_name: 'Musk',
 *   // user attributes can be used in attribute-based access-control policies
 *   attributes: {
 *     age: 50,
 *     favoriteColor: 'red',
 *   },
 * });
 *
 * // 'document' is the protected resource we are enforcing access to
 * const resource = 'document';
 * // the action the user is trying to do on the resource
 * const action = 'read';
 *
 * const permitted = await permit.check(user, action, resource);
 * if (permitted) {
 *     console.log('User is authorized to read a document.');
 * } else {
 *     console.log('User is not authorized to read a document.');
 * }
 * ```
 */
export class Permit {
    logger;
    enforcer;
    /**
     * Access the SDK configuration using this property.
     * Once the SDK is initialized, the configuration is read-only.
     *
     * Usage example:
     *
     * ```typescript
     * const permit = new Permit(config);
     * const pdpUrl = permit.config.pdp;
     * ```
     */
    config;
    /**
     * Access the Permit REST API using this property.
     *
     * Usage example:
     *
     * ```typescript
     * const permit = new Permit(config);
     * permit.api.roles.create(...);
     * ```
     */
    api;
    /**
     * Access the Permit Elements API using this property.
     *
     * Usage example:
     *
     * ```typescript
     * const permit = new Permit(config);
     * permit.elements.loginAs(user, tenant);
     * ```
     */
    elements;
    /**
     * Constructs a new instance of the {@link Permit} class with the specified configuration.
     *
     * @param config - The configuration for the Permit SDK.
     */
    constructor(config) {
        this.config = ConfigFactory.build(config);
        this.logger = LoggerFactory.createLogger(this.config);
        AxiosLoggingInterceptor.setupInterceptor(this.config.axiosInstance, this.logger);
        this.api = new ApiClient(this.config, this.logger);
        this.enforcer = new Enforcer(this.config, this.logger);
        this.elements = new ElementsClient(this.config, this.logger);
        this.logger.debug(`Permit.io SDK initialized with config:\n${JSON.stringify(this.config, undefined, 2)}`);
    }
    /**
     * Checks if a `user` is authorized to perform an `action` on a `resource` within the specified context.
     *
     * @param user     - The user object representing the user.
     * @param action   - The action to be performed on the resource.
     * @param resource - The resource object representing the resource.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns `true` if the user is authorized, `false` otherwise.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async check(user, action, resource, context, config) {
        return await this.enforcer.check(user, action, resource, context, config);
    }
    /**
     * Checks multiple requests within the specified context.
     *
     * @param checks   - The check requests.
     * @param context  - The context object representing the context in which the action is performed.
     * @returns array containing `true` if the user is authorized, `false` otherwise for each check request.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async bulkCheck(checks, context, config) {
        return await this.enforcer.bulkCheck(checks, context, config);
    }
    /**
     * Get all permissions for the specified user.
     *
     * @param user     - The user object representing the user.
     * @param tenants  - The list of tenants to filter the permissions on ( given by roles ).
     * @param resources - The list of resources to filter the permissions on ( given by resource roles ).
     * @param resource_types - The list of resource types to filter the permissions on ( given by resource roles ).
     * @returns object with key as the resource identifier and value as the resource details and permissions.
     * @throws {@link PermitConnectionError} if an error occurs while sending the authorization request to the PDP.
     * @throws {@link PermitPDPStatusError} if received a response with unexpected status code from the PDP.
     */
    async getUserPermissions(user, tenants, resources, resource_types, config) {
        return await this.enforcer.getUserPermissions(user, tenants, resources, resource_types, config);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxjQUFjLEVBQXNCLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxVQUFVLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBYSxNQUFNLHdCQUF3QixDQUFDO0FBRTdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFekMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHOUQsc0JBQXNCO0FBQ3RCLGNBQWMsT0FBTyxDQUFDO0FBR3RCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVsRyxPQUFPLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBb0I1Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Q0c7QUFDSCxNQUFNLE9BQU8sTUFBTTtJQUNULE1BQU0sQ0FBYztJQUNwQixRQUFRLENBQVk7SUFFNUI7Ozs7Ozs7Ozs7T0FVRztJQUNhLE1BQU0sQ0FBZ0I7SUFFdEM7Ozs7Ozs7OztPQVNHO0lBQ2EsR0FBRyxDQUFhO0lBRWhDOzs7Ozs7Ozs7T0FTRztJQUNhLFFBQVEsQ0FBcUI7SUFFN0M7Ozs7T0FJRztJQUNILFlBQVksTUFBdUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpGLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLDJDQUEyQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQ3ZGLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNJLEtBQUssQ0FBQyxLQUFLLENBQ2hCLElBQW9CLEVBQ3BCLE1BQWMsRUFDZCxRQUE0QixFQUM1QixPQUE2QixFQUM3QixNQUFnQztRQUVoQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyxTQUFTLENBQ3BCLE1BQTBCLEVBQzFCLE9BQTZCLEVBQzdCLE1BQWdDO1FBRWhDLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0ksS0FBSyxDQUFDLGtCQUFrQixDQUM3QixJQUFvQixFQUNwQixPQUFrQixFQUNsQixTQUFvQixFQUNwQixjQUF5QixFQUN6QixNQUFvQjtRQUVwQixPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEcsQ0FBQztDQUNGIn0=