/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ResourceAttributesApi - axios parameter creator
 * @export
 */
export const ResourceAttributesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new attribute as part of the resource definition.
         * @summary Create Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAttribute: async (projId, envId, resourceId, resourceAttributeCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createResourceAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createResourceAttribute', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('createResourceAttribute', 'resourceId', resourceId);
            // verify required parameter 'resourceAttributeCreate' is not null or undefined
            assertParamExists('createResourceAttribute', 'resourceAttributeCreate', resourceAttributeCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceAttributeCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceAttribute: async (projId, envId, resourceId, attributeId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteResourceAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteResourceAttribute', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteResourceAttribute', 'resourceId', resourceId);
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('deleteResourceAttribute', 'attributeId', attributeId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single attribute defined on the resource, if such attribute exists.
         * @summary Get Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAttribute: async (projId, envId, resourceId, attributeId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getResourceAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getResourceAttribute', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getResourceAttribute', 'resourceId', resourceId);
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('getResourceAttribute', 'attributeId', attributeId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the attributes defined on the resource.
         * @summary List Resource Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceAttributes: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listResourceAttributes', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listResourceAttributes', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('listResourceAttributes', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAttribute: async (projId, envId, resourceId, attributeId, resourceAttributeUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateResourceAttribute', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateResourceAttribute', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateResourceAttribute', 'resourceId', resourceId);
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('updateResourceAttribute', 'attributeId', attributeId);
            // verify required parameter 'resourceAttributeUpdate' is not null or undefined
            assertParamExists('updateResourceAttribute', 'resourceAttributeUpdate', resourceAttributeUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'attribute_id'}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceAttributeUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceAttributesApi - functional programming interface
 * @export
 */
export const ResourceAttributesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ResourceAttributesApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new attribute as part of the resource definition.
         * @summary Create Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single attribute defined on the resource, if such attribute exists.
         * @summary Get Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceAttribute(projId, envId, resourceId, attributeId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAttribute(projId, envId, resourceId, attributeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the attributes defined on the resource.
         * @summary List Resource Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceAttributes(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceAttributes(projId, envId, resourceId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceAttribute(projId, envId, resourceId, attributeId, resourceAttributeUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAttribute(projId, envId, resourceId, attributeId, resourceAttributeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ResourceAttributesApi - factory interface
 * @export
 */
export const ResourceAttributesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ResourceAttributesApiFp(configuration);
    return {
        /**
         * Creates a new attribute as part of the resource definition.
         * @summary Create Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeCreate} resourceAttributeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options) {
            return localVarFp
                .createResourceAttribute(projId, envId, resourceId, resourceAttributeCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
         * @summary Delete Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options) {
            return localVarFp
                .deleteResourceAttribute(projId, envId, resourceId, attributeId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single attribute defined on the resource, if such attribute exists.
         * @summary Get Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAttribute(projId, envId, resourceId, attributeId, options) {
            return localVarFp
                .getResourceAttribute(projId, envId, resourceId, attributeId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the attributes defined on the resource.
         * @summary List Resource Attributes
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceAttributes(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceAttributes(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Attribute
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} attributeId Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \&quot;slug\&quot;).
         * @param {ResourceAttributeUpdate} resourceAttributeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAttribute(projId, envId, resourceId, attributeId, resourceAttributeUpdate, options) {
            return localVarFp
                .updateResourceAttribute(projId, envId, resourceId, attributeId, resourceAttributeUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ResourceAttributesApi - object-oriented interface
 * @export
 * @class ResourceAttributesApi
 * @extends {BaseAPI}
 */
export class ResourceAttributesApi extends BaseAPI {
    /**
     * Creates a new attribute as part of the resource definition.
     * @summary Create Resource Attribute
     * @param {ResourceAttributesApiCreateResourceAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceAttributesApi
     */
    createResourceAttribute(requestParameters, options) {
        return ResourceAttributesApiFp(this.configuration)
            .createResourceAttribute(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.resourceAttributeCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the attribute and all its related data.  Note: If the attribute is used by policies, removing it will cause the attribute to evaluate as `undefined`.
     * @summary Delete Resource Attribute
     * @param {ResourceAttributesApiDeleteResourceAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceAttributesApi
     */
    deleteResourceAttribute(requestParameters, options) {
        return ResourceAttributesApiFp(this.configuration)
            .deleteResourceAttribute(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.attributeId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single attribute defined on the resource, if such attribute exists.
     * @summary Get Resource Attribute
     * @param {ResourceAttributesApiGetResourceAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceAttributesApi
     */
    getResourceAttribute(requestParameters, options) {
        return ResourceAttributesApiFp(this.configuration)
            .getResourceAttribute(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.attributeId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the attributes defined on the resource.
     * @summary List Resource Attributes
     * @param {ResourceAttributesApiListResourceAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceAttributesApi
     */
    listResourceAttributes(requestParameters, options) {
        return ResourceAttributesApiFp(this.configuration)
            .listResourceAttributes(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the attribute defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Attribute
     * @param {ResourceAttributesApiUpdateResourceAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceAttributesApi
     */
    updateResourceAttribute(requestParameters, options) {
        return ResourceAttributesApiFp(this.configuration)
            .updateResourceAttribute(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.attributeId, requestParameters.resourceAttributeUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,