/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ProxyConfigCreate } from '../types';
import { ProxyConfigRead } from '../types';
import { ProxyConfigUpdate } from '../types';
/**
 * ProxyConfigApi - axios parameter creator
 * @export
 */
export declare const ProxyConfigApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProxyConfig: (projId: string, envId: string, proxyConfigCreate: ProxyConfigCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProxyConfig: (projId: string, envId: string, proxyConfigId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProxyConfig: (projId: string, envId: string, proxyConfigId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProxyConfigs: (projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProxyConfig: (projId: string, envId: string, proxyConfigId: string, proxyConfigUpdate: ProxyConfigUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProxyConfigApi - functional programming interface
 * @export
 */
export declare const ProxyConfigApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProxyConfig(projId: string, envId: string, proxyConfigCreate: ProxyConfigCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>>;
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProxyConfig(projId: string, envId: string, proxyConfigId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProxyConfig(projId: string, envId: string, proxyConfigId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>>;
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProxyConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxyConfigRead>>>;
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProxyConfig(projId: string, envId: string, proxyConfigId: string, proxyConfigUpdate: ProxyConfigUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyConfigRead>>;
};
/**
 * ProxyConfigApi - factory interface
 * @export
 */
export declare const ProxyConfigApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigCreate} proxyConfigCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProxyConfig(projId: string, envId: string, proxyConfigCreate: ProxyConfigCreate, options?: any): AxiosPromise<ProxyConfigRead>;
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProxyConfig(projId: string, envId: string, proxyConfigId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProxyConfig(projId: string, envId: string, proxyConfigId: string, options?: any): AxiosPromise<ProxyConfigRead>;
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProxyConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<ProxyConfigRead>>;
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} proxyConfigId Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @param {ProxyConfigUpdate} proxyConfigUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProxyConfig(projId: string, envId: string, proxyConfigId: string, proxyConfigUpdate: ProxyConfigUpdate, options?: any): AxiosPromise<ProxyConfigRead>;
};
/**
 * Request parameters for createProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiCreateProxyConfigRequest
 */
export interface ProxyConfigApiCreateProxyConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiCreateProxyConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiCreateProxyConfig
     */
    readonly envId: string;
    /**
     *
     * @type {ProxyConfigCreate}
     * @memberof ProxyConfigApiCreateProxyConfig
     */
    readonly proxyConfigCreate: ProxyConfigCreate;
}
/**
 * Request parameters for deleteProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiDeleteProxyConfigRequest
 */
export interface ProxyConfigApiDeleteProxyConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiDeleteProxyConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiDeleteProxyConfig
     */
    readonly envId: string;
    /**
     * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiDeleteProxyConfig
     */
    readonly proxyConfigId: string;
}
/**
 * Request parameters for getProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiGetProxyConfigRequest
 */
export interface ProxyConfigApiGetProxyConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiGetProxyConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiGetProxyConfig
     */
    readonly envId: string;
    /**
     * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiGetProxyConfig
     */
    readonly proxyConfigId: string;
}
/**
 * Request parameters for listProxyConfigs operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiListProxyConfigsRequest
 */
export interface ProxyConfigApiListProxyConfigsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiListProxyConfigs
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiListProxyConfigs
     */
    readonly envId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ProxyConfigApiListProxyConfigs
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ProxyConfigApiListProxyConfigs
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateProxyConfig operation in ProxyConfigApi.
 * @export
 * @interface ProxyConfigApiUpdateProxyConfigRequest
 */
export interface ProxyConfigApiUpdateProxyConfigRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiUpdateProxyConfig
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiUpdateProxyConfig
     */
    readonly envId: string;
    /**
     * Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ProxyConfigApiUpdateProxyConfig
     */
    readonly proxyConfigId: string;
    /**
     *
     * @type {ProxyConfigUpdate}
     * @memberof ProxyConfigApiUpdateProxyConfig
     */
    readonly proxyConfigUpdate: ProxyConfigUpdate;
}
/**
 * ProxyConfigApi - object-oriented interface
 * @export
 * @class ProxyConfigApi
 * @extends {BaseAPI}
 */
export declare class ProxyConfigApi extends BaseAPI {
    /**
     * Creates a new proxy config inside the Permit.io system.  If the proxy config is already created: will return 200 instead of 201, and will return the existing proxy config object in the response body.
     * @summary Create Proxy Config
     * @param {ProxyConfigApiCreateProxyConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyConfigApi
     */
    createProxyConfig(requestParameters: ProxyConfigApiCreateProxyConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProxyConfigRead, any>>;
    /**
     * Deletes the proxy config and all its related data.
     * @summary Delete Proxy Config
     * @param {ProxyConfigApiDeleteProxyConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyConfigApi
     */
    deleteProxyConfig(requestParameters: ProxyConfigApiDeleteProxyConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a proxy config, if such proxy config exists. Otherwise returns 404.
     * @summary Get Proxy Config
     * @param {ProxyConfigApiGetProxyConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyConfigApi
     */
    getProxyConfig(requestParameters: ProxyConfigApiGetProxyConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProxyConfigRead, any>>;
    /**
     * Lists all the proxy configs defined within an environment.
     * @summary List Proxy Configs
     * @param {ProxyConfigApiListProxyConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyConfigApi
     */
    listProxyConfigs(requestParameters: ProxyConfigApiListProxyConfigsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProxyConfigRead[], any>>;
    /**
     * Partially updates the proxy config definition. Fields that will be provided will be completely overwritten.
     * @summary Update Proxy Config
     * @param {ProxyConfigApiUpdateProxyConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyConfigApi
     */
    updateProxyConfig(requestParameters: ProxyConfigApiUpdateProxyConfigRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProxyConfigRead, any>>;
}
