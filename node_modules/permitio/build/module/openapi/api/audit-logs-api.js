/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedAuditLog: async (projId, envId, logId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDetailedAuditLog', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDetailedAuditLog', 'envId', envId);
            // verify required parameter 'logId' is not null or undefined
            assertParamExists('getDetailedAuditLog', 'logId', logId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'log_id'}}`, encodeURIComponent(String(logId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs: async (projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listAuditLogs', 'envId', envId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pdpId !== undefined) {
                localVarQueryParameter['pdp_id'] = pdpId;
            }
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (decision !== undefined) {
                localVarQueryParameter['decision'] = decision;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailedAuditLog(projId, envId, logId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailedAuditLog(projId, envId, logId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuditLogsApiFp(configuration);
    return {
        /**
         *
         * @summary Get detailed audit log
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} logId The unique id of the audit log
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailedAuditLog(projId, envId, logId, options) {
            return localVarFp
                .getDetailedAuditLog(projId, envId, logId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Audit Logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [pdpId] Filter by pdp config id
         * @param {Array<string>} [users] List of user keys or emails to filter by
         * @param {boolean} [decision] Filter by decision result
         * @param {Array<string>} [resources] Filter by resources
         * @param {string} [tenant] Filter by tenant
         * @param {string} [action] Filter by action
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {AuditLogSortKey} [sortBy] Sort by column
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options) {
            return localVarFp
                .listAuditLogs(projId, envId, pdpId, users, decision, resources, tenant, action, timestampFrom, timestampTo, sortBy, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     *
     * @summary Get detailed audit log
     * @param {AuditLogsApiGetDetailedAuditLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    getDetailedAuditLog(requestParameters, options) {
        return AuditLogsApiFp(this.configuration)
            .getDetailedAuditLog(requestParameters.projId, requestParameters.envId, requestParameters.logId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Audit Logs
     * @param {AuditLogsApiListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    listAuditLogs(requestParameters, options) {
        return AuditLogsApiFp(this.configuration)
            .listAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.decision, requestParameters.resources, requestParameters.tenant, requestParameters.action, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.sortBy, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,