/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AuditElementsDataApi - axios parameter creator
 * @export
 */
export const AuditElementsDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListAuditLogs: async (projId, envId, elementsConfigId, search, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('elementsListAuditLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('elementsListAuditLogs', 'envId', envId);
            // verify required parameter 'elementsConfigId' is not null or undefined
            assertParamExists('elementsListAuditLogs', 'elementsConfigId', elementsConfigId);
            const localVarPath = `/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'elements_config_id'}}`, encodeURIComponent(String(elementsConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuditElementsDataApi - functional programming interface
 * @export
 */
export const AuditElementsDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuditElementsDataApiAxiosParamCreator(configuration);
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AuditElementsDataApi - factory interface
 * @export
 */
export const AuditElementsDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuditElementsDataApiFp(configuration);
    return {
        /**
         * Lists audit logs for for specific elements config (tenant scope)
         * @summary List audit logs
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} elementsConfigId Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
         * @param {string} [search] Text search for the email field
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options) {
            return localVarFp
                .elementsListAuditLogs(projId, envId, elementsConfigId, search, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuditElementsDataApi - object-oriented interface
 * @export
 * @class AuditElementsDataApi
 * @extends {BaseAPI}
 */
export class AuditElementsDataApi extends BaseAPI {
    /**
     * Lists audit logs for for specific elements config (tenant scope)
     * @summary List audit logs
     * @param {AuditElementsDataApiElementsListAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditElementsDataApi
     */
    elementsListAuditLogs(requestParameters, options) {
        return AuditElementsDataApiFp(this.configuration)
            .elementsListAuditLogs(requestParameters.projId, requestParameters.envId, requestParameters.elementsConfigId, requestParameters.search, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXQtZWxlbWVudHMtZGF0YS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvYXVkaXQtZWxlbWVudHMtZGF0YS1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7Ozs7Ozs7OztHQVVHO0FBRUgsT0FBTyxXQUFnRSxNQUFNLE9BQU8sQ0FBQztBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLE9BQU8sRUFDTCxjQUFjLEVBQ2QsaUJBQWlCLEVBR2pCLHFCQUFxQixFQUVyQixlQUFlLEVBRWYsWUFBWSxFQUNaLHFCQUFxQixHQUN0QixNQUFNLFdBQVcsQ0FBQztBQUNuQixhQUFhO0FBQ2IsT0FBTyxFQUFFLFNBQVMsRUFBbUMsT0FBTyxFQUFpQixNQUFNLFNBQVMsQ0FBQztBQUs3Rjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBRyxVQUFVLGFBQTZCO0lBQzFGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7V0FXRztRQUNILHFCQUFxQixFQUFFLEtBQUssRUFDMUIsTUFBYyxFQUNkLEtBQWEsRUFDYixnQkFBd0IsRUFDeEIsTUFBZSxFQUNmLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsaUJBQWlCLENBQUMsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdELDZEQUE2RDtZQUM3RCxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDM0Qsd0VBQXdFO1lBQ3hFLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDakYsTUFBTSxZQUFZLEdBQ2hCLDZFQUE2RTtpQkFDMUUsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsa0JBQWtC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