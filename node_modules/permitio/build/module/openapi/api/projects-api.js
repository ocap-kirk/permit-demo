/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new project under the active organization.
         * @summary Create Project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectCreate, options = {}) => {
            // verify required parameter 'projectCreate' is not null or undefined
            assertParamExists('createProject', 'projectCreate', projectCreate);
            const localVarPath = `/v2/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the project and all its related data.
         * @summary Delete Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (projId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteProject', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single project matching the given proj_id, if such project exists.
         * @summary Get Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getProject', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the projects under the active organization.
         * @summary List Projects
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (page, perPage, options = {}) => {
            const localVarPath = `/v2/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the project.
         * @summary Update Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {ProjectUpdate} projectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (projId, projectUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateProject', 'projId', projId);
            // verify required parameter 'projectUpdate' is not null or undefined
            assertParamExists('updateProject', 'projectUpdate', projectUpdate);
            const localVarPath = `/v2/projects/{proj_id}`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new project under the active organization.
         * @summary Create Project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(projectCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the project and all its related data.
         * @summary Delete Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(projId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single project matching the given proj_id, if such project exists.
         * @summary Get Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the projects under the active organization.
         * @summary List Projects
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the project.
         * @summary Update Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {ProjectUpdate} projectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(projId, projectUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(projId, projectUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProjectsApiFp(configuration);
    return {
        /**
         * Creates a new project under the active organization.
         * @summary Create Project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreate, options) {
            return localVarFp
                .createProject(projectCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the project and all its related data.
         * @summary Delete Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(projId, options) {
            return localVarFp.deleteProject(projId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single project matching the given proj_id, if such project exists.
         * @summary Get Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projId, options) {
            return localVarFp.getProject(projId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the projects under the active organization.
         * @summary List Projects
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(page, perPage, options) {
            return localVarFp
                .listProjects(page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Updates the project.
         * @summary Update Project
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {ProjectUpdate} projectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(projId, projectUpdate, options) {
            return localVarFp
                .updateProject(projId, projectUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Creates a new project under the active organization.
     * @summary Create Project
     * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(requestParameters, options) {
        return ProjectsApiFp(this.configuration)
            .createProject(requestParameters.projectCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the project and all its related data.
     * @summary Delete Project
     * @param {ProjectsApiDeleteProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(requestParameters, options) {
        return ProjectsApiFp(this.configuration)
            .deleteProject(requestParameters.projId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single project matching the given proj_id, if such project exists.
     * @summary Get Project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(requestParameters, options) {
        return ProjectsApiFp(this.configuration)
            .getProject(requestParameters.projId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the projects under the active organization.
     * @summary List Projects
     * @param {ProjectsApiListProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjects(requestParameters = {}, options) {
        return ProjectsApiFp(this.configuration)
            .listProjects(requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the project.
     * @summary Update Project
     * @param {ProjectsApiUpdateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    updateProject(requestParameters, options) {
        return ProjectsApiFp(this.configuration)
            .updateProject(requestParameters.projId, requestParameters.projectUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,