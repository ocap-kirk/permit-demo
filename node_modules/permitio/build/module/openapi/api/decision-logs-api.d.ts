/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PaginatedResultOPADecisionLog } from '../types';
/**
 * DecisionLogsApi - axios parameter creator
 * @export
 */
export declare const DecisionLogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List PDP Decisions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpDecisionLogs: (projId: string, envId: string, pdpId: string, users?: Array<string>, approved?: boolean, resources?: Array<string>, timestampFrom?: number, timestampTo?: number, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DecisionLogsApi - functional programming interface
 * @export
 */
export declare const DecisionLogsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List PDP Decisions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpDecisionLogs(projId: string, envId: string, pdpId: string, users?: Array<string>, approved?: boolean, resources?: Array<string>, timestampFrom?: number, timestampTo?: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultOPADecisionLog>>;
};
/**
 * DecisionLogsApi - factory interface
 * @export
 */
export declare const DecisionLogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List PDP Decisions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpDecisionLogs(projId: string, envId: string, pdpId: string, users?: Array<string>, approved?: boolean, resources?: Array<string>, timestampFrom?: number, timestampTo?: number, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedResultOPADecisionLog>;
};
/**
 * Request parameters for listPdpDecisionLogs operation in DecisionLogsApi.
 * @export
 * @interface DecisionLogsApiListPdpDecisionLogsRequest
 */
export interface DecisionLogsApiListPdpDecisionLogsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly envId: string;
    /**
     * The unique id of the pdp
     * @type {string}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly pdpId: string;
    /**
     * List of user IDs to filter by
     * @type {Array<string>}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly users?: Array<string>;
    /**
     * Filter by approved decisions
     * @type {boolean}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly approved?: boolean;
    /**
     * Filter by resources
     * @type {Array<string>}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly resources?: Array<string>;
    /**
     * Filter by timestamp from
     * @type {number}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly timestampFrom?: number;
    /**
     * Filter by timestamp to
     * @type {number}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly timestampTo?: number;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof DecisionLogsApiListPdpDecisionLogs
     */
    readonly perPage?: number;
}
/**
 * DecisionLogsApi - object-oriented interface
 * @export
 * @class DecisionLogsApi
 * @extends {BaseAPI}
 */
export declare class DecisionLogsApi extends BaseAPI {
    /**
     *
     * @summary List PDP Decisions
     * @param {DecisionLogsApiListPdpDecisionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionLogsApi
     */
    listPdpDecisionLogs(requestParameters: DecisionLogsApiListPdpDecisionLogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultOPADecisionLog, any>>;
}
