/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ResourceActionGroupCreate } from '../types';
import { ResourceActionGroupRead } from '../types';
import { ResourceActionGroupUpdate } from '../types';
/**
 * ResourceActionGroupsApi - axios parameter creator
 * @export
 */
export declare const ResourceActionGroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupCreate} resourceActionGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceActionGroup: (projId: string, envId: string, resourceId: string, resourceActionGroupCreate: ResourceActionGroupCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceActionGroup: (projId: string, envId: string, resourceId: string, actionGroupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceActionGroup: (projId: string, envId: string, resourceId: string, actionGroupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceActionGroups: (projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceActionGroup: (resourceId: string, actionGroupId: string, projId: string, envId: string, resourceActionGroupUpdate: ResourceActionGroupUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ResourceActionGroupsApi - functional programming interface
 * @export
 */
export declare const ResourceActionGroupsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupCreate} resourceActionGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceActionGroup(projId: string, envId: string, resourceId: string, resourceActionGroupCreate: ResourceActionGroupCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>>;
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceActionGroup(projId: string, envId: string, resourceId: string, actionGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceActionGroup(projId: string, envId: string, resourceId: string, actionGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>>;
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceActionGroups(projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceActionGroupRead>>>;
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceActionGroup(resourceId: string, actionGroupId: string, projId: string, envId: string, resourceActionGroupUpdate: ResourceActionGroupUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceActionGroupRead>>;
};
/**
 * ResourceActionGroupsApi - factory interface
 * @export
 */
export declare const ResourceActionGroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupCreate} resourceActionGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceActionGroup(projId: string, envId: string, resourceId: string, resourceActionGroupCreate: ResourceActionGroupCreate, options?: any): AxiosPromise<ResourceActionGroupRead>;
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceActionGroup(projId: string, envId: string, resourceId: string, actionGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceActionGroup(projId: string, envId: string, resourceId: string, actionGroupId: string, options?: any): AxiosPromise<ResourceActionGroupRead>;
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceActionGroups(projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<ResourceActionGroupRead>>;
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceActionGroup(resourceId: string, actionGroupId: string, projId: string, envId: string, resourceActionGroupUpdate: ResourceActionGroupUpdate, options?: any): AxiosPromise<ResourceActionGroupRead>;
};
/**
 * Request parameters for createResourceActionGroup operation in ResourceActionGroupsApi.
 * @export
 * @interface ResourceActionGroupsApiCreateResourceActionGroupRequest
 */
export interface ResourceActionGroupsApiCreateResourceActionGroupRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiCreateResourceActionGroup
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiCreateResourceActionGroup
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiCreateResourceActionGroup
     */
    readonly resourceId: string;
    /**
     *
     * @type {ResourceActionGroupCreate}
     * @memberof ResourceActionGroupsApiCreateResourceActionGroup
     */
    readonly resourceActionGroupCreate: ResourceActionGroupCreate;
}
/**
 * Request parameters for deleteResourceActionGroup operation in ResourceActionGroupsApi.
 * @export
 * @interface ResourceActionGroupsApiDeleteResourceActionGroupRequest
 */
export interface ResourceActionGroupsApiDeleteResourceActionGroupRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiDeleteResourceActionGroup
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiDeleteResourceActionGroup
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiDeleteResourceActionGroup
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiDeleteResourceActionGroup
     */
    readonly actionGroupId: string;
}
/**
 * Request parameters for getResourceActionGroup operation in ResourceActionGroupsApi.
 * @export
 * @interface ResourceActionGroupsApiGetResourceActionGroupRequest
 */
export interface ResourceActionGroupsApiGetResourceActionGroupRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiGetResourceActionGroup
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiGetResourceActionGroup
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiGetResourceActionGroup
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiGetResourceActionGroup
     */
    readonly actionGroupId: string;
}
/**
 * Request parameters for listResourceActionGroups operation in ResourceActionGroupsApi.
 * @export
 * @interface ResourceActionGroupsApiListResourceActionGroupsRequest
 */
export interface ResourceActionGroupsApiListResourceActionGroupsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiListResourceActionGroups
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiListResourceActionGroups
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiListResourceActionGroups
     */
    readonly resourceId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ResourceActionGroupsApiListResourceActionGroups
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ResourceActionGroupsApiListResourceActionGroups
     */
    readonly perPage?: number;
}
/**
 * Request parameters for updateResourceActionGroup operation in ResourceActionGroupsApi.
 * @export
 * @interface ResourceActionGroupsApiUpdateResourceActionGroupRequest
 */
export interface ResourceActionGroupsApiUpdateResourceActionGroupRequest {
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiUpdateResourceActionGroup
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiUpdateResourceActionGroup
     */
    readonly actionGroupId: string;
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiUpdateResourceActionGroup
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceActionGroupsApiUpdateResourceActionGroup
     */
    readonly envId: string;
    /**
     *
     * @type {ResourceActionGroupUpdate}
     * @memberof ResourceActionGroupsApiUpdateResourceActionGroup
     */
    readonly resourceActionGroupUpdate: ResourceActionGroupUpdate;
}
/**
 * ResourceActionGroupsApi - object-oriented interface
 * @export
 * @class ResourceActionGroupsApi
 * @extends {BaseAPI}
 */
export declare class ResourceActionGroupsApi extends BaseAPI {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {ResourceActionGroupsApiCreateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    createResourceActionGroup(requestParameters: ResourceActionGroupsApiCreateResourceActionGroupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceActionGroupRead, any>>;
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {ResourceActionGroupsApiDeleteResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    deleteResourceActionGroup(requestParameters: ResourceActionGroupsApiDeleteResourceActionGroupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {ResourceActionGroupsApiGetResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    getResourceActionGroup(requestParameters: ResourceActionGroupsApiGetResourceActionGroupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceActionGroupRead, any>>;
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {ResourceActionGroupsApiListResourceActionGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    listResourceActionGroups(requestParameters: ResourceActionGroupsApiListResourceActionGroupsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceActionGroupRead[], any>>;
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {ResourceActionGroupsApiUpdateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    updateResourceActionGroup(requestParameters: ResourceActionGroupsApiUpdateResourceActionGroupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceActionGroupRead, any>>;
}
