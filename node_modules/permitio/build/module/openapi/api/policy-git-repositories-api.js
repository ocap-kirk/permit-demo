/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * PolicyGitRepositoriesApi - axios parameter creator
 * @export
 */
export const PolicyGitRepositoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Activate Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activatePolicyRepo: async (projId, repoId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('activatePolicyRepo', 'projId', projId);
            // verify required parameter 'repoId' is not null or undefined
            assertParamExists('activatePolicyRepo', 'repoId', repoId);
            const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}/activate`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
         * @summary Create Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {PolicyRepoCreate} policyRepoCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyRepo: async (projId, policyRepoCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createPolicyRepo', 'projId', projId);
            // verify required parameter 'policyRepoCreate' is not null or undefined
            assertParamExists('createPolicyRepo', 'policyRepoCreate', policyRepoCreate);
            const localVarPath = `/v2/projects/{proj_id}/repos`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(policyRepoCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicyRepo: async (projId, repoId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deletePolicyRepo', 'projId', projId);
            // verify required parameter 'repoId' is not null or undefined
            assertParamExists('deletePolicyRepo', 'repoId', repoId);
            const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Disable Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableActivePolicyRepo: async (projId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('disableActivePolicyRepo', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}/repos/disable`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the currently active repository, if such repository exists.
         * @summary Get Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicyRepo: async (projId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getActivePolicyRepo', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}/repos/active`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single repository matching the given repo_id, if such repository exists.
         * @summary Get Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyRepo: async (projId, repoId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getPolicyRepo', 'projId', projId);
            // verify required parameter 'repoId' is not null or undefined
            assertParamExists('getPolicyRepo', 'repoId', repoId);
            const localVarPath = `/v2/projects/{proj_id}/repos/{repo_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'repo_id'}}`, encodeURIComponent(String(repoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the policy repositories under a given project.
         * @summary List Policy Repos
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicyRepos: async (projId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listPolicyRepos', 'projId', projId);
            const localVarPath = `/v2/projects/{proj_id}/repos`.replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PolicyGitRepositoriesApi - functional programming interface
 * @export
 */
export const PolicyGitRepositoriesApiFp = function (configuration) {
    const localVarAxiosParamCreator = PolicyGitRepositoriesApiAxiosParamCreator(configuration);
    return {
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Activate Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activatePolicyRepo(projId, repoId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activatePolicyRepo(projId, repoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
         * @summary Create Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {PolicyRepoCreate} policyRepoCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicyRepo(projId, policyRepoCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicyRepo(projId, policyRepoCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicyRepo(projId, repoId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicyRepo(projId, repoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Disable Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableActivePolicyRepo(projId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableActivePolicyRepo(projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the currently active repository, if such repository exists.
         * @summary Get Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivePolicyRepo(projId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicyRepo(projId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single repository matching the given repo_id, if such repository exists.
         * @summary Get Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyRepo(projId, repoId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyRepo(projId, repoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the policy repositories under a given project.
         * @summary List Policy Repos
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPolicyRepos(projId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicyRepos(projId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * PolicyGitRepositoriesApi - factory interface
 * @export
 */
export const PolicyGitRepositoriesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PolicyGitRepositoriesApiFp(configuration);
    return {
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Activate Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activatePolicyRepo(projId, repoId, options) {
            return localVarFp
                .activatePolicyRepo(projId, repoId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
         * @summary Create Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {PolicyRepoCreate} policyRepoCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicyRepo(projId, policyRepoCreate, options) {
            return localVarFp
                .createPolicyRepo(projId, policyRepoCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an environment and all its related data.
         * @summary Delete Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicyRepo(projId, repoId, options) {
            return localVarFp
                .deletePolicyRepo(projId, repoId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
         * @summary Disable Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableActivePolicyRepo(projId, options) {
            return localVarFp
                .disableActivePolicyRepo(projId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets the currently active repository, if such repository exists.
         * @summary Get Active Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicyRepo(projId, options) {
            return localVarFp
                .getActivePolicyRepo(projId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single repository matching the given repo_id, if such repository exists.
         * @summary Get Policy Repo
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} repoId Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyRepo(projId, repoId, options) {
            return localVarFp
                .getPolicyRepo(projId, repoId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the policy repositories under a given project.
         * @summary List Policy Repos
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicyRepos(projId, page, perPage, options) {
            return localVarFp
                .listPolicyRepos(projId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * PolicyGitRepositoriesApi - object-oriented interface
 * @export
 * @class PolicyGitRepositoriesApi
 * @extends {BaseAPI}
 */
export class PolicyGitRepositoriesApi extends BaseAPI {
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Activate Policy Repo
     * @param {PolicyGitRepositoriesApiActivatePolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    activatePolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .activatePolicyRepo(requestParameters.projId, requestParameters.repoId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new policy repository configuration under a given project. The given repository is created with status \'pending\', it will be changed and used as the \'active\' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
     * @summary Create Policy Repo
     * @param {PolicyGitRepositoriesApiCreatePolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    createPolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .createPolicyRepo(requestParameters.projId, requestParameters.policyRepoCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an environment and all its related data.
     * @summary Delete Policy Repo
     * @param {PolicyGitRepositoriesApiDeletePolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    deletePolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .deletePolicyRepo(requestParameters.projId, requestParameters.repoId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
     * @summary Disable Active Policy Repo
     * @param {PolicyGitRepositoriesApiDisableActivePolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    disableActivePolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .disableActivePolicyRepo(requestParameters.projId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the currently active repository, if such repository exists.
     * @summary Get Active Policy Repo
     * @param {PolicyGitRepositoriesApiGetActivePolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    getActivePolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .getActivePolicyRepo(requestParameters.projId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single repository matching the given repo_id, if such repository exists.
     * @summary Get Policy Repo
     * @param {PolicyGitRepositoriesApiGetPolicyRepoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    getPolicyRepo(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .getPolicyRepo(requestParameters.projId, requestParameters.repoId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the policy repositories under a given project.
     * @summary List Policy Repos
     * @param {PolicyGitRepositoriesApiListPolicyReposRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyGitRepositoriesApi
     */
    listPolicyRepos(requestParameters, options) {
        return PolicyGitRepositoriesApiFp(this.configuration)
            .listPolicyRepos(requestParameters.projId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,