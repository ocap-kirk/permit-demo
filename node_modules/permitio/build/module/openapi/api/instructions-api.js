/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * InstructionsApi - axios parameter creator
 * @export
 */
export const InstructionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguageInstructions: async (projId, envId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listLanguageInstructions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listLanguageInstructions', 'envId', envId);
            const localVarPath = `/v2/{proj_id}/{env_id}/get_instructions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * InstructionsApi - functional programming interface
 * @export
 */
export const InstructionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = InstructionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLanguageInstructions(projId, envId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLanguageInstructions(projId, envId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * InstructionsApi - factory interface
 * @export
 */
export const InstructionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = InstructionsApiFp(configuration);
    return {
        /**
         * Lists pending organization invites
         * @summary List Language Instructions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguageInstructions(projId, envId, options) {
            return localVarFp
                .listLanguageInstructions(projId, envId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * InstructionsApi - object-oriented interface
 * @export
 * @class InstructionsApi
 * @extends {BaseAPI}
 */
export class InstructionsApi extends BaseAPI {
    /**
     * Lists pending organization invites
     * @summary List Language Instructions
     * @param {InstructionsApiListLanguageInstructionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstructionsApi
     */
    listLanguageInstructions(requestParameters, options) {
        return InstructionsApiFp(this.configuration)
            .listLanguageInstructions(requestParameters.projId, requestParameters.envId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdHJ1Y3Rpb25zLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9pbnN0cnVjdGlvbnMtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRztBQUVILE9BQU8sV0FBZ0UsTUFBTSxPQUFPLENBQUM7QUFFckYseURBQXlEO0FBQ3pELGFBQWE7QUFDYixPQUFPLEVBQ0wsY0FBYyxFQUNkLGlCQUFpQixFQUdqQixxQkFBcUIsRUFFckIsZUFBZSxFQUVmLFlBQVksRUFDWixxQkFBcUIsR0FDdEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsYUFBYTtBQUNiLE9BQU8sRUFBRSxTQUFTLEVBQW1DLE9BQU8sRUFBaUIsTUFBTSxTQUFTLENBQUM7QUFLN0Y7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsVUFBVSxhQUE2QjtJQUNyRixPQUFPO1FBQ0w7Ozs7Ozs7V0FPRztRQUNILHdCQUF3QixFQUFFLEtBQUssRUFDN0IsTUFBYyxFQUNkLEtBQWEsRUFDYixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsaUJBQWlCLENBQUMsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2hFLDZEQUE2RDtZQUM3RCxpQkFBaUIsQ0FBQywwQkFBMEIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDOUQsTUFBTSxZQUFZLEdBQUcseUNBQXlDO2lCQUMzRCxPQUFPLENBQUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDN0QsT0FBTyxDQUFDLElBQUksUUFBUSxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxvRkFBb0Y7WUFD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