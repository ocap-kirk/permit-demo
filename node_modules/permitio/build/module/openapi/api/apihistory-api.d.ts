/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { APIHistoryEventFullRead } from '../types';
import { PaginatedResultAPIHistoryEventRead } from '../types';
/**
 * APIHistoryApi - axios parameter creator
 * @export
 */
export declare const APIHistoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns full information, including request and response bodies, for one event.
     * @summary Get Api Event
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiEvent: (eventId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Request Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestBody: (eventId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Response Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResponseBody: (eventId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches all API History events for given filters.
     * @summary List Api Events
     * @param {Array<string>} [method] HTTP methods to include in search
     * @param {Array<string>} [path] API paths to include in search
     * @param {boolean} [success] Filter by API request success/failure
     * @param {Array<number>} [statusCode] HTTP status codes to include in search
     * @param {Array<string>} [clientIp] IPs of clients to include in search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiEvents: (method?: Array<string>, path?: Array<string>, success?: boolean, statusCode?: Array<number>, clientIp?: Array<string>, actorType?: Array<string>, actorId?: Array<string>, actorDisplayName?: string, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * APIHistoryApi - functional programming interface
 * @export
 */
export declare const APIHistoryApiFp: (configuration?: Configuration) => {
    /**
     * Returns full information, including request and response bodies, for one event.
     * @summary Get Api Event
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiEvent(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIHistoryEventFullRead>>;
    /**
     *
     * @summary Get Request Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestBody(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     *
     * @summary Get Response Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResponseBody(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Fetches all API History events for given filters.
     * @summary List Api Events
     * @param {Array<string>} [method] HTTP methods to include in search
     * @param {Array<string>} [path] API paths to include in search
     * @param {boolean} [success] Filter by API request success/failure
     * @param {Array<number>} [statusCode] HTTP status codes to include in search
     * @param {Array<string>} [clientIp] IPs of clients to include in search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiEvents(method?: Array<string>, path?: Array<string>, success?: boolean, statusCode?: Array<number>, clientIp?: Array<string>, actorType?: Array<string>, actorId?: Array<string>, actorDisplayName?: string, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultAPIHistoryEventRead>>;
};
/**
 * APIHistoryApi - factory interface
 * @export
 */
export declare const APIHistoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns full information, including request and response bodies, for one event.
     * @summary Get Api Event
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiEvent(eventId: string, options?: any): AxiosPromise<APIHistoryEventFullRead>;
    /**
     *
     * @summary Get Request Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRequestBody(eventId: string, options?: any): AxiosPromise<File>;
    /**
     *
     * @summary Get Response Body
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResponseBody(eventId: string, options?: any): AxiosPromise<File>;
    /**
     * Fetches all API History events for given filters.
     * @summary List Api Events
     * @param {Array<string>} [method] HTTP methods to include in search
     * @param {Array<string>} [path] API paths to include in search
     * @param {boolean} [success] Filter by API request success/failure
     * @param {Array<number>} [statusCode] HTTP status codes to include in search
     * @param {Array<string>} [clientIp] IPs of clients to include in search
     * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
     * @param {Array<string>} [actorId] Actor ID to search
     * @param {string} [actorDisplayName] Actor display name to search
     * @param {Array<string>} [projectId] Projects to include in search
     * @param {Array<string>} [envId] Environments to include in search
     * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
     * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiEvents(method?: Array<string>, path?: Array<string>, success?: boolean, statusCode?: Array<number>, clientIp?: Array<string>, actorType?: Array<string>, actorId?: Array<string>, actorDisplayName?: string, projectId?: Array<string>, envId?: Array<string>, timestampFrom?: number, timestampUntil?: number, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedResultAPIHistoryEventRead>;
};
/**
 * Request parameters for getApiEvent operation in APIHistoryApi.
 * @export
 * @interface APIHistoryApiGetApiEventRequest
 */
export interface APIHistoryApiGetApiEventRequest {
    /**
     *
     * @type {string}
     * @memberof APIHistoryApiGetApiEvent
     */
    readonly eventId: string;
}
/**
 * Request parameters for getRequestBody operation in APIHistoryApi.
 * @export
 * @interface APIHistoryApiGetRequestBodyRequest
 */
export interface APIHistoryApiGetRequestBodyRequest {
    /**
     *
     * @type {string}
     * @memberof APIHistoryApiGetRequestBody
     */
    readonly eventId: string;
}
/**
 * Request parameters for getResponseBody operation in APIHistoryApi.
 * @export
 * @interface APIHistoryApiGetResponseBodyRequest
 */
export interface APIHistoryApiGetResponseBodyRequest {
    /**
     *
     * @type {string}
     * @memberof APIHistoryApiGetResponseBody
     */
    readonly eventId: string;
}
/**
 * Request parameters for listApiEvents operation in APIHistoryApi.
 * @export
 * @interface APIHistoryApiListApiEventsRequest
 */
export interface APIHistoryApiListApiEventsRequest {
    /**
     * HTTP methods to include in search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly method?: Array<string>;
    /**
     * API paths to include in search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly path?: Array<string>;
    /**
     * Filter by API request success/failure
     * @type {boolean}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly success?: boolean;
    /**
     * HTTP status codes to include in search
     * @type {Array<number>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly statusCode?: Array<number>;
    /**
     * IPs of clients to include in search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly clientIp?: Array<string>;
    /**
     * Actor type to search (member, user, api_key)
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly actorType?: Array<string>;
    /**
     * Actor ID to search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly actorId?: Array<string>;
    /**
     * Actor display name to search
     * @type {string}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly actorDisplayName?: string;
    /**
     * Projects to include in search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly projectId?: Array<string>;
    /**
     * Environments to include in search
     * @type {Array<string>}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly envId?: Array<string>;
    /**
     * Retrieve only events after this timestamp (seconds since epoch)
     * @type {number}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly timestampFrom?: number;
    /**
     * Retrieve only events before this timestamp (seconds since epoch)
     * @type {number}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly timestampUntil?: number;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof APIHistoryApiListApiEvents
     */
    readonly perPage?: number;
}
/**
 * APIHistoryApi - object-oriented interface
 * @export
 * @class APIHistoryApi
 * @extends {BaseAPI}
 */
export declare class APIHistoryApi extends BaseAPI {
    /**
     * Returns full information, including request and response bodies, for one event.
     * @summary Get Api Event
     * @param {APIHistoryApiGetApiEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getApiEvent(requestParameters: APIHistoryApiGetApiEventRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<APIHistoryEventFullRead>>;
    /**
     *
     * @summary Get Request Body
     * @param {APIHistoryApiGetRequestBodyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getRequestBody(requestParameters: APIHistoryApiGetRequestBodyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<File>>;
    /**
     *
     * @summary Get Response Body
     * @param {APIHistoryApiGetResponseBodyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getResponseBody(requestParameters: APIHistoryApiGetResponseBodyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<File>>;
    /**
     * Fetches all API History events for given filters.
     * @summary List Api Events
     * @param {APIHistoryApiListApiEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    listApiEvents(requestParameters?: APIHistoryApiListApiEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedResultAPIHistoryEventRead>>;
}
