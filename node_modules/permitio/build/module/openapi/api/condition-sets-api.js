/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ConditionSetsApi - axios parameter creator
 * @export
 */
export const ConditionSetsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new condition set (can be either a user set or a resource set).
         * @summary Create Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetCreate} conditionSetCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConditionSet: async (projId, envId, conditionSetCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetCreate' is not null or undefined
            assertParamExists('createConditionSet', 'conditionSetCreate', conditionSetCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(conditionSetCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
         * @summary Delete Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConditionSet: async (projId, envId, conditionSetId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('deleteConditionSet', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single condition set, if such condition set exists.
         * @summary Get Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSet: async (projId, envId, conditionSetId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('getConditionSet', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all ancestors (parent, parent of parent, and so on)
         * @summary Get Condition Set Ancestors
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetAncestors: async (projId, envId, conditionSetId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getConditionSetAncestors', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getConditionSetAncestors', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('getConditionSetAncestors', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all descendants (children, children of children, and so on)
         * @summary Get Condition Set Descendants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetDescendants: async (projId, envId, conditionSetId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getConditionSetDescendants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getConditionSetDescendants', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('getConditionSetDescendants', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Condition Set Possible Parents
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetPossibleParents: async (projId, envId, conditionSetId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getConditionSetPossibleParents', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getConditionSetPossibleParents', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('getConditionSetPossibleParents', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/possible_parents`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all condition sets matching a filter.
         * @summary List Condition Sets
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionSets: async (projId, envId, type, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listConditionSets', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listConditionSets', 'envId', envId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates a condition set. Fields that will be provided will be completely overwritten.
         * @summary Update Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetUpdate} conditionSetUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConditionSet: async (projId, envId, conditionSetId, conditionSetUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('updateConditionSet', 'conditionSetId', conditionSetId);
            // verify required parameter 'conditionSetUpdate' is not null or undefined
            assertParamExists('updateConditionSet', 'conditionSetUpdate', conditionSetUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(conditionSetUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ConditionSetsApi - functional programming interface
 * @export
 */
export const ConditionSetsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ConditionSetsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new condition set (can be either a user set or a resource set).
         * @summary Create Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetCreate} conditionSetCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConditionSet(projId, envId, conditionSetCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConditionSet(projId, envId, conditionSetCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
         * @summary Delete Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConditionSet(projId, envId, conditionSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConditionSet(projId, envId, conditionSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single condition set, if such condition set exists.
         * @summary Get Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditionSet(projId, envId, conditionSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSet(projId, envId, conditionSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all ancestors (parent, parent of parent, and so on)
         * @summary Get Condition Set Ancestors
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all descendants (children, children of children, and so on)
         * @summary Get Condition Set Descendants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Condition Set Possible Parents
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all condition sets matching a filter.
         * @summary List Condition Sets
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionSets(projId, envId, type, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionSets(projId, envId, type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates a condition set. Fields that will be provided will be completely overwritten.
         * @summary Update Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetUpdate} conditionSetUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ConditionSetsApi - factory interface
 * @export
 */
export const ConditionSetsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ConditionSetsApiFp(configuration);
    return {
        /**
         * Creates a new condition set (can be either a user set or a resource set).
         * @summary Create Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetCreate} conditionSetCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConditionSet(projId, envId, conditionSetCreate, options) {
            return localVarFp
                .createConditionSet(projId, envId, conditionSetCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
         * @summary Delete Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConditionSet(projId, envId, conditionSetId, options) {
            return localVarFp
                .deleteConditionSet(projId, envId, conditionSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single condition set, if such condition set exists.
         * @summary Get Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSet(projId, envId, conditionSetId, options) {
            return localVarFp
                .getConditionSet(projId, envId, conditionSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets all ancestors (parent, parent of parent, and so on)
         * @summary Get Condition Set Ancestors
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options) {
            return localVarFp
                .getConditionSetAncestors(projId, envId, conditionSetId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets all descendants (children, children of children, and so on)
         * @summary Get Condition Set Descendants
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options) {
            return localVarFp
                .getConditionSetDescendants(projId, envId, conditionSetId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Condition Set Possible Parents
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options) {
            return localVarFp
                .getConditionSetPossibleParents(projId, envId, conditionSetId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all condition sets matching a filter.
         * @summary List Condition Sets
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetType} [type] if provided, will return only the condition sets of the specified type. e.g: only user sets.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionSets(projId, envId, type, page, perPage, options) {
            return localVarFp
                .listConditionSets(projId, envId, type, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates a condition set. Fields that will be provided will be completely overwritten.
         * @summary Update Condition Set
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
         * @param {ConditionSetUpdate} conditionSetUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options) {
            return localVarFp
                .updateConditionSet(projId, envId, conditionSetId, conditionSetUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ConditionSetsApi - object-oriented interface
 * @export
 * @class ConditionSetsApi
 * @extends {BaseAPI}
 */
export class ConditionSetsApi extends BaseAPI {
    /**
     * Creates a new condition set (can be either a user set or a resource set).
     * @summary Create Condition Set
     * @param {ConditionSetsApiCreateConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    createConditionSet(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .createConditionSet(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
     * @summary Delete Condition Set
     * @param {ConditionSetsApiDeleteConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    deleteConditionSet(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .deleteConditionSet(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single condition set, if such condition set exists.
     * @summary Get Condition Set
     * @param {ConditionSetsApiGetConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    getConditionSet(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .getConditionSet(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all ancestors (parent, parent of parent, and so on)
     * @summary Get Condition Set Ancestors
     * @param {ConditionSetsApiGetConditionSetAncestorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    getConditionSetAncestors(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .getConditionSetAncestors(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all descendants (children, children of children, and so on)
     * @summary Get Condition Set Descendants
     * @param {ConditionSetsApiGetConditionSetDescendantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    getConditionSetDescendants(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .getConditionSetDescendants(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Condition Set Possible Parents
     * @param {ConditionSetsApiGetConditionSetPossibleParentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    getConditionSetPossibleParents(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .getConditionSetPossibleParents(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all condition sets matching a filter.
     * @summary List Condition Sets
     * @param {ConditionSetsApiListConditionSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    listConditionSets(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .listConditionSets(requestParameters.projId, requestParameters.envId, requestParameters.type, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates a condition set. Fields that will be provided will be completely overwritten.
     * @summary Update Condition Set
     * @param {ConditionSetsApiUpdateConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConditionSetsApi
     */
    updateConditionSet(requestParameters, options) {
        return ConditionSetsApiFp(this.configuration)
            .updateConditionSet(requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, requestParameters.conditionSetUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,