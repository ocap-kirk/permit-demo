/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ActivityLogApi - axios parameter creator
 * @export
 */
export const ActivityLogApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityEvents: async (actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options = {}) => {
            const localVarPath = `/v2/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (actorId) {
                localVarQueryParameter['actor_id'] = actorId;
            }
            if (actorDisplayName !== undefined) {
                localVarQueryParameter['actor_display_name'] = actorDisplayName;
            }
            if (actorType) {
                localVarQueryParameter['actor_type'] = actorType;
            }
            if (projectId) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (envId) {
                localVarQueryParameter['env_id'] = envId;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampUntil !== undefined) {
                localVarQueryParameter['timestamp_until'] = timestampUntil;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityTypes: async (options = {}) => {
            const localVarPath = `/v2/activity/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ActivityLogApi - functional programming interface
 * @export
 */
export const ActivityLogApiFp = function (configuration) {
    const localVarAxiosParamCreator = ActivityLogApiAxiosParamCreator(configuration);
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActivityTypes(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActivityTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ActivityLogApi - factory interface
 * @export
 */
export const ActivityLogApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ActivityLogApiFp(configuration);
    return {
        /**
         * Fetches all API History events for given filters.
         * @summary List Activity Events
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            return localVarFp
                .listActivityEvents(actorId, actorDisplayName, actorType, projectId, envId, timestampFrom, timestampUntil, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Activity Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActivityTypes(options) {
            return localVarFp.listActivityTypes(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ActivityLogApi - object-oriented interface
 * @export
 * @class ActivityLogApi
 * @extends {BaseAPI}
 */
export class ActivityLogApi extends BaseAPI {
    /**
     * Fetches all API History events for given filters.
     * @summary List Activity Events
     * @param {ActivityLogApiListActivityEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityEvents(requestParameters = {}, options) {
        return ActivityLogApiFp(this.configuration)
            .listActivityEvents(requestParameters.actorId, requestParameters.actorDisplayName, requestParameters.actorType, requestParameters.projectId, requestParameters.envId, requestParameters.timestampFrom, requestParameters.timestampUntil, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Activity Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityLogApi
     */
    listActivityTypes(options) {
        return ActivityLogApiFp(this.configuration)
            .listActivityTypes(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHktbG9nLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9hY3Rpdml0eS1sb2ctYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRztBQUVILE9BQU8sV0FBZ0UsTUFBTSxPQUFPLENBQUM7QUFFckYseURBQXlEO0FBQ3pELGFBQWE7QUFDYixPQUFPLEVBQ0wsY0FBYyxFQUlkLHFCQUFxQixFQUVyQixlQUFlLEVBRWYsWUFBWSxFQUNaLHFCQUFxQixHQUN0QixNQUFNLFdBQVcsQ0FBQztBQUNuQixhQUFhO0FBQ2IsT0FBTyxFQUFFLFNBQVMsRUFBbUMsT0FBTyxFQUFpQixNQUFNLFNBQVMsQ0FBQztBQUs3Rjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxVQUFVLGFBQTZCO0lBQ3BGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7V0FjRztRQUNILGtCQUFrQixFQUFFLEtBQUssRUFDdkIsT0FBdUIsRUFDdkIsZ0JBQXlCLEVBQ3pCLFNBQXlCLEVBQ3pCLFNBQXlCLEVBQ3pCLEtBQXFCLEVBQ3JCLGFBQXNCLEVBQ3RCLGNBQXVCLEVBQ3ZCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4QixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUM7WUFDcEMsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFdBQVcsRUFBRSxHQUFHLE9BQU8s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