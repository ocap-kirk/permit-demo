/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ResourceRolesApi - axios parameter creator
 * @export
 */
export const ResourceRolesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions to Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToResourceRole: async (projId, envId, resourceId, roleId, addRolePermissions, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('assignPermissionsToResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('assignPermissionsToResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('assignPermissionsToResourceRole', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('assignPermissionsToResourceRole', 'roleId', roleId);
            // verify required parameter 'addRolePermissions' is not null or undefined
            assertParamExists('assignPermissionsToResourceRole', 'addRolePermissions', addRolePermissions);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(addRolePermissions, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new role associated with the resource.
         * @summary Create Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleCreate} resourceRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRole: async (projId, envId, resourceId, resourceRoleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('createResourceRole', 'resourceId', resourceId);
            // verify required parameter 'resourceRoleCreate' is not null or undefined
            assertParamExists('createResourceRole', 'resourceRoleCreate', resourceRoleCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceRoleCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRole: async (projId, envId, resourceId, roleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteResourceRole', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteResourceRole', 'roleId', roleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single role defined on the resource, if such role exists.
         * @summary Get Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRole: async (projId, envId, resourceId, roleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getResourceRole', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getResourceRole', 'roleId', roleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the roles defined on the resource.
         * @summary List Resource Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRoles: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listResourceRoles', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listResourceRoles', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('listResourceRoles', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions from Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissionsFromResourceRole: async (projId, envId, resourceId, roleId, removeRolePermissions, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('removePermissionsFromResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('removePermissionsFromResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('removePermissionsFromResourceRole', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removePermissionsFromResourceRole', 'roleId', roleId);
            // verify required parameter 'removeRolePermissions' is not null or undefined
            assertParamExists('removePermissionsFromResourceRole', 'removeRolePermissions', removeRolePermissions);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(removeRolePermissions, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleUpdate} resourceRoleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceRole: async (projId, envId, resourceId, roleId, resourceRoleUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateResourceRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateResourceRole', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateResourceRole', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateResourceRole', 'roleId', roleId);
            // verify required parameter 'resourceRoleUpdate' is not null or undefined
            assertParamExists('updateResourceRole', 'resourceRoleUpdate', resourceRoleUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceRoleUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceRolesApi - functional programming interface
 * @export
 */
export const ResourceRolesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ResourceRolesApiAxiosParamCreator(configuration);
    return {
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions to Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPermissionsToResourceRole(projId, envId, resourceId, roleId, addRolePermissions, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToResourceRole(projId, envId, resourceId, roleId, addRolePermissions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new role associated with the resource.
         * @summary Create Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleCreate} resourceRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceRole(projId, envId, resourceId, resourceRoleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceRole(projId, envId, resourceId, resourceRoleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceRole(projId, envId, resourceId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceRole(projId, envId, resourceId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single role defined on the resource, if such role exists.
         * @summary Get Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceRole(projId, envId, resourceId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceRole(projId, envId, resourceId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the roles defined on the resource.
         * @summary List Resource Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceRoles(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceRoles(projId, envId, resourceId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions from Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePermissionsFromResourceRole(projId, envId, resourceId, roleId, removeRolePermissions, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromResourceRole(projId, envId, resourceId, roleId, removeRolePermissions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleUpdate} resourceRoleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceRole(projId, envId, resourceId, roleId, resourceRoleUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceRole(projId, envId, resourceId, roleId, resourceRoleUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ResourceRolesApi - factory interface
 * @export
 */
export const ResourceRolesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ResourceRolesApiFp(configuration);
    return {
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions to Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToResourceRole(projId, envId, resourceId, roleId, addRolePermissions, options) {
            return localVarFp
                .assignPermissionsToResourceRole(projId, envId, resourceId, roleId, addRolePermissions, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new role associated with the resource.
         * @summary Create Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleCreate} resourceRoleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceRole(projId, envId, resourceId, resourceRoleCreate, options) {
            return localVarFp
                .createResourceRole(projId, envId, resourceId, resourceRoleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceRole(projId, envId, resourceId, roleId, options) {
            return localVarFp
                .deleteResourceRole(projId, envId, resourceId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single role defined on the resource, if such role exists.
         * @summary Get Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceRole(projId, envId, resourceId, roleId, options) {
            return localVarFp
                .getResourceRole(projId, envId, resourceId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the roles defined on the resource.
         * @summary List Resource Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceRoles(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceRoles(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions from Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissionsFromResourceRole(projId, envId, resourceId, roleId, removeRolePermissions, options) {
            return localVarFp
                .removePermissionsFromResourceRole(projId, envId, resourceId, roleId, removeRolePermissions, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {ResourceRoleUpdate} resourceRoleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceRole(projId, envId, resourceId, roleId, resourceRoleUpdate, options) {
            return localVarFp
                .updateResourceRole(projId, envId, resourceId, roleId, resourceRoleUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ResourceRolesApi - object-oriented interface
 * @export
 * @class ResourceRolesApi
 * @extends {BaseAPI}
 */
export class ResourceRolesApi extends BaseAPI {
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions to Role
     * @param {ResourceRolesApiAssignPermissionsToResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    assignPermissionsToResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .assignPermissionsToResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.addRolePermissions, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new role associated with the resource.
     * @summary Create Resource Role
     * @param {ResourceRolesApiCreateResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    createResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .createResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.resourceRoleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Resource Role
     * @param {ResourceRolesApiDeleteResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    deleteResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .deleteResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single role defined on the resource, if such role exists.
     * @summary Get Resource Role
     * @param {ResourceRolesApiGetResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    getResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .getResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the roles defined on the resource.
     * @summary List Resource Roles
     * @param {ResourceRolesApiListResourceRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    listResourceRoles(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .listResourceRoles(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions from Role
     * @param {ResourceRolesApiRemovePermissionsFromResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    removePermissionsFromResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .removePermissionsFromResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.removeRolePermissions, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Role
     * @param {ResourceRolesApiUpdateResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    updateResourceRole(requestParameters, options) {
        return ResourceRolesApiFp(this.configuration)
            .updateResourceRole(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.resourceRoleUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,