/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * PolicySynchronizerAdministrationApi - axios parameter creator
 * @export
 */
export const PolicySynchronizerAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySynchronizerAdministration: async (message, chunkSize, chunkCooldown, options = {}) => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('policySynchronizerAdministration', 'message', message);
            const localVarPath = `/v2/internal_sysadmin/policy-sync/regenerate-environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (chunkSize !== undefined) {
                localVarQueryParameter['chunk_size'] = chunkSize;
            }
            if (chunkCooldown !== undefined) {
                localVarQueryParameter['chunk_cooldown'] = chunkCooldown;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(message, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PolicySynchronizerAdministrationApi - functional programming interface
 * @export
 */
export const PolicySynchronizerAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = PolicySynchronizerAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policySynchronizerAdministration(message, chunkSize, chunkCooldown, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policySynchronizerAdministration(message, chunkSize, chunkCooldown, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * PolicySynchronizerAdministrationApi - factory interface
 * @export
 */
export const PolicySynchronizerAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PolicySynchronizerAdministrationApiFp(configuration);
    return {
        /**
         * Push policy synchronizer update to all environments in the vc organization
         * @summary Regenerate environments
         * @param {Message} message
         * @param {number} [chunkSize] Number of environments to regenerate in a chunk
         * @param {number} [chunkCooldown] Cooldown between chunks in seconds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySynchronizerAdministration(message, chunkSize, chunkCooldown, options) {
            return localVarFp
                .policySynchronizerAdministration(message, chunkSize, chunkCooldown, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * PolicySynchronizerAdministrationApi - object-oriented interface
 * @export
 * @class PolicySynchronizerAdministrationApi
 * @extends {BaseAPI}
 */
export class PolicySynchronizerAdministrationApi extends BaseAPI {
    /**
     * Push policy synchronizer update to all environments in the vc organization
     * @summary Regenerate environments
     * @param {PolicySynchronizerAdministrationApiPolicySynchronizerAdministrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicySynchronizerAdministrationApi
     */
    policySynchronizerAdministration(requestParameters, options) {
        return PolicySynchronizerAdministrationApiFp(this.configuration)
            .policySynchronizerAdministration(requestParameters.message, requestParameters.chunkSize, requestParameters.chunkCooldown, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9saWN5LXN5bmNocm9uaXplci1hZG1pbmlzdHJhdGlvbi1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvcG9saWN5LXN5bmNocm9uaXplci1hZG1pbmlzdHJhdGlvbi1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7Ozs7Ozs7OztHQVVHO0FBRUgsT0FBTyxXQUFnRSxNQUFNLE9BQU8sQ0FBQztBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLE9BQU8sRUFDTCxjQUFjLEVBQ2QsaUJBQWlCLEVBR2pCLHFCQUFxQixFQUVyQixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLFlBQVksRUFDWixxQkFBcUIsR0FDdEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsYUFBYTtBQUNiLE9BQU8sRUFBRSxTQUFTLEVBQW1DLE9BQU8sRUFBaUIsTUFBTSxTQUFTLENBQUM7QUFLN0Y7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0RBQW9ELEdBQUcsVUFDbEUsYUFBNkI7SUFFN0IsT0FBTztRQUNMOzs7Ozs7OztXQVFHO1FBQ0gsZ0NBQWdDLEVBQUUsS0FBSyxFQUNyQyxPQUFnQixFQUNoQixTQUFrQixFQUNsQixhQUFzQixFQUN0QixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4QiwrREFBK0Q7WUFDL0QsaUJBQWlCLENBQUMsa0NBQWtDLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFFLE1BQU0sWUFBWSxHQUFHLDJEQUEyRCxDQUFDO1lBQ2pGLG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFB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