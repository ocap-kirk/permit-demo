/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ResourceActionGroupsApi - axios parameter creator
 * @export
 */
export const ResourceActionGroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceActionGroup: async (projId, envId, resourceId, resourceActionGroupCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('createResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'resourceActionGroupCreate' is not null or undefined
            assertParamExists('createResourceActionGroup', 'resourceActionGroupCreate', resourceActionGroupCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceActionGroupCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceActionGroup: async (projId, envId, resourceId, actionGroupId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            assertParamExists('deleteResourceActionGroup', 'actionGroupId', actionGroupId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceActionGroup: async (projId, envId, resourceId, actionGroupId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            assertParamExists('getResourceActionGroup', 'actionGroupId', actionGroupId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActionGroups: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listResourceActionGroups', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listResourceActionGroups', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('listResourceActionGroups', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceActionGroup: async (resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options = {}) => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateResourceActionGroup', 'resourceId', resourceId);
            // verify required parameter 'actionGroupId' is not null or undefined
            assertParamExists('updateResourceActionGroup', 'actionGroupId', actionGroupId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateResourceActionGroup', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateResourceActionGroup', 'envId', envId);
            // verify required parameter 'resourceActionGroupUpdate' is not null or undefined
            assertParamExists('updateResourceActionGroup', 'resourceActionGroupUpdate', resourceActionGroupUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}`
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_group_id'}}`, encodeURIComponent(String(actionGroupId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceActionGroupUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceActionGroupsApi - functional programming interface
 * @export
 */
export const ResourceActionGroupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ResourceActionGroupsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceActionGroup(projId, envId, resourceId, actionGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceActionGroups(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActionGroups(projId, envId, resourceId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ResourceActionGroupsApi - factory interface
 * @export
 */
export const ResourceActionGroupsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ResourceActionGroupsApiFp(configuration);
    return {
        /**
         * Creates a new action group that can affect the resource.
         * @summary Create Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupCreate} resourceActionGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options) {
            return localVarFp
                .createResourceActionGroup(projId, envId, resourceId, resourceActionGroupCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            return localVarFp
                .deleteResourceActionGroup(projId, envId, resourceId, actionGroupId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single action group defined on the resource, if such action exists.
         * @summary Get Resource Action Group
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceActionGroup(projId, envId, resourceId, actionGroupId, options) {
            return localVarFp
                .getResourceActionGroup(projId, envId, resourceId, actionGroupId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the action groups defined on the resource.
         * @summary List Resource Action Groups
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActionGroups(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceActionGroups(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action Group
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionGroupUpdate} resourceActionGroupUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options) {
            return localVarFp
                .updateResourceActionGroup(resourceId, actionGroupId, projId, envId, resourceActionGroupUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ResourceActionGroupsApi - object-oriented interface
 * @export
 * @class ResourceActionGroupsApi
 * @extends {BaseAPI}
 */
export class ResourceActionGroupsApi extends BaseAPI {
    /**
     * Creates a new action group that can affect the resource.
     * @summary Create Resource Action Group
     * @param {ResourceActionGroupsApiCreateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    createResourceActionGroup(requestParameters, options) {
        return ResourceActionGroupsApiFp(this.configuration)
            .createResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.resourceActionGroupCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action Group
     * @param {ResourceActionGroupsApiDeleteResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    deleteResourceActionGroup(requestParameters, options) {
        return ResourceActionGroupsApiFp(this.configuration)
            .deleteResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionGroupId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single action group defined on the resource, if such action exists.
     * @summary Get Resource Action Group
     * @param {ResourceActionGroupsApiGetResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    getResourceActionGroup(requestParameters, options) {
        return ResourceActionGroupsApiFp(this.configuration)
            .getResourceActionGroup(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionGroupId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the action groups defined on the resource.
     * @summary List Resource Action Groups
     * @param {ResourceActionGroupsApiListResourceActionGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    listResourceActionGroups(requestParameters, options) {
        return ResourceActionGroupsApiFp(this.configuration)
            .listResourceActionGroups(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action Group
     * @param {ResourceActionGroupsApiUpdateResourceActionGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionGroupsApi
     */
    updateResourceActionGroup(requestParameters, options) {
        return ResourceActionGroupsApiFp(this.configuration)
            .updateResourceActionGroup(requestParameters.resourceId, requestParameters.actionGroupId, requestParameters.projId, requestParameters.envId, requestParameters.resourceActionGroupUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,