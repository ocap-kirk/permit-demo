/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * DecisionLogsIngressApi - axios parameter creator
 * @export
 */
export const DecisionLogsIngressApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOpaDecisionLogs: async (requestBody, options = {}) => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('insertOpaDecisionLogs', 'requestBody', requestBody);
            const localVarPath = `/v2/decision-logs/ingress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DecisionLogsIngressApi - functional programming interface
 * @export
 */
export const DecisionLogsIngressApiFp = function (configuration) {
    const localVarAxiosParamCreator = DecisionLogsIngressApiAxiosParamCreator(configuration);
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertOpaDecisionLogs(requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertOpaDecisionLogs(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * DecisionLogsIngressApi - factory interface
 * @export
 */
export const DecisionLogsIngressApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DecisionLogsIngressApiFp(configuration);
    return {
        /**
         * This ingress endpoint captures OPA decision logs.
         * @summary OPA Decision Logs Ingress
         * @param {Array<object>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOpaDecisionLogs(requestBody, options) {
            return localVarFp
                .insertOpaDecisionLogs(requestBody, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DecisionLogsIngressApi - object-oriented interface
 * @export
 * @class DecisionLogsIngressApi
 * @extends {BaseAPI}
 */
export class DecisionLogsIngressApi extends BaseAPI {
    /**
     * This ingress endpoint captures OPA decision logs.
     * @summary OPA Decision Logs Ingress
     * @param {DecisionLogsIngressApiInsertOpaDecisionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionLogsIngressApi
     */
    insertOpaDecisionLogs(requestParameters, options) {
        return DecisionLogsIngressApiFp(this.configuration)
            .insertOpaDecisionLogs(requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaXNpb24tbG9ncy1pbmdyZXNzLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9kZWNpc2lvbi1sb2dzLWluZ3Jlc3MtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7Ozs7Ozs7Ozs7R0FVRztBQUVILE9BQU8sV0FBZ0UsTUFBTSxPQUFPLENBQUM7QUFFckYseURBQXlEO0FBQ3pELGFBQWE7QUFDYixPQUFPLEVBQ0wsY0FBYyxFQUNkLGlCQUFpQixFQUdqQixxQkFBcUIsRUFFckIsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixZQUFZLEVBQ1oscUJBQXFCLEdBQ3RCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLGFBQWE7QUFDYixPQUFPLEVBQUUsU0FBUyxFQUFtQyxPQUFPLEVBQWlCLE1BQU0sU0FBUyxDQUFDO0FBRzdGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUFHLFVBQVUsYUFBNkI7SUFDNUYsT0FBTztRQUNMOzs7Ozs7V0FNRztRQUNILHFCQUFxQixFQUFFLEtBQUssRUFDMUIsV0FBMEIsRUFDMUIsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsbUVBQW1FO1lBQ25FLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUN2RSxNQUFNLFlBQVksR0FBRywyQkFBMkIsQ0FBQztZQUNqRCxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsV0FBVyxFQUFF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