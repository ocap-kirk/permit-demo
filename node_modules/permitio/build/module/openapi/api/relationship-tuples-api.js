/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RelationshipTuplesApi - axios parameter creator
 * @export
 */
export const RelationshipTuplesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a relationship between two resource instances using a relation.
         * @summary Create Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleCreate} relationshipTupleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipTuple: async (projId, envId, relationshipTupleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createRelationshipTuple', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createRelationshipTuple', 'envId', envId);
            // verify required parameter 'relationshipTupleCreate' is not null or undefined
            assertParamExists('createRelationshipTuple', 'relationshipTupleCreate', relationshipTupleCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(relationshipTupleCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a relationship between two resource instances.
         * @summary Delete Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleDelete} relationshipTupleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationshipTuple: async (projId, envId, relationshipTupleDelete, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteRelationshipTuple', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteRelationshipTuple', 'envId', envId);
            // verify required parameter 'relationshipTupleDelete' is not null or undefined
            assertParamExists('deleteRelationshipTuple', 'relationshipTupleDelete', relationshipTupleDelete);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(relationshipTupleDelete, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the relationship tuples defined within an environment.
         * @summary List Relationship Tuples
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {string} [relation] The relation id or key to filter by
         * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipTuples: async (projId, envId, page, perPage, tenant, subject, relation, object, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listRelationshipTuples', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listRelationshipTuples', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/relationship_tuples`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }
            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }
            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RelationshipTuplesApi - functional programming interface
 * @export
 */
export const RelationshipTuplesApiFp = function (configuration) {
    const localVarAxiosParamCreator = RelationshipTuplesApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a relationship between two resource instances using a relation.
         * @summary Create Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleCreate} relationshipTupleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelationshipTuple(projId, envId, relationshipTupleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationshipTuple(projId, envId, relationshipTupleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a relationship between two resource instances.
         * @summary Delete Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleDelete} relationshipTupleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the relationship tuples defined within an environment.
         * @summary List Relationship Tuples
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {string} [relation] The relation id or key to filter by
         * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipTuples(projId, envId, page, perPage, tenant, subject, relation, object, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipTuples(projId, envId, page, perPage, tenant, subject, relation, object, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * RelationshipTuplesApi - factory interface
 * @export
 */
export const RelationshipTuplesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RelationshipTuplesApiFp(configuration);
    return {
        /**
         * Create a relationship between two resource instances using a relation.
         * @summary Create Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleCreate} relationshipTupleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipTuple(projId, envId, relationshipTupleCreate, options) {
            return localVarFp
                .createRelationshipTuple(projId, envId, relationshipTupleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete a relationship between two resource instances.
         * @summary Delete Relationship Tuple
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RelationshipTupleDelete} relationshipTupleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options) {
            return localVarFp
                .deleteRelationshipTuple(projId, envId, relationshipTupleDelete, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists the relationship tuples defined within an environment.
         * @summary List Relationship Tuples
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [subject] The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {string} [relation] The relation id or key to filter by
         * @param {string} [object] The object to filter by, accepts either the resource instance id or resource_type:resource_instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipTuples(projId, envId, page, perPage, tenant, subject, relation, object, options) {
            return localVarFp
                .listRelationshipTuples(projId, envId, page, perPage, tenant, subject, relation, object, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * RelationshipTuplesApi - object-oriented interface
 * @export
 * @class RelationshipTuplesApi
 * @extends {BaseAPI}
 */
export class RelationshipTuplesApi extends BaseAPI {
    /**
     * Create a relationship between two resource instances using a relation.
     * @summary Create Relationship Tuple
     * @param {RelationshipTuplesApiCreateRelationshipTupleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipTuplesApi
     */
    createRelationshipTuple(requestParameters, options) {
        return RelationshipTuplesApiFp(this.configuration)
            .createRelationshipTuple(requestParameters.projId, requestParameters.envId, requestParameters.relationshipTupleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a relationship between two resource instances.
     * @summary Delete Relationship Tuple
     * @param {RelationshipTuplesApiDeleteRelationshipTupleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipTuplesApi
     */
    deleteRelationshipTuple(requestParameters, options) {
        return RelationshipTuplesApiFp(this.configuration)
            .deleteRelationshipTuple(requestParameters.projId, requestParameters.envId, requestParameters.relationshipTupleDelete, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the relationship tuples defined within an environment.
     * @summary List Relationship Tuples
     * @param {RelationshipTuplesApiListRelationshipTuplesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipTuplesApi
     */
    listRelationshipTuples(requestParameters, options) {
        return RelationshipTuplesApiFp(this.configuration)
            .listRelationshipTuples(requestParameters.projId, requestParameters.envId, requestParameters.page, requestParameters.perPage, requestParameters.tenant, requestParameters.subject, requestParameters.relation, requestParameters.object, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,