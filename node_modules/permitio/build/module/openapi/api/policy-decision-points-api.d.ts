/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DataUpdateReport } from '../types';
import { PDPConfigRead } from '../types';
import { PDPStateUpdate } from '../types';
import { RemoteConfig } from '../types';
/**
 * PolicyDecisionPointsApi - axios parameter creator
 * @export
 */
export declare const PolicyDecisionPointsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValues: (pDPStateUpdate: PDPStateUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValuesLegacy: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdpConfigValues: (projId: string, envId: string, pdpId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpConfigs: (projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    opalDataCallback: (xPermitInstanceId: string, dataUpdateReport: DataUpdateReport, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushPdpState: (pDPStateUpdate: PDPStateUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotatePdpApiKey: (projId: string, envId: string, pdpId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PolicyDecisionPointsApi - functional programming interface
 * @export
 */
export declare const PolicyDecisionPointsApiFp: (configuration?: Configuration) => {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValues(pDPStateUpdate: PDPStateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>>;
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValuesLegacy(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>>;
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdpConfigValues(projId: string, envId: string, pdpId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteConfig>>;
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PDPConfigRead>>>;
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    opalDataCallback(xPermitInstanceId: string, dataUpdateReport: DataUpdateReport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushPdpState(pDPStateUpdate: PDPStateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotatePdpApiKey(projId: string, envId: string, pdpId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PDPConfigRead>>;
};
/**
 * PolicyDecisionPointsApi - factory interface
 * @export
 */
export declare const PolicyDecisionPointsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValues(pDPStateUpdate: PDPStateUpdate, options?: any): AxiosPromise<RemoteConfig>;
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatingPdpConfigValuesLegacy(options?: any): AxiosPromise<RemoteConfig>;
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdpConfigValues(projId: string, envId: string, pdpId: string, options?: any): AxiosPromise<RemoteConfig>;
    /**
     *
     * @summary List PDP configurations
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPdpConfigs(projId: string, envId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<PDPConfigRead>>;
    /**
     *
     * @summary Accept a PDP data callback
     * @param {string} xPermitInstanceId
     * @param {DataUpdateReport} dataUpdateReport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    opalDataCallback(xPermitInstanceId: string, dataUpdateReport: DataUpdateReport, options?: any): AxiosPromise<void>;
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PDPStateUpdate} pDPStateUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushPdpState(pDPStateUpdate: PDPStateUpdate, options?: any): AxiosPromise<void>;
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} pdpId The unique id of the pdp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotatePdpApiKey(projId: string, envId: string, pdpId: string, options?: any): AxiosPromise<PDPConfigRead>;
};
/**
 * Request parameters for getAuthenticatingPdpConfigValues operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest
 */
export interface PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest {
    /**
     *
     * @type {PDPStateUpdate}
     * @memberof PolicyDecisionPointsApiGetAuthenticatingPdpConfigValues
     */
    readonly pDPStateUpdate: PDPStateUpdate;
}
/**
 * Request parameters for getPdpConfigValues operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiGetPdpConfigValuesRequest
 */
export interface PolicyDecisionPointsApiGetPdpConfigValuesRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiGetPdpConfigValues
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiGetPdpConfigValues
     */
    readonly envId: string;
    /**
     * The unique id of the pdp
     * @type {string}
     * @memberof PolicyDecisionPointsApiGetPdpConfigValues
     */
    readonly pdpId: string;
}
/**
 * Request parameters for listPdpConfigs operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiListPdpConfigsRequest
 */
export interface PolicyDecisionPointsApiListPdpConfigsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiListPdpConfigs
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiListPdpConfigs
     */
    readonly envId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof PolicyDecisionPointsApiListPdpConfigs
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof PolicyDecisionPointsApiListPdpConfigs
     */
    readonly perPage?: number;
}
/**
 * Request parameters for opalDataCallback operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiOpalDataCallbackRequest
 */
export interface PolicyDecisionPointsApiOpalDataCallbackRequest {
    /**
     *
     * @type {string}
     * @memberof PolicyDecisionPointsApiOpalDataCallback
     */
    readonly xPermitInstanceId: string;
    /**
     *
     * @type {DataUpdateReport}
     * @memberof PolicyDecisionPointsApiOpalDataCallback
     */
    readonly dataUpdateReport: DataUpdateReport;
}
/**
 * Request parameters for pushPdpState operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiPushPdpStateRequest
 */
export interface PolicyDecisionPointsApiPushPdpStateRequest {
    /**
     *
     * @type {PDPStateUpdate}
     * @memberof PolicyDecisionPointsApiPushPdpState
     */
    readonly pDPStateUpdate: PDPStateUpdate;
}
/**
 * Request parameters for rotatePdpApiKey operation in PolicyDecisionPointsApi.
 * @export
 * @interface PolicyDecisionPointsApiRotatePdpApiKeyRequest
 */
export interface PolicyDecisionPointsApiRotatePdpApiKeyRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiRotatePdpApiKey
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof PolicyDecisionPointsApiRotatePdpApiKey
     */
    readonly envId: string;
    /**
     * The unique id of the pdp
     * @type {string}
     * @memberof PolicyDecisionPointsApiRotatePdpApiKey
     */
    readonly pdpId: string;
}
/**
 * PolicyDecisionPointsApi - object-oriented interface
 * @export
 * @class PolicyDecisionPointsApi
 * @extends {BaseAPI}
 */
export declare class PolicyDecisionPointsApi extends BaseAPI {
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration and push state
     * @param {PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getAuthenticatingPdpConfigValues(requestParameters: PolicyDecisionPointsApiGetAuthenticatingPdpConfigValuesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RemoteConfig, any>>;
    /**
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get connected PDP configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getAuthenticatingPdpConfigValuesLegacy(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RemoteConfig, any>>;
    /**
     * Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
     * @summary Get PDP configuration
     * @param {PolicyDecisionPointsApiGetPdpConfigValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    getPdpConfigValues(requestParameters: PolicyDecisionPointsApiGetPdpConfigValuesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RemoteConfig, any>>;
    /**
     *
     * @summary List PDP configurations
     * @param {PolicyDecisionPointsApiListPdpConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    listPdpConfigs(requestParameters: PolicyDecisionPointsApiListPdpConfigsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PDPConfigRead[], any>>;
    /**
     *
     * @summary Accept a PDP data callback
     * @param {PolicyDecisionPointsApiOpalDataCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    opalDataCallback(requestParameters: PolicyDecisionPointsApiOpalDataCallbackRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Push a PDP state update.
     * @summary Push PDP state
     * @param {PolicyDecisionPointsApiPushPdpStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    pushPdpState(requestParameters: PolicyDecisionPointsApiPushPdpStateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @summary Rotate PDP API Key
     * @param {PolicyDecisionPointsApiRotatePdpApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyDecisionPointsApi
     */
    rotatePdpApiKey(requestParameters: PolicyDecisionPointsApiRotatePdpApiKeyRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PDPConfigRead, any>>;
}
