/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ImplicitGrantsApi - axios parameter creator
 * @export
 */
export const ImplicitGrantsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImplicitGrant: async (projId, envId, resourceId, roleId, derivedRoleRuleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createImplicitGrant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createImplicitGrant', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('createImplicitGrant', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('createImplicitGrant', 'roleId', roleId);
            // verify required parameter 'derivedRoleRuleCreate' is not null or undefined
            assertParamExists('createImplicitGrant', 'derivedRoleRuleCreate', derivedRoleRuleCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(derivedRoleRuleCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImplicitGrant: async (projId, envId, roleId, resourceId, derivedRoleRuleDelete, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteImplicitGrant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteImplicitGrant', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteImplicitGrant', 'roleId', roleId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteImplicitGrant', 'resourceId', resourceId);
            // verify required parameter 'derivedRoleRuleDelete' is not null or undefined
            assertParamExists('deleteImplicitGrant', 'derivedRoleRuleDelete', derivedRoleRuleDelete);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(derivedRoleRuleDelete, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImplicitGrantsConditions: async (projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateImplicitGrantsConditions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateImplicitGrantsConditions', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateImplicitGrantsConditions', 'resourceId', resourceId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateImplicitGrantsConditions', 'roleId', roleId);
            // verify required parameter 'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings' is not null or undefined
            assertParamExists('updateImplicitGrantsConditions', 'permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings', permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ImplicitGrantsApi - functional programming interface
 * @export
 */
export const ImplicitGrantsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ImplicitGrantsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ImplicitGrantsApi - factory interface
 * @export
 */
export const ImplicitGrantsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ImplicitGrantsApiFp(configuration);
    return {
        /**
         * Creates an implicit grant on a given role
         * @summary Create Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options) {
            return localVarFp
                .createImplicitGrant(projId, envId, resourceId, roleId, derivedRoleRuleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes an implicit grant on a given role
         * @summary Delete Implicit Grant
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options) {
            return localVarFp
                .deleteImplicitGrant(projId, envId, roleId, resourceId, derivedRoleRuleDelete, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Update the `when` for implicit grants on a given role
         * @summary Update Implicit Grants Conditions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options) {
            return localVarFp
                .updateImplicitGrantsConditions(projId, envId, resourceId, roleId, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ImplicitGrantsApi - object-oriented interface
 * @export
 * @class ImplicitGrantsApi
 * @extends {BaseAPI}
 */
export class ImplicitGrantsApi extends BaseAPI {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {ImplicitGrantsApiCreateImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    createImplicitGrant(requestParameters, options) {
        return ImplicitGrantsApiFp(this.configuration)
            .createImplicitGrant(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.derivedRoleRuleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {ImplicitGrantsApiDeleteImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    deleteImplicitGrant(requestParameters, options) {
        return ImplicitGrantsApiFp(this.configuration)
            .deleteImplicitGrant(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.resourceId, requestParameters.derivedRoleRuleDelete, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    updateImplicitGrantsConditions(requestParameters, options) {
        return ImplicitGrantsApiFp(this.configuration)
            .updateImplicitGrantsConditions(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.roleId, requestParameters.permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,