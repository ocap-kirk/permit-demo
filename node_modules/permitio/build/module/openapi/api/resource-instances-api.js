/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ResourceInstancesApi - axios parameter creator
 * @export
 */
export const ResourceInstancesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
         * @summary Create Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreate} resourceInstanceCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceInstance: async (projId, envId, resourceInstanceCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createResourceInstance', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createResourceInstance', 'envId', envId);
            // verify required parameter 'resourceInstanceCreate' is not null or undefined
            assertParamExists('createResourceInstance', 'resourceInstanceCreate', resourceInstanceCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInstanceCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the instance and all its related data.
         * @summary Delete Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceInstance: async (projId, envId, instanceId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteResourceInstance', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteResourceInstance', 'envId', envId);
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('deleteResourceInstance', 'instanceId', instanceId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a instance, if such instance exists. Otherwise returns 404.
         * @summary Get Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceInstance: async (projId, envId, instanceId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getResourceInstance', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getResourceInstance', 'envId', envId);
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('getResourceInstance', 'instanceId', instanceId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the resource instances defined within an environment.
         * @summary List Resource Instances
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [resource] The resource key or id to filter by
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceInstances: async (projId, envId, tenant, resource, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listResourceInstances', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listResourceInstances', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceUpdate} resourceInstanceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceInstance: async (projId, envId, instanceId, resourceInstanceUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateResourceInstance', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateResourceInstance', 'envId', envId);
            // verify required parameter 'instanceId' is not null or undefined
            assertParamExists('updateResourceInstance', 'instanceId', instanceId);
            // verify required parameter 'resourceInstanceUpdate' is not null or undefined
            assertParamExists('updateResourceInstance', 'resourceInstanceUpdate', resourceInstanceUpdate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'instance_id'}}`, encodeURIComponent(String(instanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInstanceUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceInstancesApi - functional programming interface
 * @export
 */
export const ResourceInstancesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ResourceInstancesApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
         * @summary Create Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreate} resourceInstanceCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceInstance(projId, envId, resourceInstanceCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceInstance(projId, envId, resourceInstanceCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the instance and all its related data.
         * @summary Delete Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceInstance(projId, envId, instanceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceInstance(projId, envId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a instance, if such instance exists. Otherwise returns 404.
         * @summary Get Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceInstance(projId, envId, instanceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceInstance(projId, envId, instanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the resource instances defined within an environment.
         * @summary List Resource Instances
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [resource] The resource key or id to filter by
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceInstances(projId, envId, tenant, resource, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceInstances(projId, envId, tenant, resource, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceUpdate} resourceInstanceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ResourceInstancesApi - factory interface
 * @export
 */
export const ResourceInstancesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ResourceInstancesApiFp(configuration);
    return {
        /**
         * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
         * @summary Create Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreate} resourceInstanceCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceInstance(projId, envId, resourceInstanceCreate, options) {
            return localVarFp
                .createResourceInstance(projId, envId, resourceInstanceCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the instance and all its related data.
         * @summary Delete Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceInstance(projId, envId, instanceId, options) {
            return localVarFp
                .deleteResourceInstance(projId, envId, instanceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a instance, if such instance exists. Otherwise returns 404.
         * @summary Get Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceInstance(projId, envId, instanceId, options) {
            return localVarFp
                .getResourceInstance(projId, envId, instanceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the resource instances defined within an environment.
         * @summary List Resource Instances
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [tenant] The tenant key or id to filter by
         * @param {string} [resource] The resource key or id to filter by
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceInstances(projId, envId, tenant, resource, page, perPage, options) {
            return localVarFp
                .listResourceInstances(projId, envId, tenant, resource, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Instance
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} instanceId Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceUpdate} resourceInstanceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options) {
            return localVarFp
                .updateResourceInstance(projId, envId, instanceId, resourceInstanceUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ResourceInstancesApi - object-oriented interface
 * @export
 * @class ResourceInstancesApi
 * @extends {BaseAPI}
 */
export class ResourceInstancesApi extends BaseAPI {
    /**
     * Creates a new instance inside the Permit.io system.  If the instance is already created: will return 200 instead of 201, and will return the existing instance object in the response body.
     * @summary Create Resource Instance
     * @param {ResourceInstancesApiCreateResourceInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceInstancesApi
     */
    createResourceInstance(requestParameters, options) {
        return ResourceInstancesApiFp(this.configuration)
            .createResourceInstance(requestParameters.projId, requestParameters.envId, requestParameters.resourceInstanceCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the instance and all its related data.
     * @summary Delete Resource Instance
     * @param {ResourceInstancesApiDeleteResourceInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceInstancesApi
     */
    deleteResourceInstance(requestParameters, options) {
        return ResourceInstancesApiFp(this.configuration)
            .deleteResourceInstance(requestParameters.projId, requestParameters.envId, requestParameters.instanceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a instance, if such instance exists. Otherwise returns 404.
     * @summary Get Resource Instance
     * @param {ResourceInstancesApiGetResourceInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceInstancesApi
     */
    getResourceInstance(requestParameters, options) {
        return ResourceInstancesApiFp(this.configuration)
            .getResourceInstance(requestParameters.projId, requestParameters.envId, requestParameters.instanceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the resource instances defined within an environment.
     * @summary List Resource Instances
     * @param {ResourceInstancesApiListResourceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceInstancesApi
     */
    listResourceInstances(requestParameters, options) {
        return ResourceInstancesApiFp(this.configuration)
            .listResourceInstances(requestParameters.projId, requestParameters.envId, requestParameters.tenant, requestParameters.resource, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the instance definition. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Instance
     * @param {ResourceInstancesApiUpdateResourceInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceInstancesApi
     */
    updateResourceInstance(requestParameters, options) {
        return ResourceInstancesApiFp(this.configuration)
            .updateResourceInstance(requestParameters.projId, requestParameters.envId, requestParameters.instanceId, requestParameters.resourceInstanceUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,