/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * DecisionLogsApi - axios parameter creator
 * @export
 */
export const DecisionLogsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpDecisionLogs: async (projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listPdpDecisionLogs', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listPdpDecisionLogs', 'envId', envId);
            // verify required parameter 'pdpId' is not null or undefined
            assertParamExists('listPdpDecisionLogs', 'pdpId', pdpId);
            const localVarPath = `/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'pdp_id'}}`, encodeURIComponent(String(pdpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (users) {
                localVarQueryParameter['users'] = users;
            }
            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }
            if (resources) {
                localVarQueryParameter['resources'] = resources;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampTo !== undefined) {
                localVarQueryParameter['timestamp_to'] = timestampTo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DecisionLogsApi - functional programming interface
 * @export
 */
export const DecisionLogsApiFp = function (configuration) {
    const localVarAxiosParamCreator = DecisionLogsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * DecisionLogsApi - factory interface
 * @export
 */
export const DecisionLogsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DecisionLogsApiFp(configuration);
    return {
        /**
         *
         * @summary List PDP Decisions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} pdpId The unique id of the pdp
         * @param {Array<string>} [users] List of user IDs to filter by
         * @param {boolean} [approved] Filter by approved decisions
         * @param {Array<string>} [resources] Filter by resources
         * @param {number} [timestampFrom] Filter by timestamp from
         * @param {number} [timestampTo] Filter by timestamp to
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options) {
            return localVarFp
                .listPdpDecisionLogs(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DecisionLogsApi - object-oriented interface
 * @export
 * @class DecisionLogsApi
 * @extends {BaseAPI}
 */
export class DecisionLogsApi extends BaseAPI {
    /**
     *
     * @summary List PDP Decisions
     * @param {DecisionLogsApiListPdpDecisionLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecisionLogsApi
     */
    listPdpDecisionLogs(requestParameters, options) {
        return DecisionLogsApiFp(this.configuration)
            .listPdpDecisionLogs(requestParameters.projId, requestParameters.envId, requestParameters.pdpId, requestParameters.users, requestParameters.approved, requestParameters.resources, requestParameters.timestampFrom, requestParameters.timestampTo, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaXNpb24tbG9ncy1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvb3BlbmFwaS9hcGkvZGVjaXNpb24tbG9ncy1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7Ozs7Ozs7OztHQVVHO0FBRUgsT0FBTyxXQUFnRSxNQUFNLE9BQU8sQ0FBQztBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLE9BQU8sRUFDTCxjQUFjLEVBQ2QsaUJBQWlCLEVBR2pCLHFCQUFxQixFQUVyQixlQUFlLEVBRWYsWUFBWSxFQUNaLHFCQUFxQixHQUN0QixNQUFNLFdBQVcsQ0FBQztBQUNuQixhQUFhO0FBQ2IsT0FBTyxFQUFFLFNBQVMsRUFBbUMsT0FBTyxFQUFpQixNQUFNLFNBQVMsQ0FBQztBQUs3Rjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxVQUFVLGFBQTZCO0lBQ3JGLE9BQU87UUFDTDs7Ozs7Ozs7Ozs7Ozs7O1dBZUc7UUFDSCxtQkFBbUIsRUFBRSxLQUFLLEVBQ3hCLE1BQWMsRUFDZCxLQUFhLEVBQ2IsS0FBYSxFQUNiLEtBQXFCLEVBQ3JCLFFBQWtCLEVBQ2xCLFNBQXlCLEVBQ3pCLGFBQXNCLEVBQ3RCLFdBQW9CLEVBQ3BCLElBQWEsRUFDYixPQUFnQixFQUNoQixVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNELDZEQUE2RDtZQUM3RCxpQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDekQsNkRBQTZEO1lBQzdELGlCQUFpQixDQUFDLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN6RCxNQUFNLFlBQVksR0FBRyxvREFBb0Q7aUJBQ3RFLE9B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