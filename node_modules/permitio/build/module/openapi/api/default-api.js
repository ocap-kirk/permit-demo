/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummy: async (options = {}) => {
            const localVarPath = `/v2/stress/dummy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Dummy Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyDb: async (options = {}) => {
            const localVarPath = `/v2/stress/db/dummy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationV2StressDbOrganizationGet: async (options = {}) => {
            const localVarPath = `/v2/stress/db/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Organization With Authn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationWithAuthn: async (options = {}) => {
            const localVarPath = `/v2/stress/db/organization_auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Organization With Authz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationWithAuthz: async (options = {}) => {
            const localVarPath = `/v2/stress/db/organization_authz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dummy(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dummy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Dummy Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dummyDb(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dummyDb(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationV2StressDbOrganizationGet(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationV2StressDbOrganizationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Organization With Authn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationWithAuthn(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthn(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Organization With Authz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationWithAuthz(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationWithAuthz(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DefaultApiFp(configuration);
    return {
        /**
         *
         * @summary Dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummy(options) {
            return localVarFp.dummy(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Dummy Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyDb(options) {
            return localVarFp.dummyDb(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationV2StressDbOrganizationGet(options) {
            return localVarFp
                .getOrganizationV2StressDbOrganizationGet(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Organization With Authn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationWithAuthn(options) {
            return localVarFp
                .getOrganizationWithAuthn(options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Organization With Authz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationWithAuthz(options) {
            return localVarFp
                .getOrganizationWithAuthz(options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Dummy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    dummy(options) {
        return DefaultApiFp(this.configuration)
            .dummy(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Dummy Db
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    dummyDb(options) {
        return DefaultApiFp(this.configuration)
            .dummyDb(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrganizationV2StressDbOrganizationGet(options) {
        return DefaultApiFp(this.configuration)
            .getOrganizationV2StressDbOrganizationGet(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Organization With Authn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrganizationWithAuthn(options) {
        return DefaultApiFp(this.configuration)
            .getOrganizationWithAuthn(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Organization With Authz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrganizationWithAuthz(options) {
        return DefaultApiFp(this.configuration)
            .getOrganizationWithAuthz(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,