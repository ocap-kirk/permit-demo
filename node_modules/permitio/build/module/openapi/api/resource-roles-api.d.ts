/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddRolePermissions } from '../types';
import { RemoveRolePermissions } from '../types';
import { ResourceRoleCreate } from '../types';
import { ResourceRoleRead } from '../types';
import { ResourceRoleUpdate } from '../types';
/**
 * ResourceRolesApi - axios parameter creator
 * @export
 */
export declare const ResourceRolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions to Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignPermissionsToResourceRole: (projId: string, envId: string, resourceId: string, roleId: string, addRolePermissions: AddRolePermissions, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new role associated with the resource.
     * @summary Create Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleCreate} resourceRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceRole: (projId: string, envId: string, resourceId: string, resourceRoleCreate: ResourceRoleCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceRole: (projId: string, envId: string, resourceId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a single role defined on the resource, if such role exists.
     * @summary Get Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceRole: (projId: string, envId: string, resourceId: string, roleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all the roles defined on the resource.
     * @summary List Resource Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceRoles: (projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions from Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermissionsFromResourceRole: (projId: string, envId: string, resourceId: string, roleId: string, removeRolePermissions: RemoveRolePermissions, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleUpdate} resourceRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceRole: (projId: string, envId: string, resourceId: string, roleId: string, resourceRoleUpdate: ResourceRoleUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ResourceRolesApi - functional programming interface
 * @export
 */
export declare const ResourceRolesApiFp: (configuration?: Configuration) => {
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions to Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignPermissionsToResourceRole(projId: string, envId: string, resourceId: string, roleId: string, addRolePermissions: AddRolePermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>>;
    /**
     * Creates a new role associated with the resource.
     * @summary Create Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleCreate} resourceRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceRole(projId: string, envId: string, resourceId: string, resourceRoleCreate: ResourceRoleCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>>;
    /**
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceRole(projId: string, envId: string, resourceId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a single role defined on the resource, if such role exists.
     * @summary Get Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceRole(projId: string, envId: string, resourceId: string, roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>>;
    /**
     * Lists all the roles defined on the resource.
     * @summary List Resource Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceRoles(projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceRoleRead>>>;
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions from Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermissionsFromResourceRole(projId: string, envId: string, resourceId: string, roleId: string, removeRolePermissions: RemoveRolePermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>>;
    /**
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleUpdate} resourceRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceRole(projId: string, envId: string, resourceId: string, roleId: string, resourceRoleUpdate: ResourceRoleUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRoleRead>>;
};
/**
 * ResourceRolesApi - factory interface
 * @export
 */
export declare const ResourceRolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions to Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {AddRolePermissions} addRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignPermissionsToResourceRole(projId: string, envId: string, resourceId: string, roleId: string, addRolePermissions: AddRolePermissions, options?: any): AxiosPromise<ResourceRoleRead>;
    /**
     * Creates a new role associated with the resource.
     * @summary Create Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleCreate} resourceRoleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResourceRole(projId: string, envId: string, resourceId: string, resourceRoleCreate: ResourceRoleCreate, options?: any): AxiosPromise<ResourceRoleRead>;
    /**
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResourceRole(projId: string, envId: string, resourceId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a single role defined on the resource, if such role exists.
     * @summary Get Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResourceRole(projId: string, envId: string, resourceId: string, roleId: string, options?: any): AxiosPromise<ResourceRoleRead>;
    /**
     * Lists all the roles defined on the resource.
     * @summary List Resource Roles
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResourceRoles(projId: string, envId: string, resourceId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<ResourceRoleRead>>;
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions from Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {RemoveRolePermissions} removeRolePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePermissionsFromResourceRole(projId: string, envId: string, resourceId: string, roleId: string, removeRolePermissions: RemoveRolePermissions, options?: any): AxiosPromise<ResourceRoleRead>;
    /**
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Role
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {ResourceRoleUpdate} resourceRoleUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResourceRole(projId: string, envId: string, resourceId: string, roleId: string, resourceRoleUpdate: ResourceRoleUpdate, options?: any): AxiosPromise<ResourceRoleRead>;
};
/**
 * Request parameters for assignPermissionsToResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiAssignPermissionsToResourceRoleRequest
 */
export interface ResourceRolesApiAssignPermissionsToResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiAssignPermissionsToResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiAssignPermissionsToResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiAssignPermissionsToResourceRole
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiAssignPermissionsToResourceRole
     */
    readonly roleId: string;
    /**
     *
     * @type {AddRolePermissions}
     * @memberof ResourceRolesApiAssignPermissionsToResourceRole
     */
    readonly addRolePermissions: AddRolePermissions;
}
/**
 * Request parameters for createResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiCreateResourceRoleRequest
 */
export interface ResourceRolesApiCreateResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiCreateResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiCreateResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiCreateResourceRole
     */
    readonly resourceId: string;
    /**
     *
     * @type {ResourceRoleCreate}
     * @memberof ResourceRolesApiCreateResourceRole
     */
    readonly resourceRoleCreate: ResourceRoleCreate;
}
/**
 * Request parameters for deleteResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiDeleteResourceRoleRequest
 */
export interface ResourceRolesApiDeleteResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiDeleteResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiDeleteResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiDeleteResourceRole
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiDeleteResourceRole
     */
    readonly roleId: string;
}
/**
 * Request parameters for getResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiGetResourceRoleRequest
 */
export interface ResourceRolesApiGetResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiGetResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiGetResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiGetResourceRole
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiGetResourceRole
     */
    readonly roleId: string;
}
/**
 * Request parameters for listResourceRoles operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiListResourceRolesRequest
 */
export interface ResourceRolesApiListResourceRolesRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiListResourceRoles
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiListResourceRoles
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiListResourceRoles
     */
    readonly resourceId: string;
    /**
     * Page number of the results to fetch, starting at 1.
     * @type {number}
     * @memberof ResourceRolesApiListResourceRoles
     */
    readonly page?: number;
    /**
     * The number of results per page (max 100).
     * @type {number}
     * @memberof ResourceRolesApiListResourceRoles
     */
    readonly perPage?: number;
}
/**
 * Request parameters for removePermissionsFromResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiRemovePermissionsFromResourceRoleRequest
 */
export interface ResourceRolesApiRemovePermissionsFromResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiRemovePermissionsFromResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiRemovePermissionsFromResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiRemovePermissionsFromResourceRole
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiRemovePermissionsFromResourceRole
     */
    readonly roleId: string;
    /**
     *
     * @type {RemoveRolePermissions}
     * @memberof ResourceRolesApiRemovePermissionsFromResourceRole
     */
    readonly removeRolePermissions: RemoveRolePermissions;
}
/**
 * Request parameters for updateResourceRole operation in ResourceRolesApi.
 * @export
 * @interface ResourceRolesApiUpdateResourceRoleRequest
 */
export interface ResourceRolesApiUpdateResourceRoleRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiUpdateResourceRole
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiUpdateResourceRole
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiUpdateResourceRole
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ResourceRolesApiUpdateResourceRole
     */
    readonly roleId: string;
    /**
     *
     * @type {ResourceRoleUpdate}
     * @memberof ResourceRolesApiUpdateResourceRole
     */
    readonly resourceRoleUpdate: ResourceRoleUpdate;
}
/**
 * ResourceRolesApi - object-oriented interface
 * @export
 * @class ResourceRolesApi
 * @extends {BaseAPI}
 */
export declare class ResourceRolesApi extends BaseAPI {
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions to Role
     * @param {ResourceRolesApiAssignPermissionsToResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    assignPermissionsToResourceRole(requestParameters: ResourceRolesApiAssignPermissionsToResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead, any>>;
    /**
     * Creates a new role associated with the resource.
     * @summary Create Resource Role
     * @param {ResourceRolesApiCreateResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    createResourceRole(requestParameters: ResourceRolesApiCreateResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead, any>>;
    /**
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Resource Role
     * @param {ResourceRolesApiDeleteResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    deleteResourceRole(requestParameters: ResourceRolesApiDeleteResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a single role defined on the resource, if such role exists.
     * @summary Get Resource Role
     * @param {ResourceRolesApiGetResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    getResourceRole(requestParameters: ResourceRolesApiGetResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead, any>>;
    /**
     * Lists all the roles defined on the resource.
     * @summary List Resource Roles
     * @param {ResourceRolesApiListResourceRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    listResourceRoles(requestParameters: ResourceRolesApiListResourceRolesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead[], any>>;
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions from Role
     * @param {ResourceRolesApiRemovePermissionsFromResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    removePermissionsFromResourceRole(requestParameters: ResourceRolesApiRemovePermissionsFromResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead, any>>;
    /**
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Role
     * @param {ResourceRolesApiUpdateResourceRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceRolesApi
     */
    updateResourceRole(requestParameters: ResourceRolesApiUpdateResourceRoleRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceRoleRead, any>>;
}
