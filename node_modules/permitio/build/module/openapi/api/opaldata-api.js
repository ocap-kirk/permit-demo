/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * OPALDataApi - axios parameter creator
 * @export
 */
export const OPALDataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllData: async (orgId, projId, envId, internalUpdateCache, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getAllData', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getAllData', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getAllData', 'envId', envId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (internalUpdateCache !== undefined) {
                localVarQueryParameter['__internal_update_cache'] = internalUpdateCache;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForConditionSet: async (orgId, projId, envId, conditionSetId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForConditionSet', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForConditionSet', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForConditionSet', 'envId', envId);
            // verify required parameter 'conditionSetId' is not null or undefined
            assertParamExists('getDataForConditionSet', 'conditionSetId', conditionSetId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_sets/{condition_set_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'condition_set_id'}}`, encodeURIComponent(String(conditionSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForResource: async (orgId, projId, envId, resourceId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForResource', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForResource', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForResource', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getDataForResource', 'resourceId', resourceId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_types/{resource_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForRole: async (orgId, projId, envId, roleId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForRole', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getDataForRole', 'roleId', roleId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForSetRule: async (orgId, projId, envId, userSetId, resourceSetId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForSetRule', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForSetRule', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForSetRule', 'envId', envId);
            // verify required parameter 'userSetId' is not null or undefined
            assertParamExists('getDataForSetRule', 'userSetId', userSetId);
            // verify required parameter 'resourceSetId' is not null or undefined
            assertParamExists('getDataForSetRule', 'resourceSetId', resourceSetId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'user_set_id'}}`, encodeURIComponent(String(userSetId)))
                .replace(`{${'resource_set_id'}}`, encodeURIComponent(String(resourceSetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForTenant: async (orgId, projId, envId, tenantId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForTenant', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForTenant', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForTenant', 'envId', envId);
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getDataForTenant', 'tenantId', tenantId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/tenants/{tenant_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'tenant_id'}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForUser: async (orgId, projId, envId, userId, options = {}) => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDataForUser', 'orgId', orgId);
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getDataForUser', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getDataForUser', 'envId', envId);
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getDataForUser', 'userId', userId);
            const localVarPath = `/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}`
                .replace(`{${'org_id'}}`, encodeURIComponent(String(orgId)))
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'user_id'}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OPALDataApi - functional programming interface
 * @export
 */
export const OPALDataApiFp = function (configuration) {
    const localVarAxiosParamCreator = OPALDataApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllData(orgId, projId, envId, internalUpdateCache, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllData(orgId, projId, envId, internalUpdateCache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForConditionSet(orgId, projId, envId, conditionSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForResource(orgId, projId, envId, resourceId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForResource(orgId, projId, envId, resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForRole(orgId, projId, envId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForRole(orgId, projId, envId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForTenant(orgId, projId, envId, tenantId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForTenant(orgId, projId, envId, tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataForUser(orgId, projId, envId, userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataForUser(orgId, projId, envId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * OPALDataApi - factory interface
 * @export
 */
export const OPALDataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = OPALDataApiFp(configuration);
    return {
        /**
         *
         * @summary Get All Data
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {boolean} [internalUpdateCache]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllData(orgId, projId, envId, internalUpdateCache, options) {
            return localVarFp
                .getAllData(orgId, projId, envId, internalUpdateCache, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Condition Set
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} conditionSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForConditionSet(orgId, projId, envId, conditionSetId, options) {
            return localVarFp
                .getDataForConditionSet(orgId, projId, envId, conditionSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Resource
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForResource(orgId, projId, envId, resourceId, options) {
            return localVarFp
                .getDataForResource(orgId, projId, envId, resourceId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Role
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForRole(orgId, projId, envId, roleId, options) {
            return localVarFp
                .getDataForRole(orgId, projId, envId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
         * @summary Get Data For Set Rule
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userSetId
         * @param {string} resourceSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options) {
            return localVarFp
                .getDataForSetRule(orgId, projId, envId, userSetId, resourceSetId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For Tenant
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} tenantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForTenant(orgId, projId, envId, tenantId, options) {
            return localVarFp
                .getDataForTenant(orgId, projId, envId, tenantId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Data For User
         * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataForUser(orgId, projId, envId, userId, options) {
            return localVarFp
                .getDataForUser(orgId, projId, envId, userId, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * OPALDataApi - object-oriented interface
 * @export
 * @class OPALDataApi
 * @extends {BaseAPI}
 */
export class OPALDataApi extends BaseAPI {
    /**
     *
     * @summary Get All Data
     * @param {OPALDataApiGetAllDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getAllData(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getAllData(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.internalUpdateCache, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Condition Set
     * @param {OPALDataApiGetDataForConditionSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForConditionSet(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForConditionSet(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.conditionSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Resource
     * @param {OPALDataApiGetDataForResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForResource(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForResource(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.resourceId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Role
     * @param {OPALDataApiGetDataForRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForRole(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForRole(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * return permission assignment data between user sets and resource sets (i.e: condition set rules data)
     * @summary Get Data For Set Rule
     * @param {OPALDataApiGetDataForSetRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForSetRule(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForSetRule(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.userSetId, requestParameters.resourceSetId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For Tenant
     * @param {OPALDataApiGetDataForTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForTenant(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForTenant(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.tenantId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Data For User
     * @param {OPALDataApiGetDataForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OPALDataApi
     */
    getDataForUser(requestParameters, options) {
        return OPALDataApiFp(this.configuration)
            .getDataForUser(requestParameters.orgId, requestParameters.projId, requestParameters.envId, requestParameters.userId, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,