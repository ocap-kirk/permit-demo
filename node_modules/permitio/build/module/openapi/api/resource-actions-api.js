/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ResourceActionsApi - axios parameter creator
 * @export
 */
export const ResourceActionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new action that can affect the resource.
         * @summary Create Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionCreate} resourceActionCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAction: async (projId, envId, resourceId, resourceActionCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createResourceAction', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createResourceAction', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('createResourceAction', 'resourceId', resourceId);
            // verify required parameter 'resourceActionCreate' is not null or undefined
            assertParamExists('createResourceAction', 'resourceActionCreate', resourceActionCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceActionCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceAction: async (projId, envId, resourceId, actionId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteResourceAction', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteResourceAction', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteResourceAction', 'resourceId', resourceId);
            // verify required parameter 'actionId' is not null or undefined
            assertParamExists('deleteResourceAction', 'actionId', actionId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single action defined on the resource, if such action exists.
         * @summary Get Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAction: async (projId, envId, resourceId, actionId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getResourceAction', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getResourceAction', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getResourceAction', 'resourceId', resourceId);
            // verify required parameter 'actionId' is not null or undefined
            assertParamExists('getResourceAction', 'actionId', actionId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the actions defined on the resource.
         * @summary List Resource Actions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActions: async (projId, envId, resourceId, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listResourceActions', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listResourceActions', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('listResourceActions', 'resourceId', resourceId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionUpdate} resourceActionUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAction: async (projId, envId, resourceId, actionId, resourceActionUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateResourceAction', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateResourceAction', 'envId', envId);
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateResourceAction', 'resourceId', resourceId);
            // verify required parameter 'actionId' is not null or undefined
            assertParamExists('updateResourceAction', 'actionId', actionId);
            // verify required parameter 'resourceActionUpdate' is not null or undefined
            assertParamExists('updateResourceAction', 'resourceActionUpdate', resourceActionUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
                .replace(`{${'action_id'}}`, encodeURIComponent(String(actionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceActionUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ResourceActionsApi - functional programming interface
 * @export
 */
export const ResourceActionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ResourceActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a new action that can affect the resource.
         * @summary Create Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionCreate} resourceActionCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceAction(projId, envId, resourceId, resourceActionCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAction(projId, envId, resourceId, resourceActionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceAction(projId, envId, resourceId, actionId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceAction(projId, envId, resourceId, actionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single action defined on the resource, if such action exists.
         * @summary Get Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceAction(projId, envId, resourceId, actionId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAction(projId, envId, resourceId, actionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the actions defined on the resource.
         * @summary List Resource Actions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listResourceActions(projId, envId, resourceId, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listResourceActions(projId, envId, resourceId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionUpdate} resourceActionUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ResourceActionsApi - factory interface
 * @export
 */
export const ResourceActionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ResourceActionsApiFp(configuration);
    return {
        /**
         * Creates a new action that can affect the resource.
         * @summary Create Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionCreate} resourceActionCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAction(projId, envId, resourceId, resourceActionCreate, options) {
            return localVarFp
                .createResourceAction(projId, envId, resourceId, resourceActionCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes the action and all its related data. This includes any permissions granted to perform the action.
         * @summary Delete Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceAction(projId, envId, resourceId, actionId, options) {
            return localVarFp
                .deleteResourceAction(projId, envId, resourceId, actionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single action defined on the resource, if such action exists.
         * @summary Get Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAction(projId, envId, resourceId, actionId, options) {
            return localVarFp
                .getResourceAction(projId, envId, resourceId, actionId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all the actions defined on the resource.
         * @summary List Resource Actions
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceActions(projId, envId, resourceId, page, perPage, options) {
            return localVarFp
                .listResourceActions(projId, envId, resourceId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
         * @summary Update Resource Action
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
         * @param {string} actionId Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
         * @param {ResourceActionUpdate} resourceActionUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options) {
            return localVarFp
                .updateResourceAction(projId, envId, resourceId, actionId, resourceActionUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ResourceActionsApi - object-oriented interface
 * @export
 * @class ResourceActionsApi
 * @extends {BaseAPI}
 */
export class ResourceActionsApi extends BaseAPI {
    /**
     * Creates a new action that can affect the resource.
     * @summary Create Resource Action
     * @param {ResourceActionsApiCreateResourceActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionsApi
     */
    createResourceAction(requestParameters, options) {
        return ResourceActionsApiFp(this.configuration)
            .createResourceAction(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.resourceActionCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the action and all its related data. This includes any permissions granted to perform the action.
     * @summary Delete Resource Action
     * @param {ResourceActionsApiDeleteResourceActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionsApi
     */
    deleteResourceAction(requestParameters, options) {
        return ResourceActionsApiFp(this.configuration)
            .deleteResourceAction(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single action defined on the resource, if such action exists.
     * @summary Get Resource Action
     * @param {ResourceActionsApiGetResourceActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionsApi
     */
    getResourceAction(requestParameters, options) {
        return ResourceActionsApiFp(this.configuration)
            .getResourceAction(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the actions defined on the resource.
     * @summary List Resource Actions
     * @param {ResourceActionsApiListResourceActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionsApi
     */
    listResourceActions(requestParameters, options) {
        return ResourceActionsApiFp(this.configuration)
            .listResourceActions(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
     * @summary Update Resource Action
     * @param {ResourceActionsApiUpdateResourceActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceActionsApi
     */
    updateResourceAction(requestParameters, options) {
        return ResourceActionsApiFp(this.configuration)
            .updateResourceAction(requestParameters.projId, requestParameters.envId, requestParameters.resourceId, requestParameters.actionId, requestParameters.resourceActionUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,