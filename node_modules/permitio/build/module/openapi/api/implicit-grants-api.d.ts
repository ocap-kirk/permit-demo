/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DerivedRoleRuleCreate } from '../types';
import { DerivedRoleRuleDelete } from '../types';
import { DerivedRoleRuleRead } from '../types';
import { PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings } from '../types';
/**
 * ImplicitGrantsApi - axios parameter creator
 * @export
 */
export declare const ImplicitGrantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImplicitGrant: (projId: string, envId: string, resourceId: string, roleId: string, derivedRoleRuleCreate: DerivedRoleRuleCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImplicitGrant: (projId: string, envId: string, roleId: string, resourceId: string, derivedRoleRuleDelete: DerivedRoleRuleDelete, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImplicitGrantsConditions: (projId: string, envId: string, resourceId: string, roleId: string, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ImplicitGrantsApi - functional programming interface
 * @export
 */
export declare const ImplicitGrantsApiFp: (configuration?: Configuration) => {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImplicitGrant(projId: string, envId: string, resourceId: string, roleId: string, derivedRoleRuleCreate: DerivedRoleRuleCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DerivedRoleRuleRead>>;
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImplicitGrant(projId: string, envId: string, roleId: string, resourceId: string, derivedRoleRuleDelete: DerivedRoleRuleDelete, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImplicitGrantsConditions(projId: string, envId: string, resourceId: string, roleId: string, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings>>;
};
/**
 * ImplicitGrantsApi - factory interface
 * @export
 */
export declare const ImplicitGrantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleCreate} derivedRoleRuleCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImplicitGrant(projId: string, envId: string, resourceId: string, roleId: string, derivedRoleRuleCreate: DerivedRoleRuleCreate, options?: any): AxiosPromise<DerivedRoleRuleRead>;
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {DerivedRoleRuleDelete} derivedRoleRuleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImplicitGrant(projId: string, envId: string, roleId: string, resourceId: string, derivedRoleRuleDelete: DerivedRoleRuleDelete, options?: any): AxiosPromise<void>;
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param {string} resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @param {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings} permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImplicitGrantsConditions(projId: string, envId: string, resourceId: string, roleId: string, permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, options?: any): AxiosPromise<PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings>;
};
/**
 * Request parameters for createImplicitGrant operation in ImplicitGrantsApi.
 * @export
 * @interface ImplicitGrantsApiCreateImplicitGrantRequest
 */
export interface ImplicitGrantsApiCreateImplicitGrantRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiCreateImplicitGrant
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiCreateImplicitGrant
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiCreateImplicitGrant
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiCreateImplicitGrant
     */
    readonly roleId: string;
    /**
     *
     * @type {DerivedRoleRuleCreate}
     * @memberof ImplicitGrantsApiCreateImplicitGrant
     */
    readonly derivedRoleRuleCreate: DerivedRoleRuleCreate;
}
/**
 * Request parameters for deleteImplicitGrant operation in ImplicitGrantsApi.
 * @export
 * @interface ImplicitGrantsApiDeleteImplicitGrantRequest
 */
export interface ImplicitGrantsApiDeleteImplicitGrantRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiDeleteImplicitGrant
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiDeleteImplicitGrant
     */
    readonly envId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiDeleteImplicitGrant
     */
    readonly roleId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiDeleteImplicitGrant
     */
    readonly resourceId: string;
    /**
     *
     * @type {DerivedRoleRuleDelete}
     * @memberof ImplicitGrantsApiDeleteImplicitGrant
     */
    readonly derivedRoleRuleDelete: DerivedRoleRuleDelete;
}
/**
 * Request parameters for updateImplicitGrantsConditions operation in ImplicitGrantsApi.
 * @export
 * @interface ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest
 */
export interface ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest {
    /**
     * Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions
     */
    readonly projId: string;
    /**
     * Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions
     */
    readonly envId: string;
    /**
     * Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions
     */
    readonly resourceId: string;
    /**
     * Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
     * @type {string}
     * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions
     */
    readonly roleId: string;
    /**
     *
     * @type {PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings}
     * @memberof ImplicitGrantsApiUpdateImplicitGrantsConditions
     */
    readonly permitBackendSchemasSchemaDerivedRoleDerivedRoleSettings: PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings;
}
/**
 * ImplicitGrantsApi - object-oriented interface
 * @export
 * @class ImplicitGrantsApi
 * @extends {BaseAPI}
 */
export declare class ImplicitGrantsApi extends BaseAPI {
    /**
     * Creates an implicit grant on a given role
     * @summary Create Implicit Grant
     * @param {ImplicitGrantsApiCreateImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    createImplicitGrant(requestParameters: ImplicitGrantsApiCreateImplicitGrantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DerivedRoleRuleRead, any>>;
    /**
     * Deletes an implicit grant on a given role
     * @summary Delete Implicit Grant
     * @param {ImplicitGrantsApiDeleteImplicitGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    deleteImplicitGrant(requestParameters: ImplicitGrantsApiDeleteImplicitGrantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update the `when` for implicit grants on a given role
     * @summary Update Implicit Grants Conditions
     * @param {ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImplicitGrantsApi
     */
    updateImplicitGrantsConditions(requestParameters: ImplicitGrantsApiUpdateImplicitGrantsConditionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PermitBackendSchemasSchemaDerivedRoleDerivedRoleSettings, any>>;
}
