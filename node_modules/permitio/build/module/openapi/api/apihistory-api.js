/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * APIHistoryApi - axios parameter creator
 * @export
 */
export const APIHistoryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns full information, including request and response bodies, for one event.
         * @summary Get Api Event
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEvent: async (eventId, options = {}) => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getApiEvent', 'eventId', eventId);
            const localVarPath = `/v2/history/{event_id}`.replace(`{${'event_id'}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Request Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestBody: async (eventId, options = {}) => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getRequestBody', 'eventId', eventId);
            const localVarPath = `/v2/history/{event_id}/request`.replace(`{${'event_id'}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Response Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponseBody: async (eventId, options = {}) => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getResponseBody', 'eventId', eventId);
            const localVarPath = `/v2/history/{event_id}/response`.replace(`{${'event_id'}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all API History events for given filters.
         * @summary List Api Events
         * @param {Array<string>} [method] HTTP methods to include in search
         * @param {Array<string>} [path] API paths to include in search
         * @param {boolean} [success] Filter by API request success/failure
         * @param {Array<number>} [statusCode] HTTP status codes to include in search
         * @param {Array<string>} [clientIp] IPs of clients to include in search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiEvents: async (method, path, success, statusCode, clientIp, actorType, actorId, actorDisplayName, projectId, envId, timestampFrom, timestampUntil, page, perPage, options = {}) => {
            const localVarPath = `/v2/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (method) {
                localVarQueryParameter['method'] = method;
            }
            if (path) {
                localVarQueryParameter['path'] = path;
            }
            if (success !== undefined) {
                localVarQueryParameter['success'] = success;
            }
            if (statusCode) {
                localVarQueryParameter['status_code'] = statusCode;
            }
            if (clientIp) {
                localVarQueryParameter['client_ip'] = clientIp;
            }
            if (actorType) {
                localVarQueryParameter['actor_type'] = actorType;
            }
            if (actorId) {
                localVarQueryParameter['actor_id'] = actorId;
            }
            if (actorDisplayName !== undefined) {
                localVarQueryParameter['actor_display_name'] = actorDisplayName;
            }
            if (projectId) {
                localVarQueryParameter['project_id'] = projectId;
            }
            if (envId) {
                localVarQueryParameter['env_id'] = envId;
            }
            if (timestampFrom !== undefined) {
                localVarQueryParameter['timestamp_from'] = timestampFrom;
            }
            if (timestampUntil !== undefined) {
                localVarQueryParameter['timestamp_until'] = timestampUntil;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * APIHistoryApi - functional programming interface
 * @export
 */
export const APIHistoryApiFp = function (configuration) {
    const localVarAxiosParamCreator = APIHistoryApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns full information, including request and response bodies, for one event.
         * @summary Get Api Event
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEvent(eventId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEvent(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Request Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestBody(eventId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestBody(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Response Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResponseBody(eventId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResponseBody(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches all API History events for given filters.
         * @summary List Api Events
         * @param {Array<string>} [method] HTTP methods to include in search
         * @param {Array<string>} [path] API paths to include in search
         * @param {boolean} [success] Filter by API request success/failure
         * @param {Array<number>} [statusCode] HTTP status codes to include in search
         * @param {Array<string>} [clientIp] IPs of clients to include in search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiEvents(method, path, success, statusCode, clientIp, actorType, actorId, actorDisplayName, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiEvents(method, path, success, statusCode, clientIp, actorType, actorId, actorDisplayName, projectId, envId, timestampFrom, timestampUntil, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * APIHistoryApi - factory interface
 * @export
 */
export const APIHistoryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = APIHistoryApiFp(configuration);
    return {
        /**
         * Returns full information, including request and response bodies, for one event.
         * @summary Get Api Event
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEvent(eventId, options) {
            return localVarFp.getApiEvent(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Request Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestBody(eventId, options) {
            return localVarFp
                .getRequestBody(eventId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Response Body
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponseBody(eventId, options) {
            return localVarFp
                .getResponseBody(eventId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Fetches all API History events for given filters.
         * @summary List Api Events
         * @param {Array<string>} [method] HTTP methods to include in search
         * @param {Array<string>} [path] API paths to include in search
         * @param {boolean} [success] Filter by API request success/failure
         * @param {Array<number>} [statusCode] HTTP status codes to include in search
         * @param {Array<string>} [clientIp] IPs of clients to include in search
         * @param {Array<string>} [actorType] Actor type to search (member, user, api_key)
         * @param {Array<string>} [actorId] Actor ID to search
         * @param {string} [actorDisplayName] Actor display name to search
         * @param {Array<string>} [projectId] Projects to include in search
         * @param {Array<string>} [envId] Environments to include in search
         * @param {number} [timestampFrom] Retrieve only events after this timestamp (seconds since epoch)
         * @param {number} [timestampUntil] Retrieve only events before this timestamp (seconds since epoch)
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiEvents(method, path, success, statusCode, clientIp, actorType, actorId, actorDisplayName, projectId, envId, timestampFrom, timestampUntil, page, perPage, options) {
            return localVarFp
                .listApiEvents(method, path, success, statusCode, clientIp, actorType, actorId, actorDisplayName, projectId, envId, timestampFrom, timestampUntil, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * APIHistoryApi - object-oriented interface
 * @export
 * @class APIHistoryApi
 * @extends {BaseAPI}
 */
export class APIHistoryApi extends BaseAPI {
    /**
     * Returns full information, including request and response bodies, for one event.
     * @summary Get Api Event
     * @param {APIHistoryApiGetApiEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getApiEvent(requestParameters, options) {
        return APIHistoryApiFp(this.configuration)
            .getApiEvent(requestParameters.eventId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Request Body
     * @param {APIHistoryApiGetRequestBodyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getRequestBody(requestParameters, options) {
        return APIHistoryApiFp(this.configuration)
            .getRequestBody(requestParameters.eventId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Response Body
     * @param {APIHistoryApiGetResponseBodyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    getResponseBody(requestParameters, options) {
        return APIHistoryApiFp(this.configuration)
            .getResponseBody(requestParameters.eventId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all API History events for given filters.
     * @summary List Api Events
     * @param {APIHistoryApiListApiEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIHistoryApi
     */
    listApiEvents(requestParameters = {}, options) {
        return APIHistoryApiFp(this.configuration)
            .listApiEvents(requestParameters.method, requestParameters.path, requestParameters.success, requestParameters.statusCode, requestParameters.clientIp, requestParameters.actorType, requestParameters.actorId, requestParameters.actorDisplayName, requestParameters.projectId, requestParameters.envId, requestParameters.timestampFrom, requestParameters.timestampUntil, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,