import globalAxios from 'axios';
import _ from 'lodash';
import { ApiContext } from './api/context';
/**
 * A factory class for the Permit SDK configuration
 */
export class ConfigFactory {
    /**
     * @returns the default SDK configuration
     */
    static defaults() {
        return {
            token: _.get(process.env, 'PERMIT_API_KEY', ''),
            pdp: _.get(process.env, 'PERMIT_PDP_URL', 'http://localhost:7766'),
            apiUrl: _.get(process.env, 'PERMIT_API_URL', 'https://api.permit.io'),
            log: {
                // log level, default is warn (warnings and errors)
                level: _.get(process.env, 'PERMIT_LOG_LEVEL', 'warn'),
                // Label added to logs
                label: _.get(process.env, 'PERMIT_LOG_LABEL', 'Permit.io'),
                // When logging - dump full data to console as JSON
                json: JSON.parse(_.get(process.env, 'PERMIT_LOG_JSON', 'false')),
            },
            multiTenancy: {
                defaultTenant: 'default',
                useDefaultTenantIfEmpty: true,
            },
            timeout: undefined,
            throwOnError: true,
            apiContext: new ApiContext(),
            axiosInstance: globalAxios.create(),
        };
    }
    /**
     * Builds the Permit SDK configuration from the values provided by the SDK user
     * and from the default SDK configuration when no specific values are set.
     *
     * @param options - a partial configuration
     * @returns the SDK configuration (for unset values returns the default config)
     */
    static build(options) {
        const config = _.merge(_.assign({}, ConfigFactory.defaults()), options);
        return config;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQThCLE1BQU0sT0FBTyxDQUFDO0FBQ25ELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUV2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0YzQzs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBQ3hCOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFFBQVE7UUFDYixPQUFPO1lBQ0wsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7WUFDL0MsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsQ0FBQztZQUNsRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDO1lBQ3JFLEdBQUcsRUFBRTtnQkFDSCxtREFBbUQ7Z0JBQ25ELEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO2dCQUNyRCxzQkFBc0I7Z0JBQ3RCLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxDQUFDO2dCQUMxRCxtREFBbUQ7Z0JBQ25ELElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNqRTtZQUNELFlBQVksRUFBRTtnQkFDWixhQUFhLEVBQUUsU0FBUztnQkFDeEIsdUJBQXVCLEVBQUUsSUFBSTthQUM5QjtZQUNELE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLFVBQVUsRUFBRSxJQUFJLFVBQVUsRUFBRTtZQUM1QixhQUFhLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRTtTQUNwQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBd0M7UUFDbkQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4RSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0YifQ==